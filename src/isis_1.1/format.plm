1C00H:
DO;
    DECLARE NSECTORS LITERALLY '26';
    DECLARE NTRACKS LITERALLY '77';
    DECLARE IOCW    LITERALLY '0',
            IOINS   LITERALLY '1',
            NSEC    LITERALLY '2',
            TADR    LITERALLY '3',
            SADR    LITERALLY '4',
            BUFLO   LITERALLY '5',
            BUFHI   LITERALLY '6';

    DECLARE TRUE    LITERALLY '0FFH',
            FALSE   LITERALLY '0',
            CR      LITERALLY '0DH',
            LF      LITERALLY '0AH';

    DECLARE DCMD$READ  LITERALLY '4',
            DCMD$WRITE LITERALLY '6';

    DECLARE INVISIBLE$A LITERALLY '1',
            SYSTEM$A    LITERALLY '2',
            WRITEP$A    LITERALLY '4',
            FORMAT$A    LITERALLY '80H';

    DECLARE VER DATA(1, 14H);
    DECLARE COPYRIGNT DATA('COPYRIGHT (C) INTEL 1975,1976');
/*
	THE CODE BLOCK BELOW IS LOADED INTO ISIS.T0 ON NON SYSTEM DISKS TO PRINT A MESSAGE
	THE CORRESPONDING ASM CODE IS

		ASEG
		org 3000h

		IN	79H
		IN	7BH
	L3004:	IN	0FFH
		ANI	2
		JNZ	L3004
		LXI	H, MSG
		MVI	B, 32
	L3010:	MOV	C, M
		CALL	0F809H	; CO
		INX	H
		DCR	B
		JNZ	L3010
		RST	0
	MSG:	DB	0DH, 0AH
		DB	'NON-SYSTEM DISK, TRY ANOTHER'
		DB	0DH, 0AH
		END
*/
DECLARE CODEBLOCK DATA(0DBH, 79H, 0DBH, 7BH, 0DBH, 0FFH, 0E6H, 2,
			       0C2H, 4, 30H, 21H, 1AH, 30H, 6, 20H, 4EH,
			       0CDH, 9, 0F8H, 23H, 5, 0C2H, 10H, 30H, 0C7H,
			       CR, LF, 'NON-SYSTEM DISK, TRY ANOTHER', CR, LF);
DECLARE ATTRIBMAP DATA(INVISIBLE$A, SYSTEM$A, WRITEP$A);
DECLARE CRLF DATA(CR, LF);
DECLARE	ISIST0 DATA(':F1:ISIS.T0 '),
        ISISBIN DATA(':F1:ISIS.BIN '),
        ISISMAP DATA(':F1:ISIS.MAP '),
        ISISLAB DATA(':F1:ISIS.LAB '),
        ISISDIR DATA(':F1:ISIS.DIR ');

/* GLOBAL VARIABLES */
DECLARE BITMAP(256) BYTE,
        MAPCHANGE BYTE INITIAL(0),      /* NOT USED */
        MAPDCB(10) BYTE INITIAL(80H, DCMD$WRITE, 2, 2, 2),    /* NOT USED */
        MAPDRV BYTE INITIAL(0FFH),      /* NOT USED */
        BASTRKSEC ADDRESS,              /* NOT USED */
        BITMAPINDEX ADDRESS,            /* NOT USED */
        BITMASK(8) BYTE INITIAL(80H, 40H, 20H, 10H, 8, 4, 2, 1);
DECLARE DIRECT(10) BYTE,  DIRECTATTR BYTE, DIRECTOTHER(5) BYTE, PAD1(3) BYTE;
DECLARE FMTTABLE(77) BYTE INITIAL(
            1, 12,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
            3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
            3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
            3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
            3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3);
DECLARE MEMSIZE ADDRESS;
DECLARE ACTUAL ADDRESS, PAD2 ADDRESS;
DECLARE (BUFFERPTR, II, JJ, NAMELEN) ADDRESS, PAD3 BYTE;
DECLARE (SYSTEM, COPYALL, COPY) BYTE;
DECLARE (AFTIN, AFTOUT, AFTDIR, STATUS) ADDRESS, PAD4 BYTE;
DECLARE SRCNAME(16) BYTE, DSTNAME(16) BYTE;



    MEMCK: PROCEDURE ADDRESS;
        GOTO 0F81BH;
    END;

    ISIS: PROCEDURE(CMD, PARAM$P);
        DECLARE CMD BYTE, PARAM$P ADDRESS;
        GOTO 40H;
    END ISIS;

    OPEN: PROCEDURE(CONN$P, PATH$P, ACCESS, ECHO, STATUS$P);
        DECLARE (CONN$P, PATH$P, ACCESS, ECHO, STATUS$P) ADDRESS;

        CALL ISIS(0, .CONN$P);
    END;

    READ: PROCEDURE(CONN, BUFF$P, COUNT, ACTUAL$P, STATUS$P);
        DECLARE (CONN, BUFF$P, COUNT, ACTUAL$P, STATUS$P) ADDRESS;

        CALL ISIS(3, .CONN);
    END;

    WRITE: PROCEDURE(CONN, BUFF$P, COUNT, STATUS$P);
        DECLARE (CONN, BUFF$P, COUNT, STATUS$P) ADDRESS;

        CALL ISIS(4, .CONN);
    END;

    CLOSE: PROCEDURE(CONN, STATUS$P);
        DECLARE (CONN, STATUS$P) ADDRESS;

        CALL ISIS(1, .CONN);
    END;

    ERROR: PROCEDURE(ERROR$NUM);
        DECLARE (ERROR$NUM, STATUS) ADDRESS;

        STATUS = .STATUS;
        CALL ISIS(12, .ERROR$NUM);
    END;

    EXIT: PROCEDURE;
        DECLARE STATUS ADDRESS;

        STATUS = .STATUS;
        CALL ISIS(9, .STATUS);
    END;

    ATTRIB: PROCEDURE (PATH$P, ATTRIB, ON$OFF, STATUS$P);
        DECLARE (PATH$P, ATTRIB, ON$OFF, STATUS$P) ADDRESS;

        CALL ISIS(10, .PATH$P);
    END ATTRIB;

    DELETE: PROCEDURE (PATH$P, STATUS$P);
        DECLARE (PATH$P, STATUS$P) ADDRESS;

        CALL ISIS(2, .PATH$P);
    END DELETE;


    DISKIO: PROCEDURE(DRIVE, IOPB);
        DECLARE (DRIVE, IOPB) ADDRESS;
        DECLARE PARAMS(4) ADDRESS;

        PARAMS(0) = 'SK';
        PARAMS(1) = DRIVE;
        PARAMS(2) = IOPB;
        CALL ISIS(44H, .PARAMS);
    END;

    CLRBUF: PROCEDURE(PTR);
        DECLARE PTR ADDRESS, CH BASED PTR BYTE;
        DECLARE I BYTE;
        I = 128;
        DO WHILE I <> 0;
            I = I - 1;
            CH = 0;
            PTR = PTR + 1;
        END;
    END;

    /* NOT ACTUALLY USED */
    NUMOUT: PROCEDURE(VALUE, BASE, LC, BUFADR, WIDTH);
        DECLARE (VALUE, BUFADR) ADDRESS, (BASE, LC, WIDTH) BYTE; 
        DECLARE DIGITS DATA('0123456789ABCDEF');
        DECLARE I BYTE;
        DECLARE BUF BASED BUFADR (1) BYTE;

        DO I = 1 TO WIDTH;
            BUF(WIDTH - I) = DIGITS(VALUE MOD BASE);
            VALUE = VALUE / BASE;   
        END;

        I = 0;
        DO WHILE BUF(I) = '0' AND I < WIDTH - 1;
            BUF(I) = LC;
            I = I + 1;
        END;
    END;

    REPORTERROR: PROCEDURE(ERRNUM);
        DECLARE ERRNUM ADDRESS;
        DECLARE NUMBERBUFFER(4) BYTE, I ADDRESS, STATUS ADDRESS;
     

        DECLARE ERRMSG DATA(0, 0,
            2, 'ILLEGAL AFTN ARGUMENT', 0,
            4, 'INCORRECTLY SPECIFIED FILE', 0,
            5, 'UNRECOGNIZED DEVICE NAME', 0,
            6, 'ATTEMPT TO WRITE TO INPUT DEVICE', 0,
            8, 'ATTEMPT TO READ FROM OUTPUT DEVICE', 0,
            9, 'DIRECTORY FULL', 0,
            0AH, 'NOT ON SAME DISK', 0,
            0BH, 'FILE ALREADY EXISTS', 0,
            0CH, 'FILE IS ALREADY OPEN', 0,
            0DH, 'NO SUCH FILE', 0,
            0EH, 'WRITE PROTECTED', 0,
            0FH, 'LOAD TOO LOW', 0,
            10H, 'BAD LOAD FORMAT', 0,
            11H, 'NOT A DISK FILE', 0,
            12H, 'ILLEGAL ISIS COMMAND', 0,
            13H, 'ATTEMPTED SEEK ON NON-DISK FILE', 0,
            14H, 'ATTEMPTED BACK SEEK TO FAR', 0,
            16H, 'ILLEGAL ACCESS MODE TO OPEN', 0,
            17H, 'MISSING FILENAME', 0,
            19H, 'ILLEGAL ECHO FILE', 0,
            1AH, 'ILLEGAL ATTRIBUTE IDENTIFIER', 0,
            1BH, 'ILLEGAL SEEK COMMAND', 0,
            1CH, 'MISSING EXTENSION', 0,
            1FH, 'CAN', 27H, 'T SEEK ON WRITE ONLY FILE', 0,
            20H, 'CAN', 27H, 'T DELETE OPEN FILE', 0,
            23H, 'SEEK PAST EOF', 0,
            0C9H, 'UNRECOGNIZED SWITCH', 0,
            0CAH, 'UNRECOGNIZED DELIMITER', 0,
            0CBH, 'INVALID SYNTAX', 0,
            0CCH, 'PREMATURE EOF', 0,
            0CEH, 'ILLEGAL DISKETTE LABEL', 0,
            0D0H, 'CHECKSUM ERROR', 0
        );



        IF ERRNUM <> 0 THEN
        DO;
            I = 0;
            DO WHILE I < LENGTH(ERRMSG);
                IF ERRNUM = ERRMSG(I) AND ERRMSG(I + 1) <> 0 THEN
                DO;
                    I = I + 1;
                    CALL WRITE(0, .(' '), 1, .STATUS);
                    DO WHILE ERRMSG(I) <> 0;
                        CALL WRITE(0, .ERRMSG(I), 1, .STATUS);
                        I = I + 1;
                    END;
                    CALL WRITE(0, .(0DH, 0AH), 2, .STATUS);
                    return;
                END;
                ELSE
                DO;
                    DO WHILE ERRMSG(I) <> 0;
                        I = I + 1;
                    END;
                    I = I + 1;
                END;
            end;
            CALL ERROR(ERRNUM);
        END;
    END;



    CHECKERROR: PROCEDURE(ERRCODE);
        DECLARE ERRCODE BYTE;
        IF ERRCODE = 0 THEN
            RETURN;
        CALL REPORTERROR(ERRCODE);
        CALL EXIT;
    END;


    SETBITMAP: PROCEDURE(TRKSEC);
        DECLARE TRKSEC ADDRESS;
        DECLARE MAPBYTE BYTE;

        TRKSEC = HIGH(TRKSEC) * 26 + LOW(TRKSEC) - 1;
        MAPBYTE = SHR(TRKSEC, 3);
        BITMAP(MAPBYTE) = BITMAP(MAPBYTE) OR BITMASK(LOW(TRKSEC) AND 7);
    END;

    /*
     ASBIO: ACCOMPLISHES THE TRANSFER OF 128 BYTES OF DATA FROM THE DISK 
       COMMAND  MUST BE THE NUMERIC VALUE OF THE FDCC COMMAND
                DESIRED. (LITERALS 'READ$COMMAND' AND 'WRITE$COMMAND'
                EXIST FOR THE COMMON OPERATIONS.)
       DISK     THE DRIVE FROM WHICH TO READ
       BLOCK    DISKETTE BLOCK NUMBER, A TRACK NUMBER (0-76)
                IN THE HIGH ORDER 8 BITS AND A SECTORE NUMBER (1-26)
                IN THE LOW ORDER 8 BITS
       BUFFER$PTR   THE ADDRESS OF A 128 BYTE BUFFER IN RAM
    */
    ABSIO: PROCEDURE (COMMAND, DISK, BLOCK, BUFFER$PTR);
        DECLARE (COMMAND, DISK) BYTE, (BLOCK, BUFFER$PTR) ADDRESS;
        /* VALUE OF 'DISK'  MUST BE 0 - 1 */
        DECLARE DCB BYTE INITIAL(80H);
        DECLARE DCBINST(9) BYTE;
        DECLARE IOPTR ADDRESS;
        DECLARE IOBYTE BASED IOPTR BYTE, IOWORD BASED IOPTR ADDRESS;

        IOPTR = .DCBINST;

        IOBYTE = COMMAND;
        IOPTR = IOPTR + 1;
        IOBYTE = 1;     /* IF THIS VALUE CHANGES IN THE FUTURE, */
                        /* THE 8271 DRIVER MUST BE CHANGED */
        IOPTR = IOPTR + 1;
        IOBYTE = HIGH(BLOCK);
        IOPTR = IOPTR + 1;
        IOBYTE = LOW(BLOCK);
        IOPTR = IOPTR + 1;
        IOWORD = BUFFER$PTR;
        CALL DISKIO(DISK, .DCB);
    END;


    FORMATTRACK: PROCEDURE(DISK, FIRSTTRK, LASTTRK, INTERLEAVE);
        DECLARE (DISK, FIRSTTRK, LASTTRK, INTERLEAVE) BYTE;
        DECLARE (I, J, CURTRACK) BYTE;
        DECLARE TRACKBUF(52) BYTE;
        DECLARE DCB(10) BYTE INITIAL(0C0H, 2, 0, 0, 0, 0, 0, 0, 0, 0);
        

        DO I = 1 to 51 BY 2;
            TRACKBUF(I) = 0C7H;
        END; 
        J = 0;

        DO CURTRACK = FIRSTTRK TO LASTTRK;
            DO I = 0 TO 51 BY 2;
                TRACKBUF(I) = 0;
            END;
            DO I = 1 TO NSECTORS;
                J = (J + INTERLEAVE) MOD NSECTORS;
                DO WHILE TRACKBUF(J + J) <> 0;
                    J = (J + 1) MOD NSECTORS;
                END;
                TRACKBUF(J + J) = I;
            END;
            
            DCB(TADR) = CURTRACK;
            DCB(BUFHI) = HIGH(.TRACKBUF);
            DCB(BUFLO) = LOW(.TRACKBUF);
            CALL DISKIO(DISK, .DCB);
        END;
    END;



    DEBLANK: PROCEDURE(PTR) ADDRESS;
        DECLARE PTR ADDRESS;
        DECLARE C BASED PTR BYTE;

        DO WHILE C = ' ';
            PTR = PTR + 1;
        END;
        RETURN PTR;
    END;

    DELIMIT: PROCEDURE(PTR) ADDRESS;
        DECLARE PTR ADDRESS;
        DECLARE C BASED PTR BYTE;

        DO WHILE (C = ':' OR C = '.' 
              OR ('0' <= C AND C <= '9')
              OR ('A' <= C AND C <= 'Z'));
            PTR = PTR + 1;
        END;
        RETURN PTR;
    END;

	MOVE: PROCEDURE(DST$P, SRC$P, CNT);
		DECLARE (DST$P, SRC$P) ADDRESS;
        DECLARE DST BASED DST$P (1) BYTE;
        DECLARE SRC BASED SRC$P (1) BYTE;
        DECLARE (CNT, I) BYTE;

		DO I = 0 TO CNT - 1;
            DST(I) = SRC(I);
		END;
	end;

    WRITEDIRECTORY: PROCEDURE(DRIVE);
        DECLARE DRIVE BYTE;
        DECLARE DISISDIR DATA('ISIS',0,0,'DIR');
        DECLARE DISISMAP DATA('ISIS',0,0,'MAP');
        DECLARE DISIST0  DATA('ISIS',0,0,'T0', 0);
        DECLARE DISISBIN DATA('ISIS',0,0,'BIN');
        DECLARE DISISLAB DATA('ISIS',0,0,'LAB');

        DECLARE I BYTE, JJ ADDRESS;
        DECLARE DIRBUFW(0) ADDRESS, DIRBUF(0) BYTE,
                DIR0W(0)   ADDRESS, DIR0(16) BYTE,
                DIR1W(0)   ADDRESS, DIR1(16) BYTE,
                DIR2W(0)   ADDRESS, DIR2(16) BYTE,
                DIR3W(0)   ADDRESS, DIR3(16) BYTE,
                DIR4W(0)   ADDRESS, DIR4(16) BYTE,
                DIR5W(0)   ADDRESS, DIR5(16) BYTE,
                DIR6W(0)   ADDRESS, DIR6(16) BYTE,
                DIR7W(0)   ADDRESS, DIR7(16) BYTE;

        DO I = 0 TO 255;
            BITMAP(I) = 0;
        END;
        CALL CLRBUF(.DIRBUF);
        DIRBUFW(2) = 1;
        DO I = 2 TO 23;
            DIRBUFW(I + 1) = DIRBUFW(I) + 1;
        END;
        CALL ABSIO(DCMD$WRITE, DRIVE, 18H, .DIRBUF);
        CALL CLRBUF(.DIRBUF);

        DIRBUFW(2) = 1AH;
        DO I = 2 TO 1;
            DIRBUFW(I + 1) = DIRBUFW(I) + 1;
        END;
        CALL ABSIO(DCMD$WRITE, DRIVE, 19H, .DIRBUF);
        CALL CLRBUF(.DIRBUF);

        DIRBUFW(2) = 102H;
        DO I = 2 TO 25;
            DIRBUFW(I + 1) = DIRBUFW(I) + 1;
        END;
        CALL ABSIO(DCMD$WRITE, DRIVE, 101H, .DIRBUF);
        CALL CLRBUF(.DIRBUF);

        DIRBUFW(2) = 202H;
        DO I = 2 TO 2;
            DIRBUFW(I + 1) = DIRBUFW(I) + 1;
        END;
        CALL ABSIO(DCMD$WRITE, DRIVE, 201H, .DIRBUF);
        CALL CLRBUF(.DIRBUF);

        CALL ABSIO(DCMD$WRITE, DRIVE, 204H, .DIRBUF);

        CALL CLRBUF(.DIRBUF);

        CALL MOVE(.DIR0(1), .DISISDIR, 9);
        DIR0W(6) = 19H;
        DIR0W(7) = 101H;
        DIR0(0) = 0;
        DIR0(10) = 1;
        DIR0(11) = 80H;

        CALL MOVE(.DIR1(1), .DISISMAP, 9);
        DIR1W(6) = 2H;
        DIR1W(7) = 201H;
        DIR1(0) = 0;
        DIR1(10) = 1;
        DIR1(11) = 80H;

        CALL MOVE(.DIR2(1), .DISIST0, 9);
        DIR2W(6) = 17H;
        DIR2W(7) = 18H;
        DIR2(0) = 0;
        DIR2(10) = 1;
        DIR2(11) = 80H;

        CALL MOVE(.DIR3(1), .DISISLAB, 9);
        DIR3W(6) = 1H;
        DIR3W(7) = 19H;
        DIR3(0) = 0;
        DIR3(10) = 1;
        DIR3(11) = 80H;

        CALL MOVE(.DIR4(1), .DISISBIN, 9);
        DIR4W(6) = 0;
        DIR4W(7) = 204H;
        DIR4(0) = 0;
        DIR4(10) = 1 OR 2;
        DIR4(11) = 80H;

        DO I = 5 TO 7;
            DIRBUF(I * 16) = 7FH;
        END;

        CALL ABSIO(DCMD$WRITE, DRIVE, 102H, .DIRBUF);
        CALL CLRBUF(.DIRBUF);

        DO I = 0 TO 7;
            DIRBUF(I * 16) = 7FH;
        END;

        DO I = 2 TO 25;
            CALL ABSIO(DCMD$WRITE, DRIVE, 102H - 1 + I, .DIRBUF);
        END;

        CALL SETBITMAP(101H);
        DO JJ = 102H TO 25 + 102H - 1;
            CALL SETBITMAP(JJ);
        END;

        CALL SETBITMAP(201H);
        DO JJ = 202H TO 2 + 202H - 1;
            CALL SETBITMAP(JJ);
        END;

        CALL SETBITMAP(18H);
        DO JJ = 1 TO 1 + 17H - 1;
            CALL SETBITMAP(JJ);
        END; 

        CALL SETBITMAP(19H);
        DO JJ = 1AH TO 1AH + 1 - 1;
            CALL SETBITMAP(JJ);
        END; 

        CALL SETBITMAP(204H);

        CALL ABSIO(DCMD$WRITE, DRIVE, 202H, .BITMAP);
        CALL ABSIO(DCMD$WRITE, DRIVE, 202H + 1, .BITMAP(128));


    END;


    DECLARE DEVICES(21) ADDRESS INITIAL(
        'F0', 'F1', 'TI', 'TO', 'VI', 'VO', 'I1', 'O1',
        'TR', 'HR', 'R1', 'R2', 'TP', 'HP', 'P1', 'P2',
        'LP', 'L1', 'CI', 'CO', 'BB');
    DECLARE PN(20) BYTE;

    CANON: PROCEDURE(FILENAME, INFO$P) BYTE;
        DECLARE (FILENAME, INFO$P) ADDRESS;
        DECLARE PATHCH BASED FILENAME BYTE;
        DECLARE PATH BASED FILENAME (1) BYTE;
        DECLARE INFO BASED INFO$P (1) BYTE;
        DECLARE PAIR(0) ADDRESS, (B1, B2) BYTE;
        DECLARE (JUNK, I) BYTE;

        ALPHANUM: PROCEDURE BYTE;
            RETURN (PATHCH >= 'A' AND PATHCH <= 'Z')
                OR (PATHCH >= '0' AND PATHCH <= '9');
        END;

        GETFNCHAR: PROCEDURE;
            IF ALPHANUM THEN DO;
                INFO(I) = PATHCH;
                FILENAME = FILENAME + 1;
                B1 = FALSE;
            END;
        END;

        DO I = 0 TO 9;
            INFO(I) = 0;
        END;

        DO WHILE PATHCH  = ' ';
            FILENAME = FILENAME + 1;
        END;
        IF PATHCH = ':' THEN DO;
            INFO(0) = 0FFH;
            /* DEVICE COMPARISON IS DONE BACKWARDS */
            /* AS PL/M SWAPS WORD STRINGS */
            B2 = PATH(1);
            B1 = PATH(2);
            IF PATH(3) <> ':' THEN
                RETURN 4; 
            DO I = 0 TO LAST(DEVICES);
                IF DEVICES(I) = PAIR(0) THEN
                    INFO(0) = I;
            END;
            IF INFO(0) = 0FFH THEN
                RETURN 5;
            FILENAME = FILENAME + 4;
        END;
        B1 = TRUE;
        DO I = 1 TO 6;
            CALL GETFNCHAR;
        END;
        B2 = B1;
        B1 = PATHCH = '.';
        IF B1 THEN DO;
            FILENAME = FILENAME + 1;
            DO I = 7 TO 9;
                CALL GETFNCHAR;
            END;
        END;
        IF INFO(0) <= 1 THEN
            IF B2 THEN
                RETURN 17H;
            ELSE IF B1 THEN
                RETURN 1CH;
        IF ALPHANUM OR PATHCH = '.' OR PATHCH = ':' THEN
            RETURN 4;
        RETURN 0;
    END;


    UNPATH: PROCEDURE(DIR$P, FILENAME$P);
        DECLARE (DIR$P, FILENAME$p) ADDRESS;
        DECLARE FILENAME BASED FILENAME$P (1) BYTE;
        DECLARE DIR BASED DIR$P (1) BYTE;
        DECLARE I BYTE;

        FILENAME(0) = ':';
        FILENAME(1) = 'F';
        FILENAME(3) = ':';
        IF DIR(0) = 0 THEN
            FILENAME(2) = '0';
        ELSE
            FILENAME(2) = '1';
        FILENAME$P = FILENAME$P + 4;
        DO I = 0 TO 5;
            if (FILENAME(0) := DIR(I + 1)) <> 0 THEN
                FILENAME$P = FILENAME$P + 1;
        END;
        IF DIR(7) <> 0 THEN DO;
            FILENAME(0) = '.';
            FILENAME$P = FILENAME$P + 1;
        END; 
        DO I = 0 TO 2;
            if (FILENAME(0) := DIR(I + 7)) <> 0 THEN
                FILENAME$P = FILENAME$P + 1;
        END;
        FILENAME(0) = ' ';
    END; 

    DECLARE CHAR BASED BUFFER$PTR BYTE;
 
MAIN:
    COPYALL = FALSE;
    SYSTEM = FALSE;
	CALL READ(1, .MEMORY, 128, .ACTUAL, .STATUS);
    CALL CHECKERROR(STATUS);
	BUFFER$PTR = DEBLANK(.MEMORY);
    IF CHAR = ':' THEN
        CALL CHECKERROR(0CEH);   /* ILLEGAL DISKETTE LABEL */

    STATUS = CANON(BUFFERPTR, .PN);
    CALL CHECKERROR(STATUS);

	BUFFERPTR = DEBLANK(DELIMIT(DEBLANK(.MEMORY)));
    
    DO WHILE CHAR = '$';
        BUFFERPTR = BUFFERPTR + 1;
        IF CHAR = 'S' THEN DO;
            BUFFERPTR = DELIMIT(BUFFERPTR);
            SYSTEM = TRUE;
        END;
        ELSE IF CHAR = 'A' THEN DO;
            BUFFERPTR = DELIMIT(BUFFERPTR);
            COPYALL = TRUE;
        END;
        ELSE DO;
            CALL CHECKERROR(0C9H);
            CALL EXIT;
        END;
        BUFFERPTR = DEBLANK(BUFFERPTR);
    END;
    IF CHAR <> CR THEN DO;
        CALL CHECKERROR(0CBH);
        CALL EXIT;
    END;

    DO II = 0 TO 76;
        CALL FORMATTRACK(1, II, II, FMTTABLE(II)); 
    END;

    CALL WRITEDIRECTORY(1);
    /* BUILD ISIS.LAB */
    CALL CLRBUF(.MEMORY);
    JJ = 0;
    DO II = 1 TO 9;
        MEMORY(JJ) = PN(II);
        JJ = JJ + 1;
    END;
    MEMORY(JJ) = CR;
    JJ = JJ + 1;
    MEMORY(JJ) = LF;
    JJ = JJ + 1;
    DO II = 0 to 76;
        MEMORY(JJ) = FMTTABLE(II) + '0';
        JJ = JJ + 1;
    END;
    CALL ABSIO(DCMD$WRITE, 1, 1AH, .MEMORY);

	IF SYSTEM OR COPYALL THEN DO;
		IF COPYALL THEN
			CALL WRITE(0, .('COPYING ALL FILES', CR, LF), 19, .STATUS);
        ELSE
			CALL WRITE(0, .('COPYING SYSTEM FILES', CR, LF), 22, .STATUS);

		MEMSIZE = (MEMCK - .MEMORY) AND 0FF80H;
        DO JJ = 1 TO 1 + 23 - 1;
            CALL ABSIO(DCMD$READ, 0, JJ, .MEMORY);
            CALL ABSIO(DCMD$WRITE, 1, JJ, .MEMORY);
        END;

        CALL OPEN(.AFTDIR, .('ISIS.DIR'), 1, 0, .STATUS);
        CALL CHECKERROR(STATUS);

        DIRECT(0) = 0;
        DO WHILE DIRECT(0) <> 7FH;
            CALL READ(AFTDIR, .DIRECT, 16, .ACTUAL, .STATUS);
            CALL CHECKERROR(STATUS);
            IF ACTUAL < 16 THEN
                DIRECT(0) = 7FH;
            ELSE IF NOT DIRECT(0) THEN DO;
                if (COPY := ((DIRECTATTR AND SYSTEM$A) <> 0 OR  COPYALL)
                       AND  (DIRECTATTR AND FORMAT$A) = 0) THEN DO;
                    DIRECT(0) = 0;
                    CALL UNPATH(.DIRECT, .SRCNAME);
                    DIRECT(0) = 1;
                    CALL UNPATH(.DIRECT, .DSTNAME);
                    CALL OPEN(.AFTOUT, .DSTNAME, 2, 0, .STATUS);
                    CALL CHECKERROR(STATUS);
                    CALL OPEN(.AFTIN, .SRCNAME, 1, 0, .STATUS);
                    CALL CHECKERROR(STATUS);
                    ACTUAL = 1;
                    DO WHILE ACTUAL <> 0;
                        CALL READ(AFTIN, .MEMORY, MEMSIZE, .ACTUAL, .STATUS);
                        CALL CHECKERROR(STATUS);
                        CALL WRITE(AFTOUT, .MEMORY, ACTUAL, .STATUS);
                        CALL CHECKERROR(STATUS);
                        IF ACTUAL < MEMSIZE THEN
                            ACTUAL = 0;
                    END;
                    CALL CLOSE(AFTOUT, .STATUS);
                    CALL CHECKERROR(STATUS);
                    CALL CLOSE(AFTIN, .STATUS);
                    CALL CHECKERROR(STATUS);

                    DO II = 0 TO 2;
                        IF (ATTRIBMAP(II) AND DIRECTATTR) <> 0 THEN DO;
                            CALL ATTRIB(.DSTNAME, II, 0FFH, .STATUS);
                            CALL CHECKERROR(STATUS);
                        END;
                    END;
                    NAMELEN = DELIMIT(.SRCNAME + 4) - .SRCNAME - 4;
                    CALL WRITE(0, .SRCNAME + 4, NAMELEN, .STATUS);
                    CALL WRITE(0, .CRLF, 2, .STATUS);
                END;
            END;
        END;        
        CALL CLOSE(AFTDIR, .STATUS);
        CALL CHECKERROR(STATUS);
        CALL ATTRIB(.ISIST0, 3, 0FFH, .STATUS);
        CALL CHECKERROR(STATUS);
        CALL ATTRIB(.ISISBIN, 2, 0FFH, .STATUS);
        CALL CHECKERROR(STATUS);
    END;
    ELSE DO;
        CALL WRITE(0, .('NON-SYSTEM DISKETTE', CR, LF), 21, .STATUS);
        CALL ABSIO(DCMD$WRITE, 1, 1, .CODEBLOCK);
        CALL ATTRIB(.ISIST0, 3, 0FFH, .STATUS);
        CALL CHECKERROR(STATUS);
        CALL DELETE(.ISISBIN, .STATUS);
        CALL CHECKERROR(STATUS);
    END;

    CALL ATTRIB(.ISISDIR, 3, 0FFH, .STATUS);
    CALL CHECKERROR(STATUS);
    CALL ATTRIB(.ISISLAB, 3, 0FFH, .STATUS);
    CALL CHECKERROR(STATUS);
    CALL ATTRIB(.ISISMAP, 3, 0FFH, .STATUS);
    CALL CHECKERROR(STATUS);
    CALL EXIT;
END;
EOF

