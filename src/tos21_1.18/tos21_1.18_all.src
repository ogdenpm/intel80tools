common.inc

device_t        struc ; (sizeof=0x4, mappedto_1)

name:           db 2 dup(?)            ; string(C)
handler:        dw ?                   ; offset (00000000)
device_t        ends


dev_t           struc ; (sizeof=0xA, mappedto_4)

firstChar:      db ?                   ; char
hSize:          db ?                   ; base 10
bSize:          dw ?                   ; base 10
inFunc:         dw ?                   ; offset (00000000)
field_6:        dw ?
field_8:        dw ?                   ; offset (00000000)
dev_t           ends


; enum sec_e, mappedto_2
ERSLIN	EQU	4
BEL	EQU	7
BSP	EQU	8

HT	EQU	9
SEC09	EQU	9
LF	EQU	0Ah

SEC0A	EQU	0Ah
SEC0B	EQU	0Bh
ROLL	EQU	0Ch
SEC0C	EQU	0Ch
CR	EQU	0Dh

SEC0F	EQU	0Fh
SEC11	EQU	11h
SEC14	EQU	14h
SEC15	EQU	15h
SEC16	EQU	16h

SEC17	EQU	17h
SEC18	EQU	18h
SEC19	EQU	19h
EM	EQU	19h

SEC1A	EQU	1Ah
SEC1B	EQU	1Bh
SEC1C	EQU	1Ch
GS	EQU	1Dh

SEC1D	EQU	1Dh
SEC1F	EQU	1Fh
SEC20	EQU	20h
SEC21	EQU	21h
SEC22	EQU	22h
SEC23	EQU	23h
SEC24	EQU	24h
SEC25	EQU	25h
SEC26	EQU	26h

SEC27	EQU	27h

SEC28	EQU	28h
SEC29	EQU	29h

SEC2A	EQU	2Ah
SEC2B	EQU	2Bh
SEC2C	EQU	2Ch
SEC2D	EQU	2Dh

SEC2E	EQU	2Eh
SEC2F	EQU	2Fh

SEC30	EQU	30h
SEC31	EQU	31h

SEC32	EQU	32h
SEC33	EQU	33h
SEC34	EQU	34h
SEC3C	EQU	3Ch
SEC3D	EQU	3Dh

SEC3E	EQU	3Eh
SEC48	EQU	48h

SEC57	EQU	57h
SEC5A	EQU	5Ah
RUBOUT	EQU	7Fh


; enum bit_t, mappedto_3, bitfield
INBIT	EQU	1

OUTBIT	EQU	2

LFBIT	EQU	4
LBBIT	EQU	10h

AUTO	EQU	20h

DONTCLOSE	EQU	40h

EOFBIT	EQU	80h

EBCBIT	EQU	80h


;
; +-------------------------------------------------------------------------+
;  +       This file was generated by The Interactive Disassembler (IDA)       + 
;  +            Copyright (c) 2023 Hex-Rays, <support@hex-rays.com>            + 
;  +                       License info: 48-B9BB-7C04-99                       + 
;  +                         Mark Ogden, personal use                          + 
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 52F1C5F51F05588E17B1BC78F77FA99B3983EAC066C7BF9374A7800318025BB5
; Input MD5    : FADB52287AF56F9CB721C806D46AEB79
; Input CRC32  : 5ACED020


; Processor       : 8085 []
; Target assembler: Table Driven Assembler (TASM) by Speech Technology Inc.

; ===========================================================================

; Segment type: Regular
        .org 40h
TTI:            ds 3

TTO:            ds 3

TTONC:          ds 3
CURSOR:         ds 3
XMON:           ds 3
XERR:           ds 3
PRNT:           ds 3
DTST:           ds 3
DCAL:           ds 3
DSRD:           ds 3
DSWR:           ds 3
DSDL:           ds 3
DSRDA:          ds 3
DSWRA:          ds 3
INDISP:         ds 3
DSWT:           ds 3
DCALW:          ds 3
DSRDW:          ds 3

DSWRW:          ds 3
DSDLW:          ds 3
DSRAW:          ds 3
DSWAW:          ds 3
RCVI:           ds 3

LOCDIR:         ds 3
LOADD:          ds 3
LINKD:          ds 3
CTST:           ds 3
CCAL:           ds 3
CBRD:           ds 3
CBWR:           ds 3
CBBS:           ds 3
CBTM:           ds 3
CBSF:           ds 3
CBSB:           ds 3
CUN:            ds 3
CRW:            ds 3
CWT:            ds 3
CBRDW:          ds 3
CBWRW:          ds 3
CBBSW:          ds 3
CBTMW:          ds 3
CBSFW:          ds 3
CBSBW:          ds 3
CLOCDIR:        ds 3
CLOAD:          ds 3
CLINK:          ds 3
XMIO:           ds 3
RD32:           ds 3
VERIFY:         ds 3
EXFUNC:         ds 6
PRNST:          ds 3
TTINW:          ds 3
RCVINW:         ds 3
XMIONW:         ds 3
        ds 21h
DCWRIT:         ds 3
DCREAD:         ds 3
; end of 'DISPATCH'

; ===========================================================================

; Segment type: Regular
        .org 2500h
        ds 0BEh
STACK:          ds 42h
BUF2:           ds 80h

BUF1:           ds 80h

byte_2700:      ds 9
byte_2709:      ds 7

CTLBLK:         ds 0Bh

CISAVE:         ds 2
COSAVE:         ds 2
ROLLSW:         ds 1

PSTART:         ds 2
PRGNAM:         ds 0Ah

byte_272C:      ds 1
DEBSW:          ds 1
BUFLIM:         ds 2

UINT:           ds 1

TRK:            ds 2
NAME:           ds 6

MAP1:           ds 2

MAP2:           ds 2

        ds 1
UNAM:           ds 3Eh
EBCD:           ds 2
ASCI:           ds 32h
TIMAD:          ds 2
byte_27B2:      ds 0Bh
TIMER:          ds 43h
; end of 'RAM'

; ===========================================================================

; Segment type: Regular
        .org 0D500h
start:          dw 0

startSentinal:  db 80h

ERRXX:          db 0

saveStk:        dw 0

byte_D506:      db 4
        db 49h
        dw 0
        dw 80h
        dw CIBUF
        dw byte_D510
byte_D510:      db 3
        db  41h ; A
word_D512:      dw 0

        dw COFILE
main.asm
b2700   EQU     2700H
b272C   EQU     272CH
TIMAD   EQU     27B0H
b27B2   EQU     27B2H
BUFLIM  EQU     272EH
ROLLSW  EQU     271FH
EBCD    EQU     277CH
ASCI    EQU     277EH
DEBSW   EQU     272DH
_STACK   EQU    25BEH   ; STACK is reserved
BUF1    EQU     2680H

CURSOR  EQU     49H
TTO     EQU     43H
INDISP  EQU     6AH
DSRDW   EQU     73H

CR      EQU     0DH
LF      EQU     0AH
HOME    EQU     1DH

AUTO    EQU     20H
EOFBIT  EQU     80H
DONTCLOSE EQU   40H

CLOSE   EQU     0FD27H
PUT     EQU     0FD12H
OUTCHAR EQU     0FD0CH
PUTSTR  EQU     0FD15H
PUTBIN  EQU     0FD1BH
EDBH    EQU     0FD2AH

CI      EQU     0FF00H
CO      EQU     0FF02H
SI      EQU     0FF04H
SO      EQU     0FF06H
SL      EQU     0FF08H
AI      EQU     0FF0AH
AO      EQU     0FF0CH
AL      EQU     0FF0EH


        PUBLIC START,MON,ERROR
        EXTRN   EBCDIC,ASCII,COMINT,CIFILE,SCNOFF,COFILE
        EXTRN   CIBUF
        extrn   WFDFC
        public  _entry,sub_D67A

        CSEG

; this code will be located at 0D500H
START:  dw      0       ; head of allocated buffers 
        db      80H     ; marks end
ERRXX:  db      0
saveStk: dw     0
bD506:  db      4,73    ; 49h
        dw      0,128,CIBUF,bD510
bD510:  db      3,65    ; 41h
wD512:  dw      0,COFILE


; =============== S U B R O U T I N E =======================================
        ; public _entry
_entry:
        call    sub_D67A
        jmp     oldMON
MON:
        lhld    CI
        mov     a, m
        cpi     4
        jnz     MON5
        inx     h
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        dad     b
        mov     a, m
        cpi     CR
        jz      MON5
        cpi     LF
        jz      MON5
        dcx     h
        mov     a, m
        cpi     CR
        jz      MON5
        cpi     LF
        jz      MON5
        call    SCNOFF
        cc      ERROR
        jmp     MON5
oldMON:
        sub     a
        sta     DEBSW
        lxi     h, 0
        dad     sp
        shld    saveStk
        lxi     d, 0DA42h
        dad     d
        jnc     loc_D56B
        lxi     h, _STACK
        shld    saveStk
        sphl
loc_D56B:
        lxi     h, b2700
        mvi     a, 9
loc_D570:
        mvi     m, 0
        inx     h
        dcr     a
        jnz     loc_D570
        lhld    CI
        inx     h
        mov     a, m
        ani     8
        jnz     MON4
        lxi     h, 0
        shld    START
        mvi     a, 80h
        sta     START+2
        lxi     h, START
        shld    BUFLIM
        lhld    CO
        lxi     d, MIDENT       ; "TOS21 VER. 1.81\r"
        call    PUT
        cc      ERR1
        lhld    CO
        mvi     a, '*'
        call    OUTCHAR
        cc      ERR1
MON4:
        call    COMINT
        jnc     MON1
        ana     a
        jnz     MON2
        lhld    CI
        inx     h
        mov     a, m
        ani     EOFBIT
        jz      MON3
        mov     a, m
        ani     8
        jz      loc_D5CD
loc_D5C3:
        mov     a, m
        ani     7Fh
        mov     m, a
        lhld    wD512
        shld    CI
loc_D5CD:
        lxi     h, CI
        call    CLOUT
        lxi     h, CIFILE
        shld    CI
        call    sub_D6DF
        jmp     MON1
MON2:
        mov     c, a
        lhld    CI
        inx     h
        mov     a, m
        ani     8
        mov     a, c
        jz      loc_D60A
        call    ERROR
        lda     b272C
        cpi     43h ; 'C'
        jz      MON5
        lxi     d, asc_D788     ; "BATCH JOB EXECUTION ABORTED\r"
        lhld    CO
        call    PUT
        cc      ERR1
        lhld    CI
        inx     h
        jmp     loc_D5C3
MON3:
        sub     a
loc_D60A:
        call    ERROR
        jmp     MON5
MON1:
        lda     DEBSW
        ana     a
        jnz     MON4
        lda     b27B2
        ana     a
        jz      MON5
        lhld    CI
        shld    wD512
        lxi     h, bD506
        shld    CI
        call    sub_D6DF
        xra     a
        sta     b27B2
        jmp     MON4
MON5:
        lxi     h, SI
        call    CLOUT
        lxi     h, SO
        call    CLOUT
        lxi     h, SL
        call    CLOUT
        lxi     h, AI
        call    CLOUT
        lxi     h, AO
        call    CLOUT
        lxi     h, AL
        call    CLOUT
        jmp     oldMON
; End of function _entry
; =============== S U B R O U T I N E =======================================
CLOUT:
        mov     e, m
        inx     h
        mov     d, m
        mov     a, d
        ora     e
        rz
        inx     d
        ldax    d
        ani     60h
        cpi     60h ; '`'
        rz
        mvi     m, 0
        dcx     h
        mvi     m, 0
        xchg
        mov     a, m
        ani     20h
        rz
        dcx     h
        call    CLOSE
        cc      ERROR
        ret
; End of function CLOUT
; =============== S U B R O U T I N E =======================================
sub_D67A:
        lxi     h, 0
        shld    TIMAD
        shld    START
        mvi     a, 80h
        sta     START+2
        lxi     h, START
        shld    BUFLIM
        lxi     h, 184Fh
        call    CURSOR
        mvi     a, 'A'
        call    TTO
        call    CURSOR
        mvi     a, ' '
        call    INDISP
        cpi     'A'
        jz      STAR1
        sub     a
STAR1:
        sta     ROLLSW
        mvi     a, 19h
        call    TTO
        lxi     h, EBCDIC
        shld    EBCD
        lxi     h, ASCII
        shld    ASCI
        xra     a
        sta     b27B2
        lxi     h, START
        dcr     h
        mvi     l, 0
loc_D6C5:
        lxi     d, 0D800h
        xchg
        dad     d
        xchg
        jnc     loc_D6DA
        di
        dcr     h
        mov     a, m
        cma
        mov     m, a
        cmp     m
        cma
        mov     m, a
        ei
        jz      loc_D6C5
loc_D6DA:
        inr     h
        shld    wFDFC
        ret
; End of function sub_D67A
; =============== S U B R O U T I N E =======================================
sub_D6DF:
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        mvi     a, LF
        stax    d
        inx     d
        stax    d
        ret
; End of function sub_D6DF
; =============== S U B R O U T I N E =======================================
ERROR:
        sta     ERRXX
        cpi     92
        jp      ERR12
        rrc
        rrc
        inr     a
        ani     3Fh
        mov     c, a
        sub     a
        mov     b, a
        lxi     h, BUF1
        call    DSRDW
        jc      ERR12
        lda     BUF1
        cpi     85h
        jnz     ERR12
        lda     ERRXX
        ani     3
        rlc
        rlc
        rlc
        rlc
        rlc
        ani     0E0h
        mov     c, a
        mvi     b, 0
        lxi     h, BUF1
        dad     b
        inx     h
        xchg
        lda     ERRXX
        lxi     h, MDATA
        call    EDBH
        lhld    CO
        push    d
        lxi     d, MTEXT        ; "ERROR "
        call    PUTSTR
        pop     d
        jc      ERR1
        mvi     a, ' '
        call    OUTCHAR
        jc      ERR1
        mvi     b, 31
        call    PUTBIN
        jc      ERR1
        lxi     d, MDATA + 2
        call    PUT
        jc      ERR1
        ret
ERR12:
        lda     ERRXX
        lxi     h, MDATA
        call    EDBH
        lhld    CO
        lxi     d, MTEXT        ; "ERROR "
        call    PUT
        jc      ERR1
        ret
ERR1:
        lxi     h, MTEXT        ; "ERROR "
loc_D772:
        mov     a, m
        inx     h
        call    TTO
        cpi     CR
        jnz     loc_D772
        mvi     a, LF
        call    TTO
        lxi     h, COFILE
        shld    CO
        ret
; End of function ERROR
asc_D788: db 'BATCH JOB EXECUTION ABORTED', CR
MTEXT:  db 'ERROR '
MDATA:  dw 0
        db CR
MIDENT: db 'TOS21 VER. 1.81', CR
        end _entry

time.asm
        PUBLIC STIMER

TIMAD   EQU 27B0H
TIMER   EQU 27BDH

        CSEG
STIMER:
        di
        shld    TIMAD
        xchg
        shld    TIMER
        xchg
        ei
        ret
        end
edit.asm
SEC15   EQU     15H

        PUBLIC EDBH,EDWH,EDHB,EDHW,LDIG,UPCHAR,UPCASE

        CSEG

; =============== S U B R O U T I N E =======================================
EDNH:
        ani     0Fh
        adi     90h
        daa
        aci     40h ; '@'
        daa
        mov     m, a
        inx     h
        ret
; End of function EDNH
; =============== S U B R O U T I N E =======================================
EDBH:
        push    psw
        rrc
        rrc
        rrc
        rrc
        call    EDNH
        pop     psw
        push    psw
        call    EDNH
        pop     psw
        ana     a
        ret
; End of function EDBH
EDWH:
        push    psw
        mov     a, d
        call    EDBH
        mov     a, e
        call    EDBH
        pop     psw
        ana     a
        ret
; =============== S U B R O U T I N E =======================================
NIBBLE:
        mov     a, m
        inx     h
        cpi     '0'
        jm      NIB1
        cpi     'G'
        jp      NIB1
        cpi     ':'
        jm      NIB2
        cpi     'A'
        jm      NIB1
        sui     37h ; '7'
        ret
NIB2:
        sui     '0'
        ret
NIB1:
        mvi     a, SEC15
        stc
        ret
; End of function NIBBLE
; =============== S U B R O U T I N E =======================================
EDHB:
        call    NIBBLE
        rc
        rlc
        rlc
        rlc
        rlc
        ani     0F0h
        push    b
        mov     b, a
        call    NIBBLE
        jc      EDHB1
        ora     b
EDHB1:
        pop     b
        ret
; End of function EDHB
; =============== S U B R O U T I N E =======================================
EDHW:
        push    psw
        call    EDHB
        jc      EDHW1
        mov     d, a
        call    EDHB
        jc      EDHW1
        mov     e, a
        pop     psw
        ana     a
        ret
EDHW1:
        inx     sp
        inx     sp
        ret
; End of function EDHW
; =============== S U B R O U T I N E =======================================
LDIG:
        cpi     '0'
        jm      LDIG1
        cpi     ':'
        jm      LDIG2
        cpi     'A'
        jm      LDIG1
        cpi     'Z'+1
        jm      LDIG2
        cpi     'a'
        jm      LDIG1
        cpi     'z'+1
        jp      LDIG1
LDIG2:
        ana     a
        ret
LDIG1:
        stc
        ret
; End of function LDIG
; =============== S U B R O U T I N E =======================================
UPCASE:
        push    psw
        push    b
        push    h
        mvi     c, 0
UPC2:
        mov     a, m
        cpi     'a'
        jm      UPC1
        cpi     'z'+1
        jp      UPC1
        ani     0DFh
        mov     m, a
        inr     c
UPC1:
        inx     h
        dcr     b
        jnz     UPC2
        pop     h
        mov     a, c
        pop     b
        ana     a
        jz      UPC3
        pop     psw
        ana     a
        ret
UPC3:
        pop     psw
        stc
        ret
; End of function UPCASE
; =============== S U B R O U T I N E =======================================
UPCHAR:
        cpi     'a'
        rm
        cpi     'z'+1
        rp
        ani     0DFh
        ret
; End of function UPCHAR
        end
io.asm
SEC19   EQU     19H
SEC1A   EQU     1AH

        PUBLIC CHKDEV

        CSEG

; =============== S U B R O U T I N E =======================================
CHKDEV:
        push    psw
        mov     a, h
        ora     l
        jz      CHKD1
        mov     a, m
        cpi     7
        jnc     CHKD2
        cpi     2
        jc      CHKD2
        pop     psw
        ana     a
        ret
CHKD1:
        mvi     a, SEC19
        jmp     CHKD3
CHKD2:
        mvi     a, SEC1A
CHKD3:
        inx     sp
        inx     sp
        stc
        ret
; End of function CHKDEV
        end
get.asm
SEC16   EQU     16H
SEC17   EQU     17H

CR      EQU     0DH
LF      EQU     0AH

LFBIT   EQU     4
INBIT   EQU     1
EOFBIT  EQU     80H

OUTCHAR EQU     0FD0CH
READ    EQU     0FD21H

        PUBLIC  INCHAR,GET,GETBIN
        EXTRN   CHKDEV

        CSEG
; =============== S U B R O U T I N E =======================================
INCHAR:
        call    CHKDEV
        rc
        inx     h
        mov     a, m
        dcx     h
        ani     INBIT + EOFBIT
        jnz     INCH1
        mvi     a, SEC16
        stc
        ret
INCH1:
        ani     EOFBIT
        jz      INCHB
        mvi     a, SEC17
        stc
        ret
INCHB:
        mov     a, m
        push    d
        push    h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        cpi     2
        jnz     INCH6
        xchg
        lxi     d, INCHC
        push    d
        pchl
INCHN:
        ana     a
INCHC:
        pop     h
        pop     d
        ret
INCHE:
        pop     d
        jmp     INCHC
INCH6:
        cpi     3
        jnz     INCHH
        push    h
        xchg
        call    INCHAR
        pop     h
        jc      INCHC
        push    psw
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        call    OUTCHAR
        jc      INCHE
        pop     psw
        jmp     INCHC
INCHH:
        cpi     6
        jnz     INCHL
        xchg
        inx     h
        mov     a, m
        dcx     h
        ani     80h
        jnz     INCHM
        call    INCHAR
        jnc     INCHC
        ana     a
        jnz     INCHK
INCHM:
        pop     h
        push    h
        lxi     d, 4
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        call    INCHAR
        jnc     INCHC
        pop     h
        push    h
        jmp     INCHI
INCHL:
        inx     d
        mov     m, d
        dcx     h
        mov     m, e
        inx     h
        inx     h
        cpi     4
        jnz     INCH8
        inx     h
        inx     h
        push    b
        mov     c, m
        inx     h
        mov     b, m
        xchg
        dad     b
        pop     b
        dcx     h
        mov     a, m
        cpi     LF
        jnz     INCHN
INCHF:
        pop     h
        call    READ
        push    h
        jc      INCHI
INCHG:
        mov     a, m
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        jmp     INCHH
INCH8:
        dcx     h
        mov     a, m
        cpi     0FFh
        jz      INCHF
        inx     h
oldINCH8:
        mov     a, m
        inx     h
        inr     a
        cmp     e
        jnz     INCHJ
        mov     a, m
        cmp     d
        jnz     INCHJ
oldINCF:
        pop     h
        push    h
        push    d
        lxi     d, 1Bh
        dad     d
        pop     d
        mov     a, m
        ani     40h
        jz      INCHF
        pop     h
        push    h
        inx     h
        mov     a, m
        inx     h
        inx     h
        mvi     m, 0FFh
        ani     4
        mvi     a, 5Ch ; '\'
        stc
        jnz     INCHC
        mvi     a, CR
        jmp     INCHN
INCHJ:
        inx     h
        push    b
        mov     c, m
        inx     h
        mov     b, m
        xchg
        dad     b
        pop     b
        dcx     h
        mov     a, m
        ana     a
        jz      loc_D99E
        cpi     LF
        jnz     INCHN
loc_D99E:
        pop     h
        push    h
        push    psw
        inx     h
        mov     a, m
        dcx     h
        ani     4
        jz      oldINCHG
        pop     psw
        jmp     INCHN
oldINCHG:
        pop     psw
        jmp     INCHG
INCHI:
        ana     a
        jnz     INCHK
        inx     h
        mov     a, m
        ori     EOFBIT
        mov     m, a
        sub     a
INCHK:
        pop     h
        pop     d
        stc
        ret
; End of function INCHAR
; =============== S U B R O U T I N E =======================================
GET:
        call    INCHAR
        rc
        stax    d
        inx     d
        cpi     CR
        jnz     GET
        ana     a
        ret
; End of function GET
; =============== S U B R O U T I N E =======================================
GETBIN:
        inx     h
        mov     a, m
        push    psw
        ori     4
        mov     m, a
        dcx     h
GETB2:
        call    INCHAR
        jc      GETB1
        stax    d
        inx     d
        dcr     b
        jnz     GETB2
        inx     h
        pop     psw
        push    b
        mov     b, a
        mov     a, m
        ani     0FBh
        ora     b
        pop     b
        mov     m, a
        dcx     h
        ana     a
        ret
GETB1:
        inx     sp
        inx     sp
        ret
; End of function GETBIN
        end
put.asm
SEC18   EQU 18H

LF      EQU     0AH
CR      EQU     0DH

OUTBIT  EQU     2

WRITE   EQU     0FD24H

        EXTRN   CHKDEV
        PUBLIC  OUTCHAR,PUTSTR,PUTBIN,PUT

        CSEG

; =============== S U B R O U T I N E =======================================
OUTCHAR:
        call    CHKDEV
        rc
        push    psw
        inx     h
        mov     a, m
        dcx     h
        ani     OUTBIT
        jnz     OUTC1
        mov     a, m
        cpi     3
        jz      OUTC1
        inx     sp
        inx     sp
        mvi     a, SEC18
        stc
        ret
OUTC1:
        pop     psw
        push    h
        push    d
        push    b
        push    psw
        mov     a, m
        cpi     5
        jz      OUTC8
        inx     h
        inx     h
        cpi     6
        jz      OUTCB
        cpi     2
        jz      OUTC2
        cpi     3
        jz      OUTC4
        mvi     a, 0FFh
        stc
        jmp     OUTCA
loc_DA2A:
        nop
        pop     h
        pop     psw
OUTC6:
        ana     a
OUTCA:
        pop     b
        pop     d
        pop     h
        ret
OUTC2:
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        pop     psw
        lxi     h, OUTCA
        push    h
        push    d
        ret
OUTC4:
        inx     h
        inx     h
        jmp     OUTC7
OUTC8:
        push    h
        lxi     b, 1Bh
        dad     b
        mov     a, m
        ani     40h
        jz      OUTC8_1
        pop     h
        pop     psw
        push    psw
        push    h
        ana     a
        jz      loc_DA2A
        cpi     LF
        jz      loc_DA2A
        cpi     CR
        jnz     OUTC8_1
        pop     h
        push    h
        inx     h
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        dcx     h
        dcx     h
        mov     m, d
        dcx     h
        mov     m, e
        pop     h
        call    WRITE
        jnc     loc_DA7A
        inx     sp
        inx     sp
        jmp     OUTCA
loc_DA7A:
        pop     psw
        jmp     OUTC6
OUTC8_1:
        pop     h
        push    h
        inx     h
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        mov     a, c
        cmp     e
        jnz     OUTC9
        mov     a, b
        cmp     d
        jnz     OUTC9
        pop     h
        call    WRITE
        jnc     OUTC8
        inx     sp
        inx     sp
        jmp     OUTCA
OUTC9:
        mov     e, m
        inx     h
        mov     d, m
        xchg
        dad     b
        pop     d
        pop     psw
        mov     m, a
        xchg
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     d
        mov     m, d
        dcx     h
        mov     m, e
        jmp     OUTC6
OUTCB:
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        pop     psw
        push    psw
        push    h
        xchg
        call    OUTCHAR
        pop     h
        jc      OUTCC
OUTC7:
        mov     e, m
        inx     h
        mov     d, m
        xchg
        pop     psw
        call    OUTCHAR
        jmp     OUTCA
OUTCC:
        inx     sp
        inx     sp
        jmp     OUTCA
; End of function OUTCHAR
; =============== S U B R O U T I N E =======================================
PUTSTR:
        ldax    d
        cpi     CR
        rz
        call    OUTCHAR
        rc
        inx     d
        jmp     PUTSTR
; End of function PUTSTR
; =============== S U B R O U T I N E =======================================
PUTBIN:
        ldax    d
        call    OUTCHAR
        rc
        inx     d
        dcr     b
        jnz     PUTBIN
        ana     a
        ret
; End of function PUTBIN
; =============== S U B R O U T I N E =======================================
PUT:
        call    PUTSTR
        rc
        mvi     a, CR
        call    OUTCHAR
        rc
        mvi     a, LF
        call    OUTCHAR
        ret
; End of function PUT
        end
open.asm
SEC26   EQU     26H
SEC27   EQU     27H
SEC28   EQU     28H

AUTO    EQU     20H
DONTCLOSE EQU   40H
EOFBIT  EQU     80H
LBBIT   EQU     10H
INBIT   EQU     1
OUTBIT  EQU     2
LFBIT   EQU     4

        EXTRN   CHKDEV
        PUBLIC  OPEN,OTYP

        CSEG



OTYP:           db 0
; =============== S U B R O U T I N E =======================================
OPEN:
        sta     OTYP
        cpi     1
        jz      loc_DB13
        cpi     2
        jz      loc_DB13
        cpi     4
        jz      loc_DB13
        mvi     a, SEC26
        stc
        ret
loc_DB13:
        push    psw
        call    CHKDEV
        jc      OPENB
        inx     h
        mov     a, m
        ani     AUTO
        jnz     OPENC
        mov     a, m
        dcx     h
        ani     DONTCLOSE
        jnz     OPENB
        inx     h
        mov     a, m
        dcx     h
        ani     INBIT + OUTBIT + LBBIT + EOFBIT
        jz      OPEN1
        pop     psw
        mvi     a, SEC27
        stc
        ret
OPENB:
        inx     sp
        inx     sp
        ret
OPEN1:
        inx     h
        pop     psw
        ora     m
        mov     m, a
        jmp     OPENI
OPENC:
        inx     sp
        inx     sp
OPENI:
        dcx     h
        mov     a, m
        cpi     2
        rz
        push    d
        push    h
        jmp     OPEN2
OPEN4:
        pop     h
OPEN8:
        pop     d
        ana     a
        ret
OPEN2:
        cpi     3
        jnz     OPEN5
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        push    h
        xchg
        mvi     a, INBIT
        call    OPEN
        jnc     OPEN3
        cpi     SEC27
        jz      OPEN3
OPENF:
        pop     h
        pop     h
        pop     d
        stc
        ret
OPEN5:
        cpi     4
        jnz     OPEN9
        lxi     d, 8
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mov     a, m
        cpi     5
        jnz     OPENK
        lxi     d, 12
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        mov     a, e
        ora     d
        jz      OPEN7
        lxi     h, OPEN6
        xthl
        push    d
        ret
OPEN6:
        jnc     OPEN8
        pop     d
        ret
OPEN3:
        pop     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mvi     a, OUTBIT
loc_DB9F:
        call    OPEN
        jnc     OPEN4
        cpi     SEC27
        jz      OPEN4
        pop     h
        pop     d
        stc
        ret
OPEN7:
        mvi     a, SEC28
        pop     h
        pop     d
        stc
        ret
OPEN9:
        cpi     6
        jnz     OPEND
        inx     h
        mov     a, m
        ani     INBIT + OUTBIT
        push    psw
        mov     a, m
        ani     4
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        inx     h
        ora     m
        mov     m, a
        dcx     h
        xchg
        pop     psw
        push    h
        push    psw
        xchg
        call    OPEN
        jnc     loc_DBDF
        cpi     SEC27
        jz      loc_DBDF
        inx     sp
        inx     sp
        jmp     OPENF
loc_DBDF:
        pop     psw
        pop     h
        push    psw
        dcx     h
        dcx     h
        mov     a, m
        inx     h
        inx     h
        ani     4
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        inx     h
        ora     m
        mov     m, a
        dcx     h
        xchg
        pop     psw
        xchg
        jmp     loc_DB9F
OPEND:
        push    h
        inx     h
        mov     a, m
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        pop     h
        push    h
        lxi     d, 12
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        lxi     h, OPENH
        xthl
        push    d
        ret
OPENH:
        jc      OPENK
        lda     OTYP
        ani     1
        jz      OPENK
        push    h
        lxi     d, 8
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        lxi     h, OPENJ
        xthl
        push    d
        ret
OPENJ:
        jnc     OPEN4
OPENK:
        pop     h
        pop     d
        ret
; End of function OPEN
        end
clos.asm
SEC29   EQU     29H
SEC2A   EQU     2AH

DONTCLOSE EQU   40H
AUTO    EQU     20H

BUFDEALLOC EQU  0FD39H

        EXTRN   CHKDEV
        PUBLIC  CLOSE

        CSEG

; =============== S U B R O U T I N E =======================================
CLOSE:
        call    CHKDEV
        rc
        inx     h
        mov     a, m
        dcx     h
        cpi     0
        jnz     CLOS1
        mvi     a, SEC29
        stc
        ret
CLOS1:
        ani     DONTCLOSE
        rnz
        inx     h
        mov     a, m
        ani     AUTO
        mov     m, a
        dcx     h
        mov     a, m
        cpi     2
        rz
        push    d
        push    h
        cpi     3
        jnz     CLOS3
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        push    h
        xchg
        call    CLOSE
        jnc     CLOS4
        cpi     SEC29
        jz      CLOS4
        pop     h
        pop     h
        pop     d
        stc
        ret
CLOS4:
        pop     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        call    CLOSE
        jnc     CLOSC
        cpi     SEC29
        jz      CLOSC
        pop     h
        pop     d
        stc
        ret
CLOS3:
        cpi     4
        jnz     CLOS5
        lxi     d, 8
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        call    CLOSE
        jc      CLOS2
CLOSC:
        ana     a
CLOS2:
        pop     h
        pop     d
        ret
CLOS5:
        cpi     5
        jnz     CLOS7
        lxi     d, 14
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        mov     a, e
        ora     d
        jz      CLOS6
        lxi     h, CLOSA
        xthl
        push    d
        ret
CLOSA:
                                ; DATA XREF: ...
        jc      CLOSB
        ana     a
CLOSB:
        pop     d
        ret
CLOS7:
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        push    h
        xchg
        call    CLOSE
        pop     h
        jc      CLOS9
        push    psw
        mov     e, m
        inx     h
        mov     d, m
        xchg
        call    CLOSE
        jc      CLOS8
        pop     psw
        pop     h
        inx     h
        mov     a, m
        dcx     h
        ani     AUTO
        jz      CLOSA
        call    BUFDEALLOC
        jmp     CLOSA
CLOS8:
        inx     sp
        inx     sp
        jmp     CLOS9
CLOS6:
        mvi     a, SEC2A
CLOS9:
        pop     h
        pop     d
        stc
        ret
; End of function CLOSE
        end
read.asm
SEC24   EQU     24H
SEC25   EQU     25H
SEC26   EQU     26H


HT      EQU     9
RUBOUT  EQU     7FH
BSP     EQU     8
CR      EQU     0DH
LF      EQU     0AH
ERSLIN  EQU     4

INCHAR  EQU     0FD09H
OUTCHAR EQU     0FD0CH

        EXTRN   CHKDEV,WRRD
        PUBLIC  READ

        CSEG


; =============== S U B R O U T I N E =======================================
READ:
        call    CHKDEV
        rc
        mov     a, m
        cpi     4
        jm      RDER1
        jz      READ1
        push    d
        lxi     d, 8
        jmp     WRRD
READ1:
        push    b
        push    d
RD10:
        push    h
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        mov     a, m
        inx     h
        mov     h, m
        mov     l, a
READ6:
        call    INCHAR
        jc      RDER2
        cpi     CR
        jz      READ2
        cpi     BSP
        jz      READ3
        cpi     RUBOUT
        jz      READ5
        cpi     HT
        jz      RD15
        stax    d
        inx     d
        dcx     b
        mov     a, b
        ora     c
        jnz     READ6
READ7:
        mvi     a, SEC25
        pop     h
        push    h
        lxi     d, 6
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mvi     m, LF
        inx     h
        mvi     m, LF
RDER2:
        pop     h
        pop     d
        pop     b
        stc
        ret
RDER1:
        mvi     a, SEC24
        stc
        ret
READ2:
        stax    d
        inx     d
        dcx     b
        mov     a, b
        ora     c
        jz      READ7
        mvi     a, LF
        stax    d
        mov     a, m
        cpi     3
        jz      RD12
        ana     a
RD11:
        pop     h
        pop     d
        pop     b
        ret
RD12:
        inx     h
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mvi     a, LF
        call    OUTCHAR
        jmp     RD11
READ5:
        mov     a, m
        cpi     3
        jz      READ9
        pop     h
        jmp     RD10
READ9:
        mvi     a, ERSLIN
        call    OUTCHAR
        jc      RD11
        pop     h
        jmp     RD10
RD15:
        mvi     a, ' '
RD16:
        stax    d
        inx     d
        dcx     b
        mov     a, b
        ora     c
        jz      READ7
        mov     a, c
        ani     7
        jz      READ6
        mvi     a, ' '
        call    OUTCHAR
        jc      RD11
        jmp     RD16
READ3:
        dcx     d
        ldax    d
        cpi     0FFh
        jnz     READA
        inx     d
        jmp     READ6
READA:
        inx     b
        mov     a, m
        cpi     3
        jnz     READ6
        mvi     a, ' '
        call    OUTCHAR
        jc      RD11
        mvi     a, BSP
        call    OUTCHAR
        jc      RD11
        jmp     READ6
        end
writ.asm
SEC22   EQU     22H
SEC23   EQU     23H

EOFBIT  EQU     80H

        EXTRN   CHKDEV
        PUBLIC  WRITE,WRRD
        CSEG

WRITE:
        call    CHKDEV
        rc
        mov     a, m
        cpi     5
        jnz     WRER1
        push    d
        lxi     d, 10
WRRD:
        push    h
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        mov     a, d
        ora     e
        jz      WRER2
        lxi     h, WRIT1
        xthl
        push    d
        ret
WRIT1:
        jc      WRER3
        push    h
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        pop     h
        pop     d
        ana     a
        ret
WRER1:
        mvi     a, SEC22
        stc
        ret
WRER2:
        pop     h
        pop     d
        mvi     a, SEC23
        stc
        ret
WRER3:
        pop     d
        ana     a
        jnz     WRER4
        inx     h
        mov     a, m
        ori     EOFBIT
        mov     m, a
        dcx     h
        sub     a
WRER4:
        stc
        ret
; End of function READ
        end
intel.asm
MAP1    EQU     2739H
MAP2    EQU     273BH
BUF1    EQU     2680H
BUF2    EQU     2600H
UNIT    EQU     2730H
CTLBLK  EQU     2710H
b2709   EQU     2709H
b272C   EQU     272CH   ; PRGNAM + 10
TRK     EQU     2731H
UNAM    EQU     273EH

SEC0F   EQU     0FH
SEC14   EQU     14H
SEC16   EQU     16H
SEC2F   EQU     2FH
SEC31   EQU     31H
SEC32   EQU     32H
SEC33   EQU     33H

AUTO    EQU     20H
SFLAG   EQU     4
OUTBIT  EQU     2
LFBIT   EQU     4       ; ? use SFLAG instead
LBBIT   EQU     10H
DONTCLOSE EQU   40H
EOFBIT  EQU     80H


LOCDIR  EQU     85H
DSRDW   EQU     73H
DSWRW   EQU     76H

BUFDEALLOC EQU  0FD39H
WRITE   EQU     0FD24H
TABIN   EQU     0FDEAH


        PUBLIC  RELBLK,RELN,GETBLK,OIID,RDID
        PUBLIC  CIID,OOID,WRID,COID,OITX,PART3
        PUBLIC  GETN
        EXTRN   CHKDEV,OTYP
        CSEG

; =============== S U B R O U T I N E =======================================
MAPRD:
        mvi     a, 1
        sta     b2709
        call    readMap
        jc      loc_DE3D
        ret
readMap:
        lhld    MAP1
        mov     b, h
        mov     c, l
        lxi     h, BUF2
        lda     UNIT
        call    DSRDW
        rc
        lhld    MAP2
        mov     b, h
        mov     c, l
        lxi     h, BUF1
        lda     UNIT
        call    DSRDW
        ret
; End of function MAPRD
; =============== S U B R O U T I N E =======================================
MAPWR:
        call    writeMap
loc_DE3D:
        push    psw
        xra     a
        sta     b2709
        pop     psw
        ret
; End of function MAPWR
; =============== S U B R O U T I N E =======================================
writeMap:
        lhld    MAP1
        mov     b, h
        mov     c, l
        lxi     h, BUF2
        lda     UNIT
        call    DSWRW
        rc
        lhld    MAP2
        mov     b, h
        mov     c, l
        lxi     h, BUF1
        lda     UNIT
        call    DSWRW
        ret
; End of function writeMap
; =============== S U B R O U T I N E =======================================
MAPBIT:
        mvi     h, 0
        mov     l, b
        dad     h
        push    h
        dad     h
        dad     h
        push    h
        dad     h
        pop     d
        dad     d
        pop     d
        dad     d
        lxi     d, 0
        mov     e, c
        dad     d
        dcx     h
        mov     a, l
        ani     7
        mov     c, a
        mov     a, h
        rlc
        rlc
        rlc
        rlc
        rlc
        ani     0E0h
        mov     b, a
        mov     a, l
        rrc
        rrc
        rrc
        ani     1Fh
        ora     b
        mov     l, a
        mov     a, h
        rrc
        rrc
        rrc
        ani     1Fh
        mov     h, a
        lxi     d, BUF2
        dad     d
        inr     c
        mvi     a, 80h
MB1:
        dcr     c
        rz
        rrc
        ani     7Fh
        jmp     MB1
; End of function MAPBIT
; =============== S U B R O U T I N E =======================================
RELBLK:
        push    psw
        push    h
        push    d
        push    b
        call    MAPRD
        jc      RELB1
        pop     b
        push    b
        call    MAPBIT
        ana     m
        xra     m
        mov     m, a
        call    MAPWR
        jc      RELB1
RELB2:
        pop     b
        pop     d
        pop     h
        pop     psw
        ana     a
        ret
RELB1:
        pop     b
        pop     d
        pop     h
        inx     sp
        inx     sp
        ret
; End of function RELBLK
RCNT:           db 0
RFLHN:          dw 0
; =============== S U B R O U T I N E =======================================
RELN:
        push    psw
        push    h
        push    d
        push    b
        shld    RFLHN
        sta     RCNT
        call    MAPRD
        jc      RELB1
RELN3:
        lhld    RFLHN
        mov     c, m
        mvi     m, 0
        inx     h
        mov     b, m
        mvi     m, 0
        inx     h
        shld    RFLHN
        mov     a, b
        ora     c
        jz      RELN2
        call    MAPBIT
        ana     m
        xra     m
        mov     m, a
        lxi     h, RCNT
        dcr     m
        jnz     RELN3
RELN2:
        call    MAPWR
        jnc     RELB2
        jmp     RELB1
; End of function RELN
MAPSCAN:        dw 0
MAPBYTE:        db 0
MAPMASK:        db 0
MAPTS:          dw 0
; =============== S U B R O U T I N E =======================================
MAPLOC:
        lxi     h, BUF2
        lxi     d, 1
ML1:
        mov     a, m
        cpi     0FFh
        jnz     ML2
        inx     h
        mov     a, e
        adi     8
        mov     e, a
        cpi     27
        jm      ML1
        sui     26
        mov     e, a
        inr     d
        mov     a, d
        cpi     77
        jm      ML1
ML7:
        mvi     a, SEC2F
        stc
        ret
ML2:
        shld    MAPSCAN
        sta     MAPBYTE
        mvi     b, 80h
ML5:
        ana     b
        jz      ML3
ML8:
        inr     e
        mov     a, e
        cpi     27
        jnz     ML6
        mvi     e, 1
        inr     d
        mov     a, d
        cpi     77
        jp      ML7
ML6:
        mov     a, b
        rrc
        ani     7Fh
        jz      ML4
        mov     b, a
        lda     MAPBYTE
        jmp     ML5
ML3:
        xchg
        shld    MAPTS
        xchg
        lhld    MAPSCAN
        mov     a, b
        sta     MAPMASK
        ana     a
        ret
ML4:
        lhld    MAPSCAN
        inx     h
        jmp     ML1
; End of function MAPLOC
; =============== S U B R O U T I N E =======================================
MAPNEXT:
        lhld    MAPTS
        xchg
        lhld    MAPSCAN
        lda     MAPMASK
        mov     b, a
        jmp     ML8
; End of function MAPNEXT
; =============== S U B R O U T I N E =======================================
GETBLK:
        push    psw
        push    h
        push    d
        push    b
        call    MAPRD
        jc      RELB1
        call    MAPLOC
        jc      RELB1
        ora     m
        mov     m, a
        push    d
        call    MAPWR
        pop     b
        jc      RELB1
        pop     d
        pop     d
        pop     h
        pop     psw
        ana     a
        ret
; End of function GETBLK
; =============== S U B R O U T I N E =======================================
GETN:
        push    psw
        push    h
        push    d
        push    b
        shld    RFLHN
        sta     RCNT
        call    MAPRD
        jc      RELB1
        call    MAPLOC
        jc      RELB1
GETN2:
        ora     m
        mov     m, a
        lhld    RFLHN
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        shld    RFLHN
        lda     RCNT
        dcr     a
        sta     RCNT
        jz      GETN5
        call    MAPNEXT
        jnc     GETN2
        cpi     SEC2F
        jz      GETN3
        stc
        jmp     RELB1
GETN3:
        lda     RCNT
        lhld    RFLHN
GETN4:
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        dcr     a
        jnz     GETN4
GETN5:
        call    MAPWR
        jc      RELB1
        jmp     RELB2
; End of function GETN
; =============== S U B R O U T I N E =======================================
OITX:
        call    CHKDEV
        rc
        shld    CTLBLK
        push    psw
        push    d
        lxi     d, 17
        dad     d
        push    h
        lxi     d, 13
        dad     d
        shld    PART3
        pop     h
        mov     a, m
        sta     UNIT
        pop     d
        pop     psw
        ana     a
        ret
; End of function OITX
; =============== S U B R O U T I N E =======================================
OIIX:
        call    OITX
        rc
        push    psw
        mov     a, m
        inx     h
        call    LOCUSER
        jc      OIIX1
        pop     psw
        ana     a
        ret
XIT_1:
        pop     d
        pop     b
        pop     psw
        lhld    CTLBLK
        ana     a
        ret
XITY_0:
        jnc     XIT_1
XITE_1:
        stc
        pop     d
        pop     b
OIIX1:
        inx     sp
        inx     sp
        lhld    CTLBLK
        ret
; End of function OIIX
; =============== S U B R O U T I N E =======================================
OIID:
        call    OIIX
        rc
        push    psw
        push    b
        push    d
        mov     a, m
        ana     a
        jz      OIID1
        mvi     a, SEC31
        stc
        jmp     XITE_1
OIID1:
        lxi     d, 10
        dad     d
        mov     a, m
        ani     DONTCLOSE
        jz      loc_E04F
        mvi     a, SEC16
        stc
        jmp     XITE_1
loc_E04F:
        lda     OTYP
        cpi     4
        jnz     oldOIID1
        mov     a, m
        ani     OUTBIT + LFBIT + EOFBIT
        jz      oldOIID1
        lda     b272C
        cpi     53h ; 'S'
        jz      oldOIID1
        mvi     a, SEC14
        stc
        jmp     XITE_1
oldOIID1:
        inx     h
        mov     a, m
        inx     h
        inx     h
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        mov     h, b
        mov     l, c
        shld    word_E1E2
        lhld    PART3
        mov     m, a
        inx     h
        mvi     m, 4
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        lda     UNIT
        call    DSRDW
        jc      XITE_1
        lhld    CTLBLK
        lxi     d, 5
        dad     d
        mov     d, m
        dcx     h
        mov     e, m
        dcx     h
        inx     d
        mov     m, d
        dcx     h
        mov     m, e
        lda     OTYP
        cpi     4
        jz      loc_E1E4
        jmp     XIT_1
PART3:          dw 0
RDIR:           dw 0
RDTMP:
        dw 0
RDID:
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    CTLBLK
        inx     h
        mov     a, m
        ani     LBBIT
        jz      RDID1
DRID2:
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     EOFBIT
        mov     m, a
        sub     a
        stc
        jmp     XITE_1
RDID1:
        lhld    PART3
        inx     h
        mov     c, m
        mvi     b, 0
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        shld    RDIR
        dad     b
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        shld    RDTMP
        mov     a, d
        ora     e
        jnz     loc_E0F9
        lhld    RDIR
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        mov     a, e
        ora     d
        jz      DRID2
        mov     b, d
        mov     c, e
        jmp     loc_E113
loc_E0F9:
        lhld    PART3
        inx     h
        mov     a, m
        inr     a
        inr     a
        mov     m, a
        ani     80h
        jz      RDID3
        lhld    RDIR
        inx     h
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        mov     a, b
        ora     c
        jz      RDID4
loc_E113:
        lda     UNIT
        lhld    RDIR
        call    DSRDW
        jc      XITE_1
        lhld    PART3
        inx     h
        mvi     m, 4
        jmp     RDID6
RDID4:
        lhld    PART3
        mov     a, m
        lhld    CTLBLK
        lxi     b, 4
        dad     b
        mov     m, a
        inx     h
        mvi     m, 0
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     10h
        mov     m, a
        jmp     RDID6
RDID3:
        lhld    RDTMP
        mov     a, m
        inx     h
        ora     m
        jz      RDID4
RDID6:
        lhld    CTLBLK
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        inx     h
        inx     h
        mov     b, d
        mov     c, e
        mov     e, m
        inx     h
        mov     d, m
        xchg
        lda     UNIT
        call    DSRDW
        jmp     XITY_0
CIID:
        call    CHKDEV
        rc
CIID2:
        push    psw
        inx     h
        mov     a, m
        ani     AUTO
        mov     m, a
        dcx     h
        jnz     CIID1
        pop     psw
        ana     a
        ret
CIID1:
        pop     psw
        call    BUFDEALLOC
        ret
OOID:
        call    OIIX
        rc
        push    psw
        push    b
        push    d
        mov     a, m
        ana     a
        jnz     OOID1
OOID2:
        mvi     a, SEC32
        stc
        jmp     XITE_1
OOID1:
        lhld    PART3
        dcx     h
        mvi     m, 0
        dcx     h
        mvi     m, 0
        inx     h
        inx     h
        inx     h
        mvi     m, 4
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        shld    RDIR
        mvi     a, 128
OOID4:
        mvi     m, 0
        inx     h
        dcr     a
        jnz     OOID4
        lhld    RDIR
        call    GETBLK
        jc      XITE_1
        lhld    CTLBLK
        lxi     d, 28
        dad     d
        mov     m, c
        inx     h
        mov     m, b
        lhld    RDIR
        sub     a
        mov     m, a
        inx     h
        mov     m, a
        inx     h
        mov     m, a
        inx     h
        mov     m, a
        inx     h
        mvi     a, 62
        call    GETN
        jc      XITE_1
oldOOID3:
        lhld    CTLBLK
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        jmp     XIT_1
word_E1E2:      dw 0
loc_E1E4:
        lhld    CTLBLK
        lxi     d, 20h ; ' '
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        shld    RDIR
loc_E1F2:
        inx     h
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        mov     a, c
        ora     b
        jz      loc_E210
        mov     h, b
        mov     l, c
        shld    word_E1E2
        lhld    RDIR
        lda     UNIT
        call    DSRDW
        jc      XITE_1
        jmp     loc_E1F2
loc_E210:
        inx     h
        mvi     d, 62
loc_E213:
        inx     h
        inx     h
        dcr     d
        jz      loc_E21E
        mov     a, m
        ana     a
        jnz     loc_E213
loc_E21E:
        push    h
        push    d
        dcx     h
        mov     b, m
        dcx     h
        mov     c, m
        lhld    CTLBLK
        lxi     d, 6
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        lda     UNIT
        call    DSRDW
        jnc     loc_E23D
        pop     d
        pop     h
        jmp     XITE_1
loc_E23D:
        lhld    CTLBLK
        inx     h
        mov     a, m
        ani     0FEh
        ori     2
        mov     m, a
        pop     d
        pop     h
        mov     a, d
        ana     a
        cnz     GETN
        jc      XITE_1
        add     d
        mov     d, a
        mvi     a, 126
        sub     d
        lhld    CTLBLK
        lxi     d, 31
        dad     d
        mov     m, a
        dcx     h
        mov     a, m
        dcx     h
        xchg
        lhld    word_E1E2
        xchg
        mov     m, d
        dcx     h
        mov     m, e
        lhld    CTLBLK
        inx     h
        inx     h
        mov     m, a
        inx     h
        mvi     m, 0
        lhld    TABIN
        lxi     d, 9
        dad     d
        push    h
        lhld    CTLBLK
        lxi     d, 14
        dad     d
        lxi     d, loc_E35F
        mov     m, e
        inx     h
        mov     m, d
        lhld    CTLBLK
        lxi     d, 10
        dad     d
        pop     d
        mov     m, e
        inx     h
        mov     m, d
        ana     a
        jmp     XIT_1
; End of function OIID
; =============== S U B R O U T I N E =======================================
WRID:
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    PART3
        inx     h
        mov     a, m
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        shld    RDIR
        mov     b, a
        ani     80h
        mov     a, b
        jz      WRID1
        lda     UNIT
        call    LOCISIS
        jc      XITE_1
        call    GETBLK
        jc      XITE_1
        lhld    RDIR
        inx     h
        inx     h
        mov     m, c
        inx     h
        mov     m, b
        mov     e, c
        mov     d, b
        lhld    PART3
        dcx     h
        mov     b, m
        dcx     h
        mov     c, m
        lda     UNIT
        lhld    RDIR
        call    DSWRW
        jc      XITE_1
        lhld    RDIR
        mov     m, c
        inx     h
        mov     m, b
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        mvi     a, 62
        call    GETN
        jc      XITE_1
        lhld    PART3
        inx     h
        mvi     m, 4
        dcx     h
        dcx     h
        mov     m, d
        dcx     h
        mov     m, e
        mvi     a, 4
WRID1:
        lhld    RDIR
        mov     e, a
        mvi     d, 0
        dad     d
        mov     c, m
        inx     h
        mov     b, m
        lhld    CTLBLK
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mov     a, b
        ora     c
        jz      WRID2
        lda     UNIT
        call    DSWRW
        jc      XITE_1
        lhld    PART3
        inx     h
        inr     m
        inr     m
        jmp     XIT_1
WRID2:
        mvi     a, SEC33
        jmp     XITE_1
; End of function WRID
DICENT: dw 0
TRKENT: dw 0
RELSTART: dw 0
BLKCOUNT: dw 0
FIRDIR: dw 0
bE340:  db 0
; =============== S U B R O U T I N E =======================================
COID:
        mvi     a, 1
        sta     b2709
        call    _COID
        jmp     loc_DE3D
; End of function COID
; =============== S U B R O U T I N E =======================================
_COID:
        call    OIIX
        rc
        push    psw
        push    b
        push    d
        xra     a
        sta     bE340
        mov     a, m
        ana     a
        jz      OOID2
        jmp     loc_E381
loc_E35F:
        mvi     a, 1
        sta     b2709
        call    loc_E36A
        jmp     loc_DE3D
loc_E36A:
        call    OIIX
        rc
        push    psw
        push    b
        push    d
        mvi     a, 0FFh
        sta     bE340
        mov     a, m
        ana     a
        jz      loc_E381
        mvi     a, 5Eh ; '^'
        stc
        jmp     XITE_1
loc_E381:
        shld    DICENT
        lhld    PART3
        dcx     h
        mov     a, m
        dcx     h
        ora     m
        jz      XIT_1
        lhld    TRK
        dcx     h
        mov     d, m
        dcx     h
        mov     e, m
        xchg
        shld    TRKENT
        lhld    PART3
        inx     h
        mov     a, m
        cpi     5
        jnc     loc_E3BF
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mov     a, m
        inx     h
        ora     m
        jnz     loc_E3BF
        lhld    CTLBLK
        inx     h
        inx     h
        mov     a, m
        inx     h
        ora     m
        jnz     loc_E3BF
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
loc_E3BF:
        lhld    CTLBLK
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        mov     a, d
        ora     e
        jz      COID1
        mov     m, e
        inx     h
        mov     m, d
        lhld    CTLBLK
        call    WRITE
        jc      XITE_1
COID1:
        lhld    PART3
        inx     h
        mov     e, m
        mov     a, e
        ana     a
        jm      loc_E40C
        mvi     d, 0
        inx     h
        mov     a, m
        inx     h
        mov     h, m
        mov     l, a
        shld    RDIR
        dad     d
        shld    RELSTART
COID3:
        mov     a, m
        inx     h
        inx     h
        ana     a
        jz      COID2
        inr     d
        mov     a, e
        adi     2
        mov     e, a
        ani     80h
        jz      COID3
COID2:
        mov     a, d
        lhld    RELSTART
        call    RELN
        jc      XITE_1
loc_E40C:
        lhld    CTLBLK
        lxi     d, 28
        dad     d
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        inx     h
        mov     a, m
        sui     4
        rrc
        ani     7Fh
        inr     a
        sta     BLKCOUNT
        sub     a
        sta     BLKCOUNT+1
        lhld    RDIR
        lda     UNIT
        call    DSWRW
        jc      XITE_1
COID5:
        mov     e, m
        inx     h
        mov     d, m
        mov     a, e
        ora     d
        jz      COID4
        mov     b, d
        mov     c, e
        lda     UNIT
        lhld    RDIR
        call    DSRDW
        jc      XITE_1
        lhld    BLKCOUNT
        lxi     d, 62
        dad     d
        shld    BLKCOUNT
        lhld    RDIR
        jmp     COID5
COID4:
        mov     h, b
        mov     l, c
        shld    FIRDIR
        lhld    TRKENT
        mov     b, h
        mov     c, l
        lxi     h, BUF2
        lda     UNIT
        call    DSRDW
        jc      XITE_1
        lhld    DICENT
        xchg
        sub     a
        stax    d
        inx     d
        lxi     b, 18
        lhld    CTLBLK
        dad     b
        mvi     b, 9
COID6:
        mov     a, m
        stax    d
        inx     h
        inx     d
        dcr     b
        jnz     COID6
        lhld    CTLBLK
        lxi     b, 27
        dad     b
        mov     a, m
        ani     4
        jz      COID7
        mvi     a, 7
        jmp     COID8
COID7:
        sub     a
COID8:
        mov     c, a
        lda     bE340
        ana     a
        mov     a, c
        jz      loc_E4A4
        ldax    d
        ora     c
loc_E4A4:
        stax    d
        inx     d
        lhld    CTLBLK
        lxi     b, 4
        dad     b
        mov     a, m
        stax    d
        inx     d
        lhld    BLKCOUNT
        dcx     h
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        xchg
        lhld    FIRDIR
        xchg
        mov     m, e
        inx     h
        mov     m, d
        lhld    TRKENT
        mov     b, h
        mov     c, l
        lxi     h, BUF2
        lda     UNIT
        call    DSWRW
        jc      XITE_1
        lhld    CTLBLK
        call    CIID2
        jmp     XITY_0
; End of function _COID
; =============== S U B R O U T I N E =======================================
LOCUSER:
        shld    UNAM
        call    LOCISIS
        rc
        lhld    UNAM
        lda     UNIT
        call    LOCDIR
        ret
; End of function LOCUSER
; =============== S U B R O U T I N E =======================================
LOCISIS:
        lxi     h, NAM1         ; "ISIS\x00\x00MAP"
        call    LOCDIR
        rc
        mov     a, m
        ana     a
        jz      LOCI1
        mvi     a, SEC0F
        stc
        ret
LOCI1:
        lxi     d, 14
        dad     d
        push    b
        mov     c, m
        inx     h
        mov     b, m
        lxi     h, BUF2
        lda     UNIT
        call    DSRDW
        pop     b
        rc
        lhld    BUF2+4
        shld    MAP1
        lhld    BUF2+6
        shld    MAP2
        ana     a
        ret
; End of function LOCISIS
NAM1:   db 'ISIS',0, 0, 'MAP'

        end
ibm.asm
SEC0A   EQU     0AH
SEC0C   EQU     0CH
SEC20   EQU     20H

DSRDW   EQU     73H
DSRAW   EQU     7CH
DSWRW   EQU     76H
DSWAW   EQU     7FH
DCALW   EQU     70H

_NAME   EQU     2733H   ; NAME is reserved in ASM80
CTLBLK  EQU     2710H
UNIT    EQU     2730H
BUF1    EQU     2680H

EBCBIT  EQU     80H
INBIT   EQU     1
LBBIT   EQU     4
EOFBIT  EQU     80H

READ    EQU     0FD21H
WRITE   EQU     0FD24H
TABIB   EQU     0FDE8H

        PUBLIC  OIIB,RDIB,CIIB,OOIB,WRIB,COIB
        EXTRN   OITX,PART3,CIID,OTYP


        CSEG


word_E526: dw 0
word_E528: dw 0
HDRSECT:   db 0
ERRTRK:    dw 0
; =============== S U B R O U T I N E =======================================
ED2:
        push    b
        mvi     b, 0
ED221:
        cpi     10
        jm      ED22
        sui     10
        inr     b
        jmp     ED221
ED22:
        mov     c, a
        mov     a, b
        adi     '0'
        stax    d
        inx     d
        mov     a, c
        adi     '0'
        stax    d
        inx     d
        pop     b
        ret
; End of function ED2
; =============== S U B R O U T I N E =======================================
DEC2:
        push    b
        call    DEC20
        jc      DEC22
        add     a
        mov     b, a
        add     a
        add     a
        add     b
        mov     b, a
        call    DEC20
        add     b
        ana     a
DEC22:
        pop     b
        ret
; End of function DEC2
; =============== S U B R O U T I N E =======================================
DEC20:
        ldax    d
        inx     d
        cpi     ' '
        jnz     DEC21
        mvi     a, '0'
DEC21:
        cpi     '0'
        jm      DEC2E
        cpi     ':'
        jp      DEC2E
        sui     '0'
        ret
DEC2E:
        mvi     a, SEC0C
        stc
        ret
; End of function DEC20
; =============== S U B R O U T I N E =======================================
DEC3:
        push    b
        call    DEC2
        jc      DEC22
        push    h
        mov     l, a
        mvi     h, 0
        dad     h
        push    h
        pop     b
        dad     h
        dad     h
        dad     b
        call    DEC20
        jc      DEC23
        mov     c, a
        mvi     b, 0
        dad     b
        xchg
        pop     h
        pop     b
        ana     a
        ret
DEC23:
        pop     h
        pop     b
        ret
; End of function DEC3
; =============== S U B R O U T I N E =======================================
RIBM:
        push    h
        lhld    CTLBLK
        push    d
        lxi     d, 27
        dad     d
        pop     d
        mov     a, m
        pop     h
        ani     EBCBIT
        lda     UNIT
        jnz     RIBM1
        call    DSRDW
        ret
RIBM1:
        call    DSRAW
        ret
; End of function RIBM
; =============== S U B R O U T I N E =======================================
WIBM:
        push    h
        lhld    CTLBLK
        push    d
        lxi     d, 27
        dad     d
        pop     d
        mov     a, m
        pop     h
        ani     EBCBIT
        lda     UNIT
        jnz     WWIBM1
        call    DSWRW
        jmp     loc_E5D2
WWIBM1:
        call    DSWAW
loc_E5D2:
        push    psw
        push    h
        push    d
        lxi     d, 6
        lhld    CTLBLK
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        dcx     h
        dcx     h
        dcx     h
        mov     h, m
        xchg
        mvi     e, 80h
loc_E5E6:
        mvi     m, 0
        inx     h
        dcr     e
        jnz     loc_E5E6
        push    d
        lxi     d, 0FF80h
        dad     d
        pop     d
loc_E5F3:
        mvi     m, 20h ; ' '
        inx     h
        dcr     d
        jnz     loc_E5F3
        pop     d
        pop     h
        pop     psw
        ret
; End of function WIBM
; =============== S U B R O U T I N E =======================================
LOCIBM:
        shld    _NAME
        sta     UNIT
        call    DCALW
        rc
        lxi     h, 0
        shld    ERRTRK
        lxi     b, 8
LOCI4:
        lxi     h, BUF1
        call    RIBM
        jc      LOCI6
        lxi     d,  BUF1+5
        lhld    _NAME
        mvi     b, 8
LOCI3:
        ldax    d
        cmp     m
        jnz     LOCI2
        inx     d
        inx     h
        dcr     b
        jnz     LOCI3
        mov     a, c
        sta     HDRSECT
        ana     a
        ret
LOCI2:
        mvi     b, 0
LOCI5:
        inr     c
        mov     a, c
        cpi     27
        jnz     LOCI4
        mvi     a, SEC0A
        stc
        ret
LOCI6:
        cpi     SEC20
        jz      LOCI5
        stc
        ret
; End of function LOCIBM
; =============== S U B R O U T I N E =======================================
sub_E647:
        lhld    PART3
        dcx     h
        dcx     h
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        mov     a, m
        inx     h
        cmp     c
        rnz
        mov     a, m
        cmp     b
        rnz
        push    h
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     10h
        mov     m, a
        pop     h
        ret
; End of function sub_E647
; =============== S U B R O U T I N E =======================================
XITY:
        jc      XITE_0
XIT_0:
        pop     d
        pop     b
        pop     psw
        ana     a
        lhld    CTLBLK
        ret
XITE_0:
        stc
        pop     d
        pop     b
        inx     sp
        inx     sp
        lhld    CTLBLK
        ret
; End of function XITY
; =============== S U B R O U T I N E =======================================
OIIB:
        call    OITX
        rc
        push    psw
        push    b
        push    d
        mov     a, m
        inx     h
        call    LOCIBM
        jc      XITE_0
        lxi     d,  BUF1+18h
        call    DEC3
        jc      XITE_0
        lhld    CTLBLK
        lxi     b, 4
        dad     b
        mov     m, e
        inx     h
        mov     m, d
        xchg
        shld    word_E528
        lhld    PART3
        dcx     h
        lxi     d,  BUF1+1Ch
        call    DEC2
        jc      XITE_0
        mov     m, a
        dcx     h
        inx     d
        call    DEC2
        jc      XITE_0
        mov     m, a
        lhld    PART3
        inx     h
        lxi     d,  BUF1+22h
        call    DEC2
        jc      XITE_0
        mov     m, a
        dcx     h
        inx     d
        call    DEC2
        jc      XITE_0
        mov     m, a
        mov     e, m
        inx     h
        mov     d, m
        dcx     h
        xchg
        shld    word_E526
        lhld    CTLBLK
        inx     h
        mov     a, m
        xchg
        ani     1
        jz      loc_E6F1
        inx     h
        lxi     d,  BUF1+4Ah
        call    DEC2
        jc      XITE_0
        mov     m, a
        dcx     h
        inx     d
        call    DEC2
        jc      XITE_0
        mov     m, a
loc_E6F1:
        dcr     m
        jnz     loc_E6FA
        mvi     m, 1Ah
        inx     h
        dcr     m
        dcx     h
loc_E6FA:
        inx     h
        inx     h
        xchg
        lhld    ERRTRK
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        lda     HDRSECT
        mov     m, a
        lhld    CTLBLK
        lxi     d, 6
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        dcx     h
        dcx     h
        dcx     h
        mov     b, m
        mvi     c, 80h
        xra     a
loc_E71A:
        stax    d
        inx     d
        dcr     c
        jnz     loc_E71A
        push    h
        lxi     h, 0FF80h
        dad     d
        xchg
        pop     h
        mvi     a, 20h ; ' '
loc_E729:
        stax    d
        inx     d
        dcr     b
        jnz     loc_E729
        lhld    PART3
        inx     h
        mov     a, m
        dcx     h
        dcx     h
        cmp     m
        jc      loc_E745
        jnz     loc_E759
        inx     h
        mov     a, m
        dcx     h
        dcx     h
        cmp     m
        jnc     loc_E759
loc_E745:
        lda     OTYP
        cpi     4
        jz      loc_E779
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     80h
        mov     m, a
        sub     a
        jmp     XITE_0
loc_E759:
        lda     OTYP
        cpi     4
        jz      loc_E779
        jmp     XIT_0
OOIB:
        call    OIIB
        rc
        push    h
        push    d
        push    psw
        lhld    word_E526
        xchg
        lhld    PART3
        mov     m, e
        inx     h
        mov     m, d
        pop     psw
        pop     d
        pop     h
        ret
loc_E779:
        lhld    CTLBLK
        lxi     d, 1Ch
        dad     d
        push    h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        pop     h
        mov     m, e
        inx     h
        mov     m, d
        lhld    CTLBLK
        call    READ
        jc      XITE_0
        lhld    CTLBLK
        lxi     d, 1Ch
        dad     d
        dcr     m
        jnz     loc_E7A2
        mvi     m, 1Ah
        inx     h
        dcr     m
loc_E7A2:
        lhld    CTLBLK
        inx     h
        mov     a, m
        ani     0FEh
        ani     0EFh
        ori     2
        mov     m, a
        inx     h
        inx     h
        inx     h
        mov     c, m
        inx     h
        mov     b, m
        xchg
        lhld    word_E528
        xchg
        mov     m, d
        dcx     h
        mov     m, e
        dcx     h
        mov     m, b
        dcx     h
        mov     m, c
        lhld    TABIB
        lxi     d, 3
        dad     d
        dad     d
        dad     d
        push    h
        dad     d
        dad     d
        push    h
        lhld    CTLBLK
        lxi     d, 0Eh
        dad     d
        pop     d
        mov     m, e
        inx     h
        mov     m, d
        lhld    CTLBLK
        lxi     d, 0Ah
        dad     d
        pop     d
        mov     m, e
        inx     h
        mov     m, d
        lhld    word_E526
        xchg
        lhld    PART3
        mov     m, e
        inx     h
        mov     m, d
        jmp     XIT_0
; End of function OIIB
; =============== S U B R O U T I N E =======================================
sub_E7F0:
        call    sub_E647
        push    b
        dcx     h
        dcx     h
        inr     c
        mov     a, c
        cpi     1Bh
        jnz     loc_E800
        mvi     c, 1
        inr     b
loc_E800:
        mov     m, b
        dcx     h
        mov     m, c
        pop     b
        lhld    CTLBLK
        lxi     d, 6
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        ret
; End of function sub_E7F0
; =============== S U B R O U T I N E =======================================
RDIB:
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    CTLBLK
        inx     h
        mov     a, m
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        ani     10h
        jz      loc_E834
loc_E827:
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     80h
        mov     m, a
        sub     a
        stc
        jmp     XITE_0
loc_E834:
        call    sub_E7F0
        call    RIBM
        jnc     loc_E84C
        cpi     20h ; ' '
        jnz     XITE_0
        pop     d
        pop     b
        pop     psw
        ana     a
        lhld    CTLBLK
        jmp     RDIB
loc_E84C:
        push    psw
        push    b
        push    d
        push    h
        lhld    CTLBLK
        inx     h
        mov     a, m
        ani     10h
        jz      loc_E894
        lxi     d, 1Ah
        dad     d
        mov     a, m
        ani     40h
        jnz     loc_E894
        lhld    CTLBLK
        lxi     d, 4
        dad     d
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        dad     b
        dcx     h
loc_E875:
        mov     a, m
        cpi     0Ah
        jz      loc_E88A
        cpi     0Dh
        jz      loc_E88A
        dcx     h
        dcx     b
        mov     a, c
        ora     b
        jnz     loc_E875
        jmp     loc_E894
loc_E88A:
        lhld    CTLBLK
        lxi     d, 4
        dad     d
        mov     m, c
        inx     h
        mov     m, b
loc_E894:
        pop     h
        pop     d
        pop     b
        pop     psw
        jmp     XITY
; End of function RDIB
; =============== S U B R O U T I N E =======================================
WRIB:
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    CTLBLK
        inx     h
        mov     a, m
        inx     h
        mvi     m, 0
        ani     10h
        jnz     loc_E827
        call    sub_E7F0
        call    WIBM
        jmp     XITY
; End of function WRIB
; =============== S U B R O U T I N E =======================================
; Attributes: thunk
CIIB:
        jmp     CIID
; End of function CIIB
; =============== S U B R O U T I N E =======================================
COIB:
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    CTLBLK
        inx     h
        inx     h
        mov     a, m
        inx     h
        ora     m
        jz      loc_E8D6
        lhld    CTLBLK
        call    WRITE
        jc      XITE_0
loc_E8D6:
        lhld    CTLBLK
        lxi     d, 34
        dad     d
        mov     c, m
        mov     a, c
        sta     HDRSECT
        mvi     b, 0
        lxi     h, BUF1
        call    RIBM
        jc      XITE_0
        lhld    CTLBLK
        lxi     d, 28
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mov     a, h
        lxi     d, BUF1 + 74
        call    ED2
        mvi     a, '0'
        stax    d
        inx     d
        mov     a, l
        call    ED2
        lda     HDRSECT
        mov     c, a
        mvi     b, 0
        lxi     h, BUF1
        call    WIBM
        jc      XITE_0
        pop     d
        pop     b
        pop     psw
        lhld    CTLBLK
        jmp     CIID
; End of function COIB
        end
cart.asm

SEC31   EQU     31H
SEC48   EQU     48H
SEC3C   EQU     3CH
SEC57   EQU     57H
SEC3E   EQU     3EH
SEC3D   EQU     3DH
SEC5A   EQU     5AH

CLOCDIR EQU     0C1H
CCAL    EQU     91H
CBSFW   EQU     0BBH
RD32    EQU     0CDH
CBBSW   EQU     0B5H
VERIFY  EQU     0D0H
CBWRW   EQU     0B2H
CBTMW   EQU     0B8H
CBRDW   EQU     0AFH


CTLBLK  EQU     2710H
UNIT    EQU     2730H
_NAME    EQU     2733H   ; better as extrn, rename as NAME reserved in asm80
BUF1    EQU     2680H
BUF2    EQU     2600H

WRITE   EQU     0FD24H

LBBIT   EQU     10H
EOFBIT  EQU     80H

        PUBLIC  OITC,RDTC,CITC,OOTC,WRTC, COTC
        EXTRN   OITX,CIID,PART3,CHKDEV

        CSEG
word_E91F:  dw  0
byte_E921:  db  0,0,0,0,0,0,0,0
byte_E929:  db  0

; =============== S U B R O U T I N E =======================================
OITC:
        shld    word_E91F
        call    sub_EE0D
        call    OITX
        rc
        push    psw
        push    b
        push    d
        mov     a, m
        inx     h
        call    CLOCDIR
        jc      XITE
        mov     a, m
        ana     a
        jz      OITC2
        mvi     a, SEC31
        jmp     XITE
OITC2:
        lda     UNIT
        call    CCAL
        jc      XITE
        lxi     d, 10
        dad     d
        xchg
        lhld    PART3
        ldax    d
        mov     m, a
        mov     b, a
        inx     d
        ldax    d
        dcr     a
        jz      OITC3
        add     a
        mov     c, a
        lda     UNIT
        call    CBSFW
        jnc     OITC3
        cpi     SEC48
        jz      OITC3
        cpi     SEC3D
        jnz     XITE
OITC3:
        inx     d
        inx     d
        inx     d
        inx     h
        ldax    d
        mov     m, a
        inx     d
        inx     h
        ldax    d
        mov     m, a
        inx     h
        mvi     m, 0
        inx     h
        inx     d
        ldax    d
        mov     m, a
        inx     h
        inx     d
        ldax    d
        mov     m, a
        call    RD32
        jc      XITE
        mvi     a, '('
        call    VERIFY
        jc      XITE
        call    sub_EE02
        jmp     XIT
XITE:
        pop     d
        pop     b
        inx     sp
        inx     sp
        cpi     48h ; 'H'
        jz      loc_E9B2
        cpi     3Dh ; '='
        jz      loc_E9B2
        call    sub_EE0D
loc_E9B2:
        stc
        lhld    CTLBLK
        ret
XIT:
        pop     d
        pop     b
        pop     psw
        lhld    CTLBLK
        ana     a
        ret
; End of function OITC
; =============== S U B R O U T I N E =======================================
CITC:
        shld    word_E91F
        call    sub_EE0D
        call    CHKDEV
        rc
        push    psw
        push    d
        shld    CTLBLK
        lxi     d, 17
        dad     d
        mov     a, m
        call    CCAL
        jc      CITC1
        pop     d
        pop     psw
        lhld    CTLBLK
        jmp     CIID
CITC1:
        pop     d
        inx     sp
        inx     sp
        ret
; End of function CITC
OOFN:           ds 1
OOTRK:          ds 2
; =============== S U B R O U T I N E =======================================
OOTC:
        shld    word_E91F
        call    sub_EE0D
        call    OITX
        rc
        push    psw
        push    b
        push    d
        mov     a, m
        inx     h
        call    CLOCDIR
        jc      XITE
        lda     UNIT
        call    CCAL
        jc      XITE
        mov     a, m
        ana     a
        jnz     OOTC1
OOTC2:
        mvi     a, SEC3C
        jmp     XITE
OOTC1:
        cpi     7Fh
        jnz     OOTC2
        inx     h
        xchg
        lhld    CTLBLK
        lxi     b, 36
        dad     b
        shld    OOTRK
        mvi     b, 15
OOTC3:
        ldax    d
        mov     m, a
        inx     h
        inx     d
        dcr     b
        jnz     OOTC3
        lhld    OOTRK
        mvi     b, 1
        mvi     c, 0
        mvi     d, 7Fh
OOTC5:
        mov     a, m
        ana     a
        jz      OOTC4
        inx     h
OOTC8:
        inx     h
OOTC7:
        inx     h
        inx     h
        inx     h
        inr     b
        mov     a, b
        cpi     4
        jnz     OOTC5
        mov     a, c
        ana     a
        jnz     OOTC6
        mvi     a, SEC3D
        jmp     XITE
OOTC4:
        inx     h
        inx     h
        mov     a, m
        cmp     d
        jp      OOTC7
        inx     h
        mov     a, m
        sta     OOFN
        shld    OOTRK
        dcx     h
        mov     c, b
        mov     d, m
        dcx     h
        mov     e, m
        jmp     OOTC8
OOTC6:
        lhld    OOTRK
        lda     OOFN
        inr     a
        mov     m, a
        lxi     d, 35
        lhld    CTLBLK
        dad     d
        mov     m, a
        dcx     h
        mov     m, c
        shld    OOTRK
        lhld    PART3
        mov     m, c
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        mov     b, c
        dcr     a
        jz      OOTCA
        add     a
        mov     c, a
        lda     UNIT
        call    CBSFW
        jnc     OOTCA
        cpi     SEC48
        jnz     XITE
OOTCA:
        call    RD32
        jc      XITE
        lda     BUF2
        cpi     '/'
        jnz     OOTCE
        lda     UNIT
        lhld    OOTRK
        mov     b, m
        call    CBBSW
        jc      XITE
        lhld    CTLBLK
        lxi     d, 18
        dad     d
        lxi     d, OFHBN
        mvi     b, 9
OOTCD:
        mov     a, m
        stax    d
        inx     d
        inx     h
        dcr     b
        jnz     OOTCD
        lhld    OOTRK
        mov     b, m
        lxi     d, 32
        lxi     h, OFHB
        lda     UNIT
        call    CBWRW
        jc      XITE
OOTCF:
        lhld    CTLBLK
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        call    sub_EE02
        jmp     XIT
OOTCE:
        mvi     a, SEC5A
        jmp     XITE
; End of function OOTC
OFHB:           db '('
OFHBN:          ds 9
        db 0
        dw 128
        db 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
; =============== S U B R O U T I N E =======================================
COTC:
        shld    word_E91F
        call    OITX
        rc
        push    psw
        push    b
        push    d
        inx     h
        mvi     b, 9
        lxi     d, COFBN
COTC1:
        mov     a, m
        stax    d
        inx     d
        inx     h
        dcr     b
        jnz     COTC1
        lhld    CTLBLK
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        mov     a, d
        ora     e
        jz      COTC2
        mov     m, e
        inx     h
        mov     m, d
        lhld    CTLBLK
        call    WRITE
        jnc     COTC2
        cpi     SEC3D
        jnz     XITE
COTC2:
        call    sub_EE0D
        lda     UNIT
        lhld    PART3
        mov     b, m
        call    CBTMW
        jnc     COTC3
        cpi     SEC48
        jz      COTC3
        cpi     SEC3D
        jnz     XITE
COTC3:
        lxi     h, COFHB
        lxi     d, 32
        lda     UNIT
        call    CBWRW
        jnc     loc_EB76
        cpi     SEC3D
        jnz     XITE
loc_EB76:
        lda     UNIT
        call    CBTMW
        jnc     COTC4
        cpi     SEC48
        jz      COTC4
        cpi     SEC3D
        jnz     XITE
COTC4:
        lxi     h, COTEB
        lda     UNIT
        call    CBWRW
        jnc     loc_EB9A
        cpi     SEC3D
        jnz     XITE
loc_EB9A:
        lda     UNIT
        lhld    PART3
        mov     b, m
        call    CBTMW
        jnc     loc_EBB1
        cpi     SEC48
        jz      loc_EBB1
        cpi     SEC3D
        jnz     XITE
loc_EBB1:
        lda     UNIT
        call    CCAL
        jc      XITE
        lhld    CTLBLK
        lxi     d, 18
        dad     d
        lda     UNIT
        call    CLOCDIR
        jc      XITE
        mov     a, m
        cpi     7Fh
        jnz     OOTC2
        lda     UNIT
        mvi     b, 0
        call    CBBSW
        jc      XITE
        shld    COCUP
        xchg
        lhld    CTLBLK
        lxi     b, 36
        dad     b
        mvi     b, 15
        inx     d
COTC5:
        mov     a, m
        stax    d
        inx     h
        inx     d
        dcr     b
        jnz     COTC5
        lhld    CTLBLK
        lxi     d, 18
        dad     d
        lxi     d, CODBN
        mvi     b, 9
COTC6:
        mov     a, m
        stax    d
        inx     h
        inx     d
        dcr     b
        jnz     COTC6
        lhld    CTLBLK
        lxi     b, 34
        dad     b
        mov     a, m
        stax    d
        inx     d
        inx     h
        mov     a, m
        stax    d
        inx     d
        inx     d
        inx     d
        lhld    PART3
        inx     h
        mov     a, m
        stax    d
        inx     d
        inx     h
        mov     a, m
        stax    d
        inx     d
        lhld    CTLBLK
        lxi     b, 4
        dad     b
        mov     a, m
        stax    d
        inx     h
        inx     d
        mov     a, m
        stax    d
        inx     d
        sub     a
        stax    d
        lxi     h, CODIR
        lxi     d, 32
        mvi     b, 0
        lda     UNIT
        call    CBWRW
        jc      XITE
        lhld    COCUP
        lda     UNIT
        call    CBWRW
        jc      XITE
        lda     UNIT
        call    CBTMW
        jnc     COTC7
        cpi     SEC48
        jnz     XITE
COTC7:
        lda     UNIT
        call    CCAL
        jc      XITE
        pop     d
        pop     b
        pop     psw
        lhld    CTLBLK
        jmp     CIID
; End of function COTC
COFHB:          db ')'
COFBN:          ds 9
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0
COTEB:  db  2Fh
        db 0, 0, 0
        db 0, 0, 0, 0
        db 0, 0, 0, 0
        db 0, 0, 0, 0
        db 0, 0, 0, 0
        db 0, 0, 0, 0
        db 0, 0, 0, 0
        db 0, 0, 0, 0
COCUP:  ds 2
CODIR:  db    0
CODBN:  ds 9
        ds 1
        ds 1
        dw 128
        ds 2
        ds 2
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
        db 0, 0, 0, 0, 0
; =============== S U B R O U T I N E =======================================
WRTC:
        mvi     a, 1
        sta     byte_E929
        call    sub_EE1A
        rc
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    PART3
        mov     b, m
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     d
        mov     m, d
        dcx     h
        mov     m, e
        lhld    CTLBLK
        lxi     d, 37
        dad     d
        mov     a, b
WRTC2:
        dcr     a
        jz      WRTC1
        lxi     d, 5
        dad     d
        jmp     WRTC2
WRTC1:
        mov     e, m
        inx     h
        mov     d, m
        inx     d
        mov     m, d
        dcx     h
        mov     m, e
        lhld    CTLBLK
        inx     h
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 0
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        lxi     d, 128
        lda     UNIT
        call    CBWRW
        jnc     XIT
        cpi     40h ; '@'
        jnz     XITE
        mvi     b, 5
        lda     UNIT
loc_ED32:
        lda     UNIT
        call    CBBSW
        jc      XITE
        dcr     b
        jnz     loc_ED32
        mvi     a, 40h ; '@'
        jmp     XITE
; End of function WRTC
; =============== S U B R O U T I N E =======================================
RDTC:
        sub     a
        sta     byte_E929
        call    sub_EE1A
        rc
        call    OITX
        rc
        push    psw
        push    b
        push    d
        lhld    CTLBLK
        inx     h
        mov     a, m
        ani     LBBIT
        jnz     RDTC1
        dcx     h
        lxi     d, 28
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mvi     m, 0AAh
        inx     h
        mvi     m, 0AAh
        xchg
        inx     h
        mov     b, m
        lhld    CTLBLK
        lxi     d, 6
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        lda     UNIT
        call    CBRDW
        jnc     loc_ED87
        cpi     SEC3D
        jnz     XITE
loc_ED87:
        lhld    CTLBLK
        lxi     d, 28
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        ldax    d
        cpi     0AAh
        jnz     RDTC2
        inx     d
        ldax    d
        cpi     0AAh
        jnz     RDTC2
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        dcx     d
        mov     m, d
        dcx     h
        mov     m, e
        mov     a, d
        ora     e
        jnz     OOTCF
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     LBBIT
        mov     m, a
        dcx     h
        lxi     d, 34
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        lxi     b, 4
        lhld    CTLBLK
        dad     b
        mov     m, e
        inx     h
        mov     m, d
        jmp     OOTCF
RDTC2:
        mvi     a, SEC3E
        jmp     XITE
RDTC1:
        lhld    PART3
        mov     b, m
        lda     UNIT
        lhld    CTLBLK
        lxi     d, 6
        dad     d
        mov     e, m
        inx     h
        mov     d, m
        xchg
        call    CBRDW
        jnc     RDTC4
        cpi     SEC3D
        jz      RDTC4
        cpi     SEC48
        jnz     XITE
        lhld    CTLBLK
        inx     h
        mov     a, m
        ori     EOFBIT
        mov     m, a
        sub     a
        stc
        jmp     XITE
RDTC4:
        mvi     a, SEC57
        jmp     XITE
; End of function RDTC
; =============== S U B R O U T I N E =======================================
sub_EE02:
        push    h
        push    d
        call    sub_EEF7
        mov     m, e
        inx     h
        mov     m, d
        pop     d
        pop     h
        ret
; End of function sub_EE02
; =============== S U B R O U T I N E =======================================
sub_EE0D:
        push    h
        push    d
        call    sub_EEF7
        mvi     m, 0
        inx     h
        mvi     m, 0
        pop     d
        pop     h
        ret
; End of function sub_EE0D
; =============== S U B R O U T I N E =======================================
sub_EE1A:
        shld    word_E91F
        push    psw
        push    h
        push    d
        push    b
        call    sub_EEF7
        mov     a, e
        cmp     m
        jnz     loc_EE35
        inx     h
        mov     a, d
        cmp     m
        jnz     loc_EE35
loc_EE2F:
        pop     b
        pop     d
        pop     h
        pop     psw
        ana     a
        ret
loc_EE35:
        lhld    word_E91F
        lxi     d, 17
        dad     d
        lda     byte_E929
        ana     a
        jz      loc_EE96
        mov     a, m
        sta     UNIT
        call    CCAL
        jc      loc_EEF0
        lxi     d, 0Dh
        dad     d
        mov     b, m
        lxi     d, 5
        dad     d
        mov     a, m
        dcr     a
        jz      loc_EE6B
        add     a
        mov     c, a
        lda     UNIT
        call    CBSFW
        jnc     loc_EE6B
        cpi     48h ; 'H'
        jnz     loc_EEF0
loc_EE6B:
        call    sub_EF0C
        jc      loc_EEF0
        lhld    word_E91F
        lxi     d, 1Fh
        dad     d
        mov     e, m
        inx     h
        mov     d, m
loc_EE7B:
        lxi     h, BUF1
loc_EE7E:
        mov     a, d
        ora     e
        jz      loc_EE90
        lda     UNIT
        call    CBRDW
        dcx     d
        jnc     loc_EE7E
        jmp     loc_EEF0
loc_EE90:
        call    sub_EE02
        jmp     loc_EE2F
loc_EE96:
        mov     a, m
        inx     h
        call    CLOCDIR
        jc      loc_EEF0
        ana     a
        jnz     loc_EEEE
        lda     UNIT
        call    CCAL
        jc      loc_EEF0
        lxi     d, 0Ah
        dad     d
        mov     b, m
        inx     h
        mov     a, m
        dcr     a
        jz      loc_EECB
        add     a
        mov     c, a
        lda     UNIT
        call    CBSFW
        jnc     loc_EECB
        cpi     48h ; 'H'
        jz      loc_EECB
        cpi     3Dh ; '='
        jnz     loc_EEF0
loc_EECB:
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        lda     UNIT
        call    sub_EF0C
        jc      loc_EEF0
        push    d
        lhld    word_E91F
        lxi     d, 1Fh
        dad     d
        pop     d
        xra     a
        mov     a, e
        sbb     m
        mov     e, a
        inx     h
        mov     a, d
        sbb     m
        mov     d, a
        jmp     loc_EE7B
loc_EEEE:
        mvi     a, SEC31
loc_EEF0:
        pop     b
        pop     d
        pop     h
        inx     sp
        inx     sp
        stc
        ret
; End of function sub_EE1A
; =============== S U B R O U T I N E =======================================
sub_EEF7:
        lhld    word_E91F
        lxi     d, 17
        dad     d
        mov     e, m
        mvi     d, 0
        lxi     h, byte_E921
        dad     d
        dad     d
        xchg
        lhld    word_E91F
        xchg
        ret
; End of function sub_EEF7
; =============== S U B R O U T I N E =======================================
sub_EF0C:
        push    h
        push    d
        lhld    word_E91F
        lxi     d, 17
        dad     d
        mov     a, m
        inx     h
        shld    _NAME
        call    RD32
        jc      loc_EF25
        mvi     a, 28h ; '('
        call    VERIFY
loc_EF25:
        pop     d
        pop     h
        ret
; End of function sub_EF0C

        end
bufr.asm
SEC2B   EQU     2BH
SEC2C   EQU     2CH
SEC30   EQU     30H

BUFLIM  EQU     272EH

        EXTRN   START
        PUBLIC  BUFALLOC,BUFDEALLOC

        CSEG

;   Allocate a dynamic buffer
;   HL - desired length (on entry)
;        allocated address (on exit)
;
;   Carry set on return indicates that an error
;   occured. A contains the error code
;
;
;   The buffer allocation is done downards in memory.
;   prefixing each buffer is a header
;   dw  next        ; pointer to the flag of the next buffer in chain
;   db  flag        ; 0, used, 0xff free, 0x80 used and last in chain
;   BUFLIM is updated to byte before the last buffer (including its header)
;   START is the next/flag at the head of the buffer chain

; =============== S U B R O U T I N E =======================================
BUFALLOC:
        push    b
        push    d
        push    h
        lxi     h, START+2
BUFA3:
        mov     a, m
        cpi     80h
        jz      BUFA1
        ana     a
        jz      BUFA2
        cpi     0FFh
        jz      BUFA2
BUFA5:
        mvi     a, SEC2B
        stc
        lxi     h, START+2 ; reset all buffers
        mvi     m, 80h
        dcx     h
        mvi     m, 0
        dcx     h
        mvi     m, 0
BUFA4:
        pop     h               ; hl = start of new buffer
        pop     d
        pop     b
        ret
BUFA2:
        dcx     h
        mov     d, m            ; pickup the next block in the chain
        dcx     h
        mov     e, m
        xchg
        jmp     BUFA3
BUFA1:
        mvi     m, 0            ; mark as used and not end of chain
        dcx     h               ; hl = &start + 1
        pop     b               ; desired length
        push    h
        dcx     h
        dcx     h               ; hl = &start - 1
        mov     a, b
        cma
        mov     b, a
        mov     a, c
        cma
        mov     c, a
        inx     b               ; bc = -size
        dad     b               ; hl = &start - 1 - size
        pop     d               ; de = &start + 1
        push    h               ; start of new buffer
        dcx     h
        xchg
        mov     m, d            ; start = &start - 2 - size
        dcx     h
        mov     m, e
        xchg
        mvi     m, 80h          ; prefix new block with 0 0 0x80
        dcx     h
        mvi     m, 0
        dcx     h
        mvi     m, 0
        dcx     h
        shld    BUFLIM          ; new bottom of buffer
        ana     a
        jmp     BUFA4
; End of function BUFALLOC
; =============== S U B R O U T I N E =======================================
BUFDEALLOC:
        push    b
        push    d
        push    h
        dcx     h
        mov     a, m            ; pickup flags
        ana     a
        jz      BUFD1
        cpi     80h             ; end of chain?
        jz      BUFD3
        mvi     a, SEC30
        jmp     loc_EF93
        mvi     a, SEC2C
loc_EF93:
        stc
BUFD2:
        pop     h
        pop     d
        pop     b
        ret
BUFD1:
        mvi     m, 0FFh         ; mark as free
        ana     a
        jmp     BUFD2
BUFD3:
        lxi     h, START+2
        lxi     b, START+2
BUFD6:
        mov     a, m
        ana     a
        jnz     BUFD4
        mov     b, h            ; record as latest active buffer
        mov     c, l
BUFD7:
        dcx     h               ; keep looking
        mov     d, m
        dcx     h
        mov     e, m
        xchg
        jmp     BUFD6
BUFD4:
        cpi     0FFh            ; a free one so keep going
        jz      BUFD7
        cpi     80h             ; if not 0x80 then broken so reset
        jnz     BUFA5
        mov     h, b            ; mark the last active as the end buffer
        mov     l, c
        mvi     m, 80h
        dcx     h
        mvi     m, 0            ; remove the chain value
        dcx     h
        mvi     m, 0
        dcx     h
        shld    BUFLIM          ; update the new BUFLIM
        ana     a
        jmp     BUFD2
; End of function BUFDEALLOC

        end
jtab.asm
        EXTRN   OITC,OOTC,RDTC,WRTC,CITC,COTC
        EXTRN   OIIB,OOIB,RDIB,WRIB,CIIB,COIB
        EXTRN   OIID,OOID,RDID,WRID,CIID,COID
        EXTRN   OPEN,READ,WRITE,CLOSE,INCHAR
        EXTRN   OUTCHAR,GET,PUT,PUTSTR,GETBIN
        EXTRN   PUTBIN,EDBH,EDHW,EDHB,EDWH
        EXTRN   BUFALLOC,BUFDEALLOC,STIMER
        EXTRN   FILENAME,IBFIL,RELN,RELBLK
        EXTRN   GETN,GETBLK
        EXTRN   MON,ERROR
        EXTRN   CIFILE,COFILE
        EXTRN   PRINTER,NULLFILE,BUCKET,XMF,RCF
        extrn   CEFILE,REFILE,PHYSINT
        extrn   _entry,bF909,bF915,wF919,bF91D,sub_D67A
        public  wFDFC


        CSEG
TABTC:  jmp     OITC
        jmp     OOTC
        jmp     RDTC
        jmp     WRTC
        jmp     CITC
        jmp     COTC

TABIB:  jmp     OIIB
        jmp     OOIB
        jmp     RDIB
        jmp     WRIB
        jmp     CIIB
        jmp     COIB

TABIN:  jmp     OIID
        jmp     OOID
        jmp     RDID
        jmp     WRID
        jmp     CIID
        jmp     COID

LOADX:  CPI     4
        JM      LOADD
        SUI     4
        JMP     CLOAD


; rest of code here is for absolute loads

        ASEG
        ORG     0FD00H

SYSJMP:
        jmp     MON
        jmp     ERROR
LOAD:
        jmp     LOADX
        jmp     INCHAR
        jmp     OUTCHAR
        jmp     GET
        jmp     PUT
        jmp     PUTSTR
        jmp     GETBIN
        jmp     PUTBIN
        jmp     OPEN
        jmp     READ
        jmp     WRITE
        jmp     CLOSE
        jmp     EDBH
        jmp     EDWH
        jmp     EDHB
        jmp     EDHW
        jmp     BUFALLOC
        jmp     BUFDEALLOC
        jmp     STIMER

        ORG     0FD40H
TTI:    jmp     40H
TTO:    jmp     43H
TTONC:  jmp     46H
CURSOR: jmp     49H
XMON:   jmp     4cH
XERR:   jmp     4FH
PRNT:   jmp     52H
DTST:   jmp     55H
DCAL:   jmp     58H
DSRD:   jmp     5BH
DSWR:   jmp     5EH
DSDL:   jmp     61H
DSRDA:  jmp     64H
DSWRA:  jmp     67H
INDISP: jmp     6AH
DSWT:   jmp     6DH
DCALW:  jmp     70H
DSRDW:  jmp     73H
DSWRW:  jmp     76H
DSDLW:  jmp     79H
DSRAW:  jmp     7CH
DSWAW:  jmp     7FH
RCVI:   jmp     82H
LOCDIR: jmp     85H
LOADD:  jmp     88H
LINKD:  jmp     8BH
CTST:   jmp     8EH
CCAL:   jmp     91H
CBRD:   jmp     94H
CBWR:   jmp     97H
CBBS:   jmp     9AH
CBTM:   jmp     9DH
CBSF:   jmp     0A0H
CBSB:   jmp     0A3H
CUN:    jmp     0A6H
CRW:    jmp     0A9H
CWT:    jmp     0ACH
CBRDW:  jmp     0AFH
CBWRW:  jmp     0B2H
CBBSW:  jmp     0B5H
CBTMW:  jmp     0B8H
CBSFW:  jmp     0BBH
CBSBW:  jmp     0BEH
CLOCDIR: jmp    0C1H
CLOAD:  jmp     0C4H
CLINK:  jmp     0C7H
XMIO:   jmp     0CAH
        jmp     FILENAME
        jmp     IBFIL
        jmp     RELN
        jmp     RELBLK
        jmp     GETN
        jmp     GETBLK
        jmp     PHYSINT
        jmp     sub_D67A
        
        ORG     0FDE6H
        dw      TABTC
        dw      TABIB
        dw      TABIN
DEVRD:  dw      0
DEVPR:  dw      PRINTER
DEVNF:  dw      NULLFILE
DEVBB:  dw      BUCKET
DEVCO:  dw      COFILE
DEVCI:  dw      CIFILE
        dw      XMF
        dw      RCF
wFDFC:  dw      8000H
        dw      _entry

        ORG     0FEC0H
        dw      PRINTER
        dw      NULLFILE
        dw      BUCKET
        dw      COFILE
        dw      CIFILE
        dw      XMF
        dw      RCF
        dw      CEFILE
        dw      REFILE
        dw      bF909
        dw      0,0,0,0,0,0
        dw      bF915
        dw      wF919
        dw      bF91D

        ORG     0FF00H
CI:     dw      CIFILE
CO:     dw      COFILE
SI:     dw      0
SO:     dw      0
SL:     dw      0
AI:     dw      0
AO:     dw      0
AL:     dw      0
; end of 'ABS0'
        end
phys.asm
SEC12   EQU     12H
SEC26   EQU     26H
SEC2D   EQU     2DH

INTEL   EQU     1
IBM     EQU     2
AUTO    EQU     20H
INBIT   EQU     1
OUTBIT  EQU     80H
EBCBIT  EQU     80H

CR      EQU     0DH

CI      EQU     0FF00H
DEVTAB  EQU     0FF00H

IBFIL   EQU     0FDD0H
BUFALLOC EQU    0FD36H
BUFDEALLOC EQU  0FD39H
INCHAR  EQU     0FD09H

TABTC   EQU     0FDE6H
TABIB   EQU     0FDE8H
TABIN   EQU     0FDEAH

        PUBLIC  PHYSX,PHYSINT
        EXTRN   LDIG,UPCHAR,FN,LDEV,SCNOFF,LOGNAM
        EXTRN   CIF2,COFILE,BUCKET,NULLFILE
        EXTRN   PRINTER,CEFILE,REFILE,XMF,RCF
        EXTRN   RDID,OIID,CIID,WRID,OOID,COID
        EXTRN   RDIB,OIIB,CIIB,WRIB,OOIB,COIB
        EXTRN   RDTC,OITC,CITC,WRTC,OOTC,COTC
        extrn   bF909
        PUBLIC  PPTR
        CSEG

device  macro   id,info
        db      id
        dw      info
        endm

dev     macro   first,hlen,blen,a,b,c
        db      first,hlen
        dw      blen,a,b,c
        endm

PHYTAB:
        device 'CI', CIF2
        device 'CO', COFILE
        device 'BB', BUCKET
        device 'NF', NULLFILE
        device 'LP', PRINTER
        device 'CE', CEFILE
        device 'RE', REFILE
        device 'XM', XMF
        device 'RC', RCF
        device 'CP', bF909
        db    0
otherDevice:
        dev 'F', 34, 256, TABIN, 100h, sub_F583
        dev 'I', 35, 128, TABIB, 8200h, sub_F592
        dev 'M', 53, 130, TABTC, 101h, sub_F5A6
        dev 'A', 35, 128, TABIB, 200h, sub_F592
        dev 'B', 35, 128, TABIB, 4200h, sub_F592
        dev 'J', 35, 128, TABIB, 0C200h, sub_F592
        db    0
; =============== S U B R O U T I N E =======================================
freeFileBuffers:
        inx     h
        mov     a, m
        dcx     h
        ani     AUTO
        rz                      ; didn't use them so nothing to do
        mov     a, m
        cpi     3               ; have 1 or 2 optional file buffers
        jz      loc_F08A
        cpi     6
        jz      loc_F08A
loc_F086:
        call    BUFDEALLOC    ; single buffer to release
        ret
loc_F08A:
        push    h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mov     a, h
        ora     l
        cnz     freeFileBuffers ; free first buffer
        pop     h
        push    h
        inx     h
        inx     h
        inx     h
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        xchg
        mov     a, h
        ora     l
        cnz     freeFileBuffers ; free second buffer
        pop     h
        jmp     loc_F086
; End of function freeFileBuffers
nesting:        ds 1
cmdLine:        ds 130
endChar:        ds 1
PPTR:           ds 2
; =============== S U B R O U T I N E =======================================
PHYSX:
        lxi     h, 0
        shld    PPTR
        lxi     h, nesting
        mvi     m, 0
        lxi     d, cmdLine
getCmdLine:
        cpi     ','
        jz      phys_comma
        cpi     CR
        jz      phys_eol
        cpi     ' '
        jc      phys_badch
        cpi     '$'
        jz      phys_eol
        cpi     '&'
        jz      lineContinue
loc_F156:
        stax    d
        inx     d
        cpi     '('
        jz      pyhsx_lp
        cpi     ')'
        jz      phys_rp
loc_F162:
        lhld    CI       ; getchar from CI
        call    INCHAR
        rc
        jmp     getCmdLine
pyhsx_lp:
        lxi     h, nesting
        inr     m
        jmp     loc_F162
phys_rp:
        lxi     h, nesting      ; check for unmatched ()
        mov     a, m
        dcr     m
        ana     a
        jnz     loc_F162
phys_badch:
        mvi     a, SEC2D
        stc
        ret
lineContinue:
        lhld    CI
        call    INCHAR
        rc                      ; no char
        cpi     CR
        jnz     lineContinue    ; loop until CR seen
        call    INCHAR
        rc                      ; all done
        jmp     getCmdLine      ; keep going
phys_comma:
        lxi     h, nesting
        mov     a, m
        ana     a
        mvi     a, ','
        jz      phys_eol        ; done if not inside ()
        jmp     loc_F156        ; else stuff and continue
phys_eol:
        sta     endChar
        lxi     h, nesting
        mov     a, m
        ana     a
        jnz     phys_badch      ; oops missing )
        mvi     a, CR           ; terminate line with CR
        stax    d
        lxi     h, cmdLine
        lda     LDEV
        cpi     1
        jz      phys1
        cpi     3
        jz      phys1
        cpi     6
        jz      phys1
        mvi     a, 1
        jmp     phys2
phys1:
        sub     a
phys2:
        call    PHYSINT
        rc
        shld    PPTR
        lda     char
        cpi     CR
        jnz     loc_F1DD
        lda     endChar
        ana     a
        ret
loc_F1DD:
        call    freeFileBuffers
        jmp     phys_badch
; End of function PHYSX
fileName: ds 2
curDirection: ds 1
drive:  ds 1
char:   ds 1
devicePtr: ds 2
bF1EA:  ds 1
nameLen: ds 1
; =============== S U B R O U T I N E =======================================
toupper:
        cpi     'a'
        rc
        cpi     'z'+1
        rnc
        sui     20h ; ' '
        ret
; End of function toupper
; =============== S U B R O U T I N E =======================================
nextFileNameChar:
        push    h
        lhld    fileName
loc_F1F9:
        mov     a, m
        inx     h
        cpi     ' '
        jz      loc_F1F9
        shld    fileName
        sta     char
        pop     h
        ret
; End of function nextFileNameChar
;hl->filename, a = 0 input, 1 output
;return carry if error with code in a
; =============== S U B R O U T I N E =======================================
PHYSINT:
        cpi     2
        jc      physi1           ; only 0 or 1 suported
        mvi     a, SEC26
        stc
        ret
physi1:
        shld    fileName
        push    psw
        sub     a
        sta     nameLen
        pop     psw
; End of function PHYSINT
; =============== S U B R O U T I N E =======================================
physi2:
        mov     b, a            ; save direction
        lda     nameLen
        inr     a
        sta     nameLen
        lda     curDirection
        push    psw
        mov     a, b
        sta     curDirection
        call    nextFileNameChar
        cpi     '('
        jnz     notLP
        lda     curDirection
        call    physi2
        jc      physe1
        xchg
        lda     char
        cpi     '/'
        jz      delimiter
        cpi     ','
        jz      delimiter
        xchg
physe2:
        call    freeFileBuffers
physe1:
        pop     psw             ; restore the direction
        sta     curDirection
        mvi     a, SEC2D
        stc
        ret
delimiter:
        push    d
        push    psw
        cpi     ','
        lda     curDirection
        jz      loc_F261
        mvi     a, 1
loc_F261:
        call    physi2
        jnc     checkDone
loc_F267:
        pop     h
        pop     h
        jmp     physe2
checkDone:
        push    h
        lda     char
        cpi     ')'
        jnz     loc_F281
        call    nextFileNameChar
        lxi     h, 6
        call    BUFALLOC      ; allocate 6 byte buffer
        jnc     loc_F28B
loc_F281:
        pop     h
        pop     psw
        push    psw
        call    freeFileBuffers
        pop     h
        jmp     loc_F267
loc_F28B:
        lxi     d, 5
        dad     d
        pop     b
        mov     m, b            ; save the second optional subspec
        dcx     h
        mov     m, c
        dcx     h
        pop     psw
        pop     b
        mov     m, b            ; save the first optional subspec
        dcx     h
        mov     m, c
        dcx     h
        push    psw
        lda     curDirection    ; convert the direction into the appropriate bit
        inr     a
        ori     AUTO
        mov     m, a
        pop     psw
        dcx     h
        mvi     b, 6
        cpi     ','
        jz      loc_F2B1
        inx     h
        mvi     m, INBIT + AUTO
        dcx     h
        mvi     b, 3            ; convert to a type 3 device
loc_F2B1:
        mov     m, b
        pop     psw
        jmp     removeNestedSpec
notLP:
        sub     a
        sta     drive
        lda     char
        cpi     '/'
        jz      echoFile
        cpi     ':'
        jnz     defDevice
        call    nextFileNameChar ; collect the 2 char device name
        call    toupper
        mov     b, a
        call    nextFileNameChar
        call    toupper
        mov     c, a
        lxi     h, PHYTAB
loc_F2D8:
        mov     a, m
        inx     h
        ana     a
        jz      devNotFound
        cmp     b
        jnz     loc_F2E7
        mov     a, m
        cmp     c
        jz      devFound
loc_F2E7:
        lxi     d, 3
        dad     d
        jmp     loc_F2D8
devFound:
        call    nextFileNameChar
        cpi     ':'
        jnz     physe1          ; check for ending :
        call    nextFileNameChar
        inx     h
getDevInfo:
        mov     e, m
        inx     h
        mov     d, m
        xchg                    ; hl -> deviceInfo
        pop     psw
        sta     curDirection
        jmp     removeNestedSpec
devNotFound:
        lxi     h, otherDevice
loc_F308:
        mov     a, m
        ana     a
        jz      physe1          ; all done
        cmp     b
        jz      loc_F321        ; first char match found
        lxi     d, 10           ; advance to next entry
        dad     d
        jmp     loc_F308
defDevice:
        lxi     h, otherDevice
        shld    devicePtr
        jmp     loc_F33F
loc_F321:
        shld    devicePtr
        call    nextFileNameChar
        cpi     ':'
        jnz     physe1          ; should have trailing :
        mov     a, c
        cpi     '0'
        jc      physe1
        cpi     '4'
        jnc     physe1
        sui     '0'
        sta     drive           ; 0-3 valid
        call    nextFileNameChar
loc_F33F:
        lhld    devicePtr
        inx     h
        mov     c, m
        inx     h
        mov     e, m
        inx     h
        mov     d, m
        inx     h
        shld    devicePtr
        xchg
        mvi     b, 0
        dad     b
        call    BUFALLOC      ; buffer size + header size
        jnc     loc_F35A
        inx     sp
        inx     sp
        stc
        ret
loc_F35A:
        push    h
        mvi     m, 5
        inx     h
        lda     curDirection
        inr     a               ; direction to bit flag
        ori     AUTO
        mov     m, a            ; update device flags
        inx     h
        mvi     m, 0            ; zero out first sub type
        inx     h
        mvi     m, 0
        inx     h
        mvi     m, 80h          ; set 2nd value to 128
        inx     h
        mvi     m, 0
        inx     h
        xchg
        pop     h
        push    h
        dad     b
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        xchg
        lhld    devicePtr
        mov     c, m
        inx     h
        mov     b, m
        inx     h
        shld    devicePtr
        mov     h, b
        mov     l, c
        mov     c, m
        inx     h
        mov     b, m
        lxi     h, 6
        dad     b
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        xchg
        lxi     h, 9
        dad     b
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        xchg
        lxi     h, 3
        lda     curDirection
        ana     a
        jnz     loc_F3AC
        lxi     h, 0
loc_F3AC:
        dad     b
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        xchg
        lxi     b, 0Ch
        dad     b
        xchg
        mov     m, e
        inx     h
        mov     m, d
        inx     h
        xchg
        lhld    devicePtr
        mov     a, m
        inx     h
        shld    devicePtr
        stax    d
        mov     a, m
        sta     bF1EA
        inx     d
        lda     drive
        stax    d
        inx     d
        lxi     b, 603h         ; 6.3 format name
        lda     bF1EA
        ani     2
        jz      loc_F3DE
        lxi     b, 801h         ; 8.1 format name
loc_F3DE:
        lda     char
loc_F3E1:
        cpi     '.'
        jz      loc_F455
        cpi     '/'
        jz      loc_F4AC
        cpi     ','
        jz      loc_F4AC
        cpi     ')'
        jz      loc_F4AC
        cpi     CR
        jz      loc_F4AC
        cpi     '0'
        jc      physe3
        cpi     ':'
        jc      validNameChar
        cpi     'A'
        jc      physe3
        cpi     'Z'+1
        jc      validNameChar
        cpi     'a'
        jc      physe3
        cpi     'z'+1
        jc      validNameChar
physe3:
        pop     h
        jmp     physe2
validNameChar:
        stax    d
        inx     d
        dcr     b
        jz      loc_F428
        call    nextFileNameChar
        jmp     loc_F3E1
loc_F428:
        lda     bF1EA
        ani     2
        jnz     loc_F43B
        call    nextFileNameChar
        cpi     '.'
        jz      getExtent
        jmp     loc_F43E
loc_F43B:
        call    nextFileNameChar
loc_F43E:
        cpi     ','
        jz      endExt
        cpi     ')'
        jz      endExt
        cpi     '/'
        jz      endExt
        cpi     CR
        jz      endExt
        jmp     physe3
loc_F455:
        mov     a, b            ; ext only not allowed for 6.3 format
                                ; also in 8.1 format 2 chars . will cause error
        cpi     6
        jz      physe3
loc_F45B:
        mvi     a, 0            ; fill with 0s
        stax    d
        inx     d
        dcr     b
        jnz     loc_F45B
        lda     bF1EA       ; check if ext allowed
        ani     2
        jnz     physe3
getExtent:
        call    nextFileNameChar
        cpi     ','
        jz      endExt
        cpi     '/'
        jz      endExt
        cpi     ')'
        jz      endExt
        cpi     CR
        jz      endExt
        cpi     '0'
        jc      physe3
        cpi     ':'
        jc      validExtChar
        cpi     'A'
        jc      physe3
        cpi     'Z'+1
        jc      validExtChar
        cpi     'a'
        jc      physe3
        cpi     'z'+1
        jnc     physe3
validExtChar:
        stax    d
        inx     d
        dcr     c
        jnz     getExtent
        call    nextFileNameChar
        jmp     loc_F4D1
loc_F4AC:
        mov     a, b
        add     c
        cpi     9
        jz      physe3
loc_F4B3:
        mvi     a, 0
        stax    d
        inx     d
        dcr     b
        jnz     loc_F4B3
        lda     bF1EA
        ani     2
        jz      endExt
        sub     a
        stax    d
        inx     d
        jmp     loc_F4D1
endExt:
        mvi     a, 0            ; pad with nulls
        stax    d
        inx     d
        dcr     c
        jnz     endExt
loc_F4D1:
        lda     char
        cpi     ','
        jz      nameTerminator
        cpi     '/'
        jz      nameTerminator
        cpi     ')'
        jz      nameTerminator
        cpi     CR
        jz      nameTerminator
        jmp     physe3
nameTerminator:
        lxi     h, loc_F4FD     ; makes return at end effectively a call (de)
        push    h
        lhld    devicePtr
        mov     a, m
        stax    d
        inx     d
        inx     h
        mov     c, m
        inx     h
        mov     h, m
        mov     l, c
        push    h               ; return via handler
        xchg
        ret
loc_F4FD:
        pop     h
        pop     psw
        jmp     removeNestedSpec
echoFile:
        mvi     c, 0
        call    nextFileNameChar
        call    toupper
        cpi     'C'
        jz      optC
        mvi     c, 2
        cpi     'S'
        jz      optAS
        mvi     c, 5
        cpi     'A'
        jnz     physe1
optAS:
        call    nextFileNameChar
        call    toupper
        cpi     'I'
        jz      loc_F547
        inr     c
        cpi     'O'
        jz      loc_F534
        inr     c
        cpi     'L'
        jnz     physe1
loc_F534:
        lda     curDirection
        cpi     1               ; can't echo an input file
        jnz     physe1
loc_F53C:
        mov     l, c            ; c indexes into DEVTAB
                                ; CI/CO SI/SO/SL AI/AO/AL
        mvi     h, 0
        dad     h
        lxi     d, DEVTAB
        dad     d
        jmp     getDevInfo
loc_F547:
        lda     curDirection
        ana     a
        jnz     physe1
        jmp     loc_F53C        ; c is index into DEVTAB
optC:
        call    nextFileNameChar
        call    toupper
        cpi     'I'             ; c = 0
        jz      loc_F547
        inr     c
        cpi     'O'             ; c = 1
        jz      loc_F534
        jmp     physe1
removeNestedSpec:
        push    psw
        lda     nameLen         ; remove the : from the name
        dcr     a
        sta     nameLen
        jnz     loc_F580
        lda     char
        cpi     0Dh             ; next was CR so all done
        jz      loc_F580
        call    freeFileBuffers
        pop     psw             ; :XX: or /YY must be at end of line or in ()
        mvi     a, SEC2D
        stc
        ret
loc_F580:
        pop     psw
        ana     a
        ret
; End of function physi2
; =============== S U B R O U T I N E =======================================
sub_F583:
        inx     h
        inx     h
        inx     h
        inx     h
        xchg
        lxi     h, 130
        dad     d
        xchg
        mov     m, e
        inx     h
        mov     m, d
        ana     a
        ret
; End of function sub_F583
; =============== S U B R O U T I N E =======================================
sub_F592:
        lxi     d, -10
        dad     d
        mvi     b, 9
loc_F598:
        mov     a, m            ; convert nulls to spaces
        ana     a
        jnz     loc_F59F
        mvi     m, ' '
loc_F59F:
        dcr     b
        inx     h
        jnz     loc_F598
        ana     a
        ret
; End of function sub_F592
; =============== S U B R O U T I N E =======================================
sub_F5A6:
        xchg
        lxi     h, 151
        dad     d
        xchg
        mov     m, l
        inx     h
        mov     m, l
        ana     a
        ret
; End of function sub_F5A6
        end
assi.asm
SEC11   EQU     11H
SEC1B   EQU     18H
SEC1C   EQU     1CH
SEC34   EQU     34H
SEC21   EQU     21H
SEC2E   EQU     2EH

LF      EQU     0Ah
CR      EQU     0Dh
ROLL    EQU	    0Ch
; additional codes
EM      EQU     19H
GS      EQU     1DH

INCHAR  EQU     0FD09H      ; published interface
OPEN    EQU     0FD1EH

CI      EQU     0FF00H
CO      EQU     0FF02H
DEVTAB  EQU     0FF00H
ROLLSW  EQU     271FH
CISAVE  EQU     271BH
COSAVE  EQU     271DH

TTI     EQU     40H
TTO     EQU     43H
RCVI    EQU     82H
XMIO    EQU     0CAH
PRNT    EQU     52H

INBIT   EQU     1
OUTBIT  EQU     2
AUTO    EQU     20h
DONTCLOSE EQU   40h

        PUBLIC SCNOFF,SCN01,ASSIO
        PUBLIC CIFILE,FN,LDEV
        PUBLIC FILENAME,IBFIL,LOGNAM
        PUBLIC CIF2,COFILE,BUCKET,NULLFILE
        PUBLIC PRINTER,CEFILE,REFILE,XMF,RCF
        EXTRN PHYSX,LDIG,UPCHAR
        EXTRN PPTR,BUFDEALLOC
        public  bF909,bF915,wF919,BF91D,CIBUF

        CSEG
; =============== S U B R O U T I N E =======================================
SCNOFF:
        cpi     CR
        rz
SCN01:
        lhld    CI
        call    INCHAR
        rc
        jmp     SCNOFF
; End of function SCNOFF
LDEV:           db 0
LPTR:           ds 2
; =============== S U B R O U T I N E =======================================
ASSIO:
        lxi     h, 0
        shld    CISAVE
        shld    COSAVE
ASSI9:
        call    LOGNAM
        rc
        ana     a
        jnz     ASS10
        mvi     a, '$'
        ret
ASS10:
        sta     LDEV
        lhld    CI
        call    INCHAR
        rc
        cpi     '='
        jnz     ASSE1
        call    INCHAR
        rc
        cpi     '/'
        jz      ASSI1
        cpi     ','
        jz      ASSI1
        cpi     '$'
        jz      ASSI1
        cpi     CR
        jz      ASSI1
        call    PHYSX
        rc
        cpi     ','
        jz      ASSI2
        cpi     '$'
        jz      ASSI2
        cpi     CR
        jz      ASSI2
ASSE1:
        call    SCNOFF
        mvi     a, SEC2E
        stc
        ret
ASSI1:
        lxi     h, 0
        shld    PPTR
ASSI2:
        lhld    PPTR
        push    psw
        lda     LDEV
        cpi     1
        jz      ASSI3
        cpi     2
        jz      ASSI4
        sui     1
        xchg
        lxi     b, 0
        mov     c, a
        lxi     h, DEVTAB
        dad     b
        dad     b
        shld    LPTR
        mov     m, e
        inx     h
        mov     m, d
ASSI5:
        lhld    PPTR
        mov     a, h
        ora     l
        jz      ASS11
        mvi     b, INBIT
        lda     LDEV
        cpi     1
        jz      ASS12
        cpi     3
        jz      ASS12
        cpi     6
        jz      ASS12
        mvi     b, OUTBIT
ASS12:
        mov     a, b
        call    OPEN
        jnc     ASS11
        push    psw
        lhld    PPTR
        inx     h
        mov     a, m
        ani     AUTO
        jz      ASS13
        dcx     h
        call    BUFDEALLOC
ASS13:
        lhld    LPTR
        mvi     m, 0
        inx     h
        mvi     m, 0
        pop     h
        pop     psw
        push    h
        call    SCNOFF
        pop     psw
        ret
ASS11:
        pop     psw
        cpi     ','
        jnz     ASSI6
        jmp     ASSi9
ASSI3:
        shld    CISAVE
        jmp     ASSI5
ASSI4:
        shld    COSAVE
        jmp     ASSI5
ASSI6:
        push    psw
        lhld    CISAVE
        mov     a, h
        ora     l
        jz      ASSI7
        shld    CI
ASSI7:
        lhld    COSAVE
        mov     a, h
        ora     l
        jz      ASSI8
        shld    CO
ASSI8:
        pop     psw
        ana     a
        ret
; End of function ASSIO
; =============== S U B R O U T I N E =======================================
FN:
        lhld    CI
        call    INCHAR
        rc
        cpi     '0'
        jm      FN1
        cpi     '4'
        jp      FN1
        sui     '0'
        mov     b, a
        call    INCHAR
        rc
        cpi     ':'
        jnz     FN1
        mov     a, b
        ana     a
        ret
FN1:
        call    SCNOFF
        mvi     a, SEC11
        stc
        ret
; End of function FN
; =============== S U B R O U T I N E =======================================
FILENAME:
        push    d
        mvi     b, 9
        xchg
FILN0:
        mvi     m, 0
        inx     h
        dcr     b
        jnz     FILN0
        pop     d
        lhld    CI
        call    LDIG
        jc      FILN1
        mvi     b, 6
FILN2:
        stax    d
        inx     d
        dcr     b
        jz      FILN5
        call    INCHAR
        rc
        call    LDIG
        jnc     FILN2
        cpi     '.'
        jnz     FILN7
FILN3:
        inx     d
        dcr     b
        jnz     FILN3
        jmp     FILNB
FILN5:
        call    INCHAR
        rc
        call    LDIG
        jnc     FILN6
        cpi     '.'
        jnz     FILN7
FILNB:
        mvi     b, 3
FLIN8:
        call    INCHAR
        rc
        call    LDIG
        jc      FILN7
        stax    d
        inx     d
        dcr     b
        jnz     FLIN8
        call    INCHAR
        rc
        call    LDIG
        jnc     FILN6
        ana     a
        ret
FILN7:
        ana     a
        ret
FILN1:
        call    SCNOFF
        mvi     a, 1Bh
        stc
        ret
FILN6:
        call    SCNOFF
        mvi     a, 1Ch
        stc
        ret
; End of function FILENAME
; =============== S U B R O U T I N E =======================================
IBFIL:
        push    psw
        push    d
        mvi     b, 9
        mvi     a, ' '
IBFI1:
        stax    d
        inx     d
        dcr     b
        jnz     IBFI1
        pop     d
        pop     psw
        lhld    CI
        call    LDIG
        jc      FILN1
        mvi     b, 8
IBFI2:
        stax    d
        inx     d
        dcr     b
        jz      IBFI3
        call    INCHAR
        rc
        call    LDIG
        jnc     IBFI2
        ana     a
        ret
IBFI3:
        call    INCHAR
        rc
        call    LDIG
        jnc     IBFI4
        ana     a
        ret
IBFI4:
        call    SCNOFF
        mvi     a, SEC34
        stc
        ret
; End of function IBFIL
; =============== S U B R O U T I N E =======================================
LOGNAM:
        lhld    CI
LOGN1:
        call    INCHAR
        rc
        cpi     CR
        jz      LOGN1
        cpi     '/'
        jz      LOGN4
        cpi     ' '
        jz      LOGN1
        cpi     '$'
        jz      LOGN4
        call    UPCHAR
        mvi     b, 1
        cpi     'C'
        jz      LOGN2
        mvi     b, 3
        cpi     'S'
        jz      LOGN3
        mvi     b, 6
        cpi     'A'
        jz      LOGN3
LOGN8:
        call    SCNOFF
        mvi     a, SEC21
        stc
        ret
LOGN3:
        call    INCHAR
        rc
        call    UPCHAR
        cpi     'L'
        jnz     LOGN5
        inr     b
LONG7:
        inr     b
LOGN6:
        mov     a, b
        ana     a
        ret
LOGN2:
        call    INCHAR
        rc
        call    UPCHAR
LOGN5:
        cpi     'I'
        jz      LOGN6
        cpi     'O'
        jz      LONG7
        jmp     LOGN8
LOGN4:
        sub     a
        ana     a
        ret
XMF:            db 2
        db OUTBIT + DONTCLOSE
        dw 0
        dw XMIO
RCF:            db 2
        db INBIT + DONTCLOSE
        dw RCVI
        dw 0
NULLFILE:       db 2
        db INBIT + DONTCLOSE
        dw RETEF
        dw 0
RETEF:
        sub     a
        stc
        ret
BUCKET:         db 2
        db OUTBIT + DONTCLOSE
        dw 0
        dw BUCK
BUCK:
        ana     a
        ret
COFILE:         db 2
        db OUTBIT + DONTCLOSE
        dw 0
        dw COF1
COF1:
        call    TTO
        cpi     LF
        jz      COF2
        cpi     GS
        jz      loc_F835
        cpi     EM
        jz      loc_F835
        ana     a
        ret
COF2:
        push    psw
        lda     ROLLSW
        ana     a
        jz      COF3
        cpi     59h ; 'Y'
        jz      COF4
        inr     a
        sta     ROLLSW
        jmp     COF3
loc_F835:
        push    psw
        lda     ROLLSW
        ana     a
        jz      COF3
        mvi     a, 41h ; 'A'
        sta     ROLLSW
        jmp     COF3
COF4:
        mvi     a, ROLL
        call    TTO
COF3:
        pop     psw
        ana     a
        ret
PRINTER:        db 2
        db OUTBIT + DONTCLOSE
        dw 0
        dw PRNT
CIFILE:         db 4
        db INBIT + DONTCLOSE
        dw 0
        dw 80h
        dw CIBUF
        dw CIF1
CIF1:           db 3
        db INBIT + DONTCLOSE
        dw CIF2
        dw COFILE
CIF2:           db 2
        db INBIT + DONTCLOSE
        dw TTI
        dw 0
REFILE:         db 2
        db INBIT + DONTCLOSE
        dw RERUT
        dw 0
RERUT:
        call    RCVI
        jmp     CERU2
CEFILE:         db 2
        db INBIT + DONTCLOSE
        dw CERUT
        dw 0
CERUT:
        call    TTI
CERU2:
        cpi     3
        jnz     CERU1
        sub     a
        stc
        ret
CERU1:
        ana     a
        ret
        db 0FFh
CIBUF:  db 10
        db 10
        ds 7Eh
bF909:      db 3
        db INBIT + DONTCLOSE
        dw CIFILE
        dw byte_F90F
byte_F90F:      db 6
        db OUTBIT + DONTCLOSE
        dw COFILE
        dw PRINTER
; End of function LOGNAM
bF915:      db 65h
        db 0F8h
        dw 0
wF919:       dw CERUT
        dw 0
bF91D:      db 0Eh
        db 0F8h
        db 48h
        db 0F8h
        dw 0
        end
ctab.asm
        PUBLIC  EBCDIC,ASCII

        CSEG


EBCDIC: db      0,     1,     2,     3
        db     55,    45,    46,    47
        db     22,     5,    37,    11
        db     12,    13,    14,    15
        db     16,    17,    18,    19
        db     60,    61,    50,    38
        db     24,    25,    63,    39
        db     28,    29,    30,    31
        db     64,    90,   127,   123
        db     91,   108,    80,   125
        db     77,    93,    92,    78
        db    107,    96,    75,    97
        db    240,   241,   242,   243
        db    244,   245,   246,   247
        db    248,   249,   122,    94
        db     76,   126,   110,   111
        db    124,   193,   194,   195
        db    196,   197,   198,   199
        db    200,   201,   209,   210
        db    211,   212,   213,   214
        db    215,   216,   217,   226
        db    227,   228,   229,   230
        db    231,   232,   233,   234
        db    224,   236,    95,   109
        db    121,   129,   130,   131
        db    132,   133,   134,   135
        db    136,   137,   145,   146
        db    147,   148,   149,   150
        db    151,   152,   153,   162
        db    163,   164,   165,   166
        db    167,   168,   169,   192
        db    171,   208,    79,     7
        db      4,     6,     8,     9
        db     10,    20,    21,    23
        db     26,    27,    32,    33
        db     34,    35,    36,    40
        db     41,    42,    43,    44
        db     48,    49,    51,    52
        db     53,    54,    56,    57
        db     58,    59,    62,    65
        db     66,    67,    68,    69
        db     70,    71,    72,    73
        db     81,    82,    83,    84
        db     85,    86,    87,    88
        db     89,    98,    99,   100
        db    101,   102,   103,   104
        db    105,   106,   112,   113
        db    114,   115,   116,   117
        db    118,   119,   120,    74
        db    128,   138,   139,   140
        db    141,   142,   143,   144
        db    154,   155,   156,   157
        db    158,   159,   160,   161
        db    173,   174,   175,   176
        db    177,   178,   179,   180
        db    181,   182,   183,   184
        db    185,   186,   187,   188
        db    189,   190,   191,   170
        db    202,   203,   204,   205
        db    206,   207,   172,   218
        db    219,   220,   221,   222
        db    223,   235,   225,   237
        db    238,   239,   250,   251
        db    252,   253,   254,   255

ASCII:
        db      0,     1,     2,     3
        db    128,     9,   129,   127
        db    130,   131,   132,    11
        db     12,    13,    14,    15
        db     16,    17,    18,    19
        db    133,   134,     8,   135
        db     24,    25,   136,   137
        db     28,    29,    30,    31
        db    138,   139,   140,   141
        db    142,    10,    23,    27
        db    143,   144,   145,   146
        db    147,     5,     6,     7
        db    148,   149,    22,   150
        db    151,   152,   153,     4
        db    154,   155,   156,   157
        db     20,    21,   158,    26
        db     32,   159,   160,   161
        db    162,   163,   164,   165
        db    166,   167,   195,    46
        db     60,    40,    43,   126
        db     38,   168,   169,   170
        db    171,   172,   173,   174
        db    175,   176,    33,    36
        db     42,    41,    59,    94
        db     45,    47,   177,   178
        db    179,   180,   181,   182
        db    183,   184,   185,    44
        db     37,    95,    62,    63
        db    186,   187,   188,   189
        db    190,   191,   192,   193
        db    194,    96,    58,    35
        db     64,    39,    61,    34
        db    196,    97,    98,    99
        db    100,   101,   102,   103
        db    104,   105,   197,   198
        db    199,   200,   201,   202
        db    203,   106,   107,   108
        db    109,   110,   111,   112
        db    113,   114,   204,   205
        db    206,   207,   208,   209
        db    210,   211,   115,   116
        db    117,   118,   119,   120
        db    121,   122,   231,   124
        db    238,   212,   213,   214
        db    215,   216,   217,   218
        db    219,   220,   221,   222
        db    223,   224,   225,   226
        db    227,   228,   229,   230
        db    123,    65,    66,    67
        db     68,    69,    70,    71
        db     72,    73,   232,   233
        db    234,   235,   236,   237
        db    125,    74,    75,    76
        db     77,    78,    79,    80
        db     81,    82,   239,   240
        db    241,   242,   243,   244
        db     92,   246,    83,    84
        db     85,    86,    87,    88
        db     89,    90,    91,   245
        db     93,   247,   248,   249
        db     48,    49,    50,    51
        db     52,    53,    54,    55
        db     56,    57,   250,   251
        db    252,   253,   254,   255
        end
comi.asm

SEC1F   EQU     1FH
SEC09   EQU     09H
SEC0B   EQU     0BH
SEC1D   EQU     1DH

CI      EQU     0FF00H
PSTART  EQU     2720H
DEBSW   EQU     272DH
PRGNAM  EQU     2722H

INCHAR  EQU     0FD09H
FILENAME EQU    0FDCDH
LOAD    EQU     0FD06H
TTO     EQU     43H

CR      EQU     0DH
BEL     EQU     07
GS      EQU     1DH
EM      EQU     19H

        PUBLIC  COMINT
        EXTRN   UPCHAR,FN,SCNOFF,ASSIO,UPCASE

        CSEG

;       Command Interpreter

PUNIT:  db      0
COMD:   db      0

; =============== S U B R O U T I N E =======================================
COMINT:
        sub     a
        sta     PUNIT
        lhld    CI
        call    INCHAR
        rc
        cpi     ' '
        jz      COMINT
        cpi     CR
        rz
        cpi     GS
        jz      COMINT
        cpi     EM
        jz      COMINT
        cpi     ':'
        jnz     COMI1
        call    INCHAR
        rc
        call    UPCHAR
        cpi     'M'
        jnz     COMI9
        call    FN
        rc
        adi     4
        sta     PUNIT
        jmp     COMIA
COMI9:
        cpi     'F'
        jnz     COME1
        call    FN
        rc
        sta     PUNIT
COMIA:
        call    INCHAR
        rc
COMI1:
        lxi     d, PRGNAM
        call    FILENAME
        rc
        sta     COMD
        lxi     h, PRGNAM
        lda     PUNIT
        call    LOAD
        jc      COMI5
COMI3:
        lda     COMD
        cpi     '/'
        jz      COMI7
loc_FB8D:
        cpi     CR
        jz      COMI2
        cpi     '$'
        jz      COMI2
        cpi     ' '
        jz      COMI4
        call    SCNOFF
        mvi     a, SEC1F
        stc
        ret
COMI4:
        call    ASSIO
        rc
        jmp     loc_FB8D
COMI2:
        lhld    PSTART
        lda     DEBSW
        ana     a
        jnz     COMIB
        pchl
COMIB:
        cpi     1
        jnz     COMIC
        sub     a
        sta     DEBSW
        push    h
        jmp     0
COMIC:
        sub     a
        sta     DEBSW
        jmp     COMINT
COMI5:
        cpi     SEC09
        jz      COMI6
        cpi     SEC0B
        jz      COMI6
        stc
        jmp     loc_FBEB
COMI6:
        lxi     h, PRGNAM
        mvi     b, 9
        call    UPCASE
        jc      loc_FBEB
        lda     PUNIT
        call    LOAD
        jnc     COMI3
loc_FBEB:
        push    psw
        lda     COMD
        call    SCNOFF
        pop     psw
        ret
COMI7:
        mvi     a, BEL
        call    TTO
        lhld    CI
        call    INCHAR
        rc
        cpi     CR
        jnz     COMI7
        jmp     COMI4
COME1:
        call    SCNOFF
        mvi     a, SEC1D
        stc
        ret
; End of function COMINT
        end
