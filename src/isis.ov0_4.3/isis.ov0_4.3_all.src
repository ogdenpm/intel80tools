getd.plm
ISOV0: do;

open: procedure (startAt$p, path$p, access, echo, status$p) external;
    declare (startAt$p, path$p, access, echo, status$p) address;
end open;

close: procedure (startAt, status$p) external;
    declare (startAt, status$p) address;
end close;

read: procedure (startAt, buff$p, count, actual$p, status$p) external;
    declare (startAt, buff$p, count, actual$p, status$p) address;
end read;

spath: procedure (path$p, info$p, status$p) external;
    declare (path$p, info$p, status$p) address;
end spath;

getdType5: procedure(drive, startAt$p, count, actual$p, table$p, status$p) external;
	declare (drive, startAt$p, count, actual$p, table$p, status$p) address;
end;

declare	isisDir(*) byte initial(':F :ISIS.DIR '),
	ii address,
	dirActual address,
	uED05 byte,
	done byte,
	isEOF byte;

declare getd byte data(0c3h), getdTarget address data(.realGetd);

realGetd: procedure(drive, startAt$p, count, actual$p, table$p, status$p);
	declare (drive, startAt$p, count, actual$p, table$p, status$p) address;
	declare startAt based startAt$p address;
	declare actual based actual$p address;
	declare status based status$p address;
	declare info structure(devNo byte, name(9) byte, deviceType byte, driveType byte);
	declare remoteDrive byte, (dirCnt, dirAFTN, padding) address,
		dirbuf(128) byte, dirEntryP address;
	declare dirEmpty based dirEntryP byte;

	actual = 0;
	status = 0;
	if count = 0 and isEOF then
	do;
		isEOF = 0;
		return;
	end;
	if 0 = startAt then
	do;
		remoteDrive = 0;
		isEOF = 0;
		done = 0;
		dirActual = 0;
		isisDir(2) = drive + '0';
		call spath(.isisDir, .info, status$p);
		if status <> 0 then
			return;
		if info.driveType = 5 then
			remoteDrive = 0ffh;
		else
		do;
			call open(.dirAFTN, .isisDir, 1, 0, status$p);
			if status <> 0 then
				return;
		end;
	end;
	if remoteDrive = 0ffh then
	do;
		if count = 0 then
		do;
			call getdType5(drive, startAt$p, count, actual$p, table$p, status$p);
			return;
		end;
		ii = count;
		do while ii <> 0;
			if ii > 7 and done = 0 then
			do while ii > 7; 
				call getdType5(drive, startAt$p, 8, .dirActual, table$p, status$p);
				if status <> 0 then
					return;
				ii = ii - 8;
				actual = actual + dirActual;
				if dirActual < 8 or ii = 0 then
					return;
				table$p = table$p + 128;
			end;	
			if done = 0 then
			do;
				if isEOF then
				do;
					isEOF = 0;
					return;
				end;
				call getdType5(drive, startAt$p, 8, .dirActual, .dirbuf, status$p);
				if status <> 0 then
					return;
				if dirActual = 0 then
					return;
				if dirActual < 8 then
					isEOF = 0ffh;
				done = 0ffh;
				dirCnt = 0;
			end;
			call move(16, .dirbuf + dirCnt * 16, table$p);
			dirCnt = dirCnt + 1;
			actual = actual + 1;
			ii = ii - 1;
			table$p = table$p + 16;
			dirActual = dirActual - 1;
			if dirActual =  0 then
				done = 0;
		end;
		return;
	end;
	else
	do;
		if count = 0 then
		do;	
			call close(dirAFTN, status$p);
			if status = 2 then
				status = 25h;
			actual = 0;
			return;
		end;	
		dirCnt = 0;
		do while dirCnt < count;
			dirEntryP = table$p + dirCnt * 16;
			call read(dirAFTN, dirEntryP, 16, actual$p, status$p);
			if status <> 0 then
				return;
			if actual = 0 and dirCnt = 0 then
			do;
				call close(dirAFTN, status$p);
				actual = 0;
				return;
			end;
			if actual = 0 or dirEmpty = 7fh then
			do;
				call close(dirAFTN, status$p);
				actual = dirCnt;
				return;
			end;
			if dirEmpty = 0 then
				dirCnt = dirCnt + 1;
		end;
		actual = dirCnt;
		startAt = startAt + actual;
		return;
	end;
end;
end;
getd5.plm
getdType5:
do;
isis: procedure (type, parameter$ptr) external;
    declare type byte,
            parameter$ptr address;
end isis;


getdType5: procedure(drive, startAt$p, count, actual$p, table$p, status$p) public;
	declare (drive, startAt$p, count, actual$p, table$p, status$p) address;
	declare startAt based startAt$p address;
	declare actual based actual$p address;
	declare status based status$p address;
	declare retDataP address;
    declare rpc structure(drive byte, startAt address, count address, tableP address, byteCnt address);
	declare retData based retDataP structure(status byte, startAt address, actual address);
    declare	rpc82 structure(cmd address, resultP address, rpcP address, rStatusP address)
                             data(0508h, 0, .rpc, .extra);
    declare extra(6) byte data(0, 1, 1, 4, 5);	

	rpc.drive = drive;
	rpc.startAt = startAt;
	rpc.count = count;
	rpc.tableP = table$p;
	rpc.byteCnt = count * 16;
	call ISIS(82, .rpc82);
	retDataP = rpc82.resultP;
	status = retData.status;
	startAt = retData.startAt;
	actual = retData.actual;
end;
end;
