$       TITLE   ('INTELLEC MODEL 800 MONITOR, VERSION N1.0, 22 NOVEMBER 2017')
VER     EQU     10              ; VERSION N1.0
;
X0000	EQU	00000H		;0
X0002	EQU	00002H		;2
IOBYT	EQU	00003H		;3
TOPMEM	EQU	00004H		;4
X000C	EQU	0000CH		;12
X0010	EQU	00010H		;16
X00FF	EQU	000FFH		;255
X200F	EQU	0200FH		;8207
X30F0	EQU	030F0H		;12528

;           INTELLEC8/MOD 80 MONITOR VERSION N1.0
;
;           BY WILLIAM BEECH
;           RELEASED UNDER THE GPL VERSION 2.0 LICENSE OR LATER.
;           
;           THIS VERSION IS MODIFIED FROM THE ORIGINAL TO 
;       REMOVE UNNEEDED FUNCTIONS AND ADD OTHER FUNCTIONALITY.
;
; <LEGAL COMMAND> ::= <ASSIGN I/O COMMAND>
;                     <COMPARE COMMAND>
;                     <DISPLAY MEMORY COMMAND>
;                     <ENDFILE COMMAND>
;                     <FILL MEMORY COMMAND>
;                     <PROGRAM EXECUTE COMMAND>
;                     <HEXADECIMAL ARITHMETIC COMMAND>
;                     <INPUT PORT COMMAND>
;                     <MOVE MEMORY COMMAND>
;                     <OUTPUT PORT COMMAND>
;                     <PROGRAM COMMAND>
;                     <QUERY I/O COMAND>
;                     <READ HEXADECIMAL FILE COMMAND>
;                     <SUBSTITUTE MEMORY COMMAND>
;                     <TRANSFER COMMAND>
;                     <WRITE HEXADECIMAL RECORD COMMAND>
;                     <REGISTER MODIFY COMMAND>
; <ASSIGN I/O COMMAND> ::= A<LOGICAL DEVICE>=<PHYSICAL DEVICE><CR>
; <COMPARE COMMAND> ::= C<START MEMORY ADDRESS><CR>
; <DISPLAY MEMORY COMMAND> ::= D<START MEMORY ADDRESS>-<END MEMORY ADDRESS><CR>
; <ENDFILE COMMAND> ::= E[<START ADDRESS>]<CR>
; <FILL MEMORY COMMAND> ::= F<START MEMORY ADDRESS>-<END MEMORY ADDRESS>,<VALUE><CR>
; <PROGRAM EXECUTE COMMAND> ::= G[<EXECUTION ADDRESS>[,<BP1 ADDRESS>[,<BP2 ADDRESS>]]]<CR>
; <HEXADECIMAL ARITHMETIC COMMAND> ::= H<NUMBER>,<NUMBER><CR>
; <INPUT PORT COMMAND> ::= I<PORT NUMBER><CR>
; <MOVE MEMORY COMMAND> ::= M<START MEMORY ADDRESS>-<END MEMORY ADDRESS>,<NEW MEMORY ADDRESS><CR>
; <OUTPUT PORT COMMAND>  ::= O<PORT NUMBER>,<VALUE><CR>
; <PROGRAM COMMAND> ::= P<NUMBER>,<NUMBER>,<NUMBER><CR>
; <QUERY I/O COMMAND> ::= Q<CR>
; <READ HEXADECIMAL FILE COMMAND> ::= R<OFFSET><CR>
; <SUBSTITUTE MEMORY COMMAND> ::= S<START MEMORY ADDRESS>[<CR>|<SP>]
; <TRANSFER COMMAND> ::= T<START MEMORY ADDRESS><CR>
; <WRITE HEXADECIMAL RECORD COMMAND> ::= W<START MEMORY ADDRESS>-<END MEMORY ADDRESS><CR>
; <REGISTER MODIFY COMMAND> ::= X<REGISTER IDENTIFIER><CR>
; <LOGICAL DEVICE> ::= CONSOLE!READER!LIST!PUNCH
; <PHYSICAL DEVICE> ::= CRT!TTY!PTR!PTP!BATCH!1!2
; <REGISTER IDENTIFIER> ::= A!B!C!D!E!F!H!L!M!P!S
; <NUMBER> ::= <HEX DIGIT>
;              <NUMBER><HEX DIGIT>
; <HEX DIGIT> ::= 0!1!2!3!4!5!6!7!8!9!A!B!C!D!E!F
;
; SYSTEM SIGNS ON WITH <CR><LF><.>
;
;
; CONDITIONAL ASSEMBLY SWITCHES
;
FALSE   EQU     0
TRUE    EQU     NOT FALSE
;
; GLOBAL CONSTANTS
;
TOUT    EQU     250             ;250 MS. COUNTER FOR READER TIMEOUT
LDLY    EQU     20              ;COUNTER FOR 20 MS DELAY
DLY     EQU     84              ;COUNTER FOR 1.O MS DELAY IN PROM
;
; CHARACTER CONSTANTS
;
CTLC    EQU     03H
CR      EQU     0DH
LF      EQU     0AH
;
; I/O STATUS BYTE MASKS AND VALUES
;
CMSK    EQU     00000011B       ;MASK FOR CONSOLE I/O
RMSK    EQU     00001100B       ;MASK FOR READER INPUT
PMSK    EQU     00110000B       ;MASK FOR PUNCH OUTPUT
LMSK    EQU     11000000B       ;MASK FOR LIST OUTPUT
;
CTTY    EQU     00000000B       ;CONSOLE I/O = TTY
CCRT    EQU     00000001B       ;CONSOLE I/O = CRT
BATCH   EQU     00000010B       ;BATCH MODE,
                                ;INPUT = READER, OUTPUT = LIST
CUSE    EQU     00000011B       ;USER DEFINED CONSOLE I/O
;
RTTY    EQU     00000000B       ;READER = TTY
RPTR    EQU     00000100B       ;READER = PTR
RUSE1   EQU     00001000B       ;USER DEFINED READER (1)
RUSE2   EQU     00001100B       ;USER DEFINED READER (2)
;
PTTY    EQU     00000000B       ;PUNCH = TTY
PPTP    EQU     00010000B       ;PUNCH = PTP
PUSE1   EQU     00100000B       ;USER DEFINED PUNCH (1)
PUSE2   EQU     00110000B       ;USER DEFINED PUNCH (2)
;
LTTY    EQU     00000000B       ;LIST = TTY
LCRT    EQU     01000000B       ;LIST = CRT
LLPT    EQU     10000000B       ;LIST = LPT
LUSE    EQU     11000000B       ;USER DEFINED LIST
;
; UPP PROGRAMMER PORTS
;
UPPD    EQU     0F0H            ;UPP DATA REGISTER
UPPS    EQU     0F1H            ;UPP CONTROL HI ADDR/STATUS
UPPA    EQU     0F2H            ;UPP LOW ADDRESS

INTC    EQU     0F3H            ;INT ENB/DIS AND MASK
;
; TTY I/O PORTS
;
TTYD    EQU     0F4H            ;TTY DATA PORT
TTYS    EQU     0F5H            ;TTY STATUS PORT
;
; CRT I/O PORTS
;
CRTD    EQU     0F6H            ;USR DATA PORT 
CRTS    EQU     0F7H            ;USR STATUS PORT     
;
; PARALLEL I/O PORTS
;
DBBD    EQU     0F8H            ;PAPER TAPE DATA PORT
DBBS    EQU     0F9H            ;PAPER TAPE STATUS/CONTROL PORT
;
; 
;
LPTD    EQU     0FAH            ;LPT DATA AND INTERRUPT STATUS
INTS    EQU     0FAH
;
;LOCAL INTERRUPT STATUS AND CONTROL BITS
;
ITTYO   EQU     00000001B       ;TTY OUTPUT INTERRUPT
ITTYI   EQU     00000010B       ;TTY INPUT INTERRUPT
IPTPO   EQU     00000100B       ;PTP OUTPUT INTERRUPT
IPTPI   EQU     00001000B       ;PTR INPUT INTERRUPT
ICRTO   EQU     00010000B       ;CRT OUTPUT INTERRUPT
ICRTI   EQU     00100000B       ;CRT INPUT INTERRUPT
ILPTO   EQU     01000000B       ;LPT OUTPUT INTERRUPT
IENDS   EQU     10000000B       ;ENABLE MONITOR INTERRUPTS EXCEPT LEVEL 7
 
LPTS    EQU     0FBH            ;SERIAL 2 STATUS PORT     
;
; SYSTEM I/O PORTS
;
;???    EQU     0FCH
;???    EQU     0FDH
CPUS    EQU     0FEH            ; CPU STATUS PORT
CPUC    EQU     0FFH            ; CPU CONTROL PORT (CONTROLS BOOT & AUX.PROM)
;
; Origin set to F800H
;
	ORG	0F800H
;
; BRANCH TABLE FOR I/O SYSTEM
;
	JMP	START           ;RESET ENTRY POINT
	JMP	CI              ;LOCAL CONSOLE INPUT
	JMP	RI              ;READER INPUT
	JMP	CO              ;LOCAL CONSOLE OUTPUT
	JMP	PO              ;PUNCH OUTPUT
	JMP	LO              ;LIST OUTPUT
	JMP	CIST            ;LOCAL CONSOLE INPUT STATUS
	JMP	IOCHK           ;I/O SYSTEM STATUS
	JMP	IOSET           ;SET I/O CONFIGURATION
	JMP	MEMCK           ;COMPUTE SIZE OF MEMORY
	JMP	IODEF           ;DEFINE USER I/O ENTRY POINTS
	JMP	JFFC6           ;IOC INPUT
	DB	00BH, 015H      ;NOVEMBER 21, 2017
        JMP     CO0
        JMP     CO2
        JMP     RESTART
        
;***********************************************
;
; ERROR EXIT.
;
; THIS ABNORMAL EXIT IS EXECUTED FOR ALL MONITOR ERROR CONDITIONS.
; THE STACK POINTER VALUE IS RECOMPUTED BECAUSE OF THE UNKNOWN STATE
; OF THE PROCESSOR AS A RESULT OF A COMMAND OR DATA ERROR.
;
ERROR:	LHLD	TOPMEM          ;H POINTS TO TOP PAGE OF MEMORY
	MVI	L,0C8H          ;L POINTS TO BASE OF STACK WITHIN THAT PAGE
	SPHL                    ;SP NOW POINTS TO BASE OF MONITOR STACK
	CALL	CONIB           ;OUTPUT THE ERROR INDICATOR CHAR '#'
	DB	'#'
                                ;FALL THROUGH TO MAIN COMMAND LOOP
;***********************************************
;
; PROGRAM ENTRY POINT.
;
; COMPUTE THE TOP OF RAM MEMORY AVAILABLE IN THIS SYSTEM
; AND LOCATE THE USER REGISTER SAVE AREA, EXIT TEMPLATE, AND
; MONITOR STACK AT THE TOP OF RAM.
;
START:
; REMOVED UNTIL THE BOOT SWITCH IS IMPLEMENTED IN THE SIMULATOR
;	IN	CPUC		;BOOT SWITCH SET?
;	ANI	002H
;	JNZ	START		;NO, LOOP
	EI                      ;ENABLE INTERRUPTS
	CALL	COCRLF          ;TYPE <CR>,<LF>
	CALL	CONIB           ;OUTPUT A PERIOD
	DB	'.'
	CALL	TI              ;GET A CHARACTER, ECHO IT.
	SUI	'A'             ;OTHERWISE TEST FOR A-Z (VALID COMMAND RANGE)
	JM	START           ;LESS THAN A, NOT A VALID COMMAND
	MVI	C,2             ;ASSUME THE COMMAND NEEDS 2 PARAMETERS
	LXI	D,START         ;SET UP PSEUDO RETURN ADDRESS TO SIMULATE
	PUSH	D               ; EFFECT OF A CALL. COMMANDS WHICH PERFORM
                                ; A RETURN WILL CAUSE THE STACK TO BE
                                ; POPPED, THUS RETURNING TO ENTRY POINT
                                ; START. THE 'G' COMMAND, HOWEVER, WIPES
                                ; OUT THIS ADDRESS WITH ANOTHER ADDRESS
                                ; OF ITS OWN CHOOSING (I.E. USER'S PC).
	LXI	H,CMDTBL        ;LOAD POINTER TO PROCESSING ROUTINE PTRS
	CPI	LCT             ;TEST FOR OVERRUN
	JP	ERROR           ;IF SO, THEN ERROR
	MOV	E,A             ;OTHERWISE, MOVE INDEX TO DE
	MVI	D,000H
	DAD	D
	DAD	D               ;HL := CTBLBASE + (2 * INDEX); HL NOW POINTS
                                ;TO PROPER COMMAND IN COMMAND BRANCH TABLE
	MOV	A,M             ;GET LSB OF BRANCH LOCATION
	INX	H
	MOV	H,M             ;GET MSB OF BRANCH LOCATION
	MOV	L,A             ;HL POINTS TO ADDRESS OF COMMAND CODE
	PCHL                    ;TAKE THE BRANCH

;***********************************************
; COMMAND BRANCH TABLE
;
; THIS TABLE CONTAINS THE ADDRESSES OF THE ENTRY POINTS OF
; ALL THE COMMAND PROCESSING ROUTINES.  NOTE THAT AN ENTRY TO 'LER'
; IS AN ERROR CONDITION, I.E., NO COMMAND CORRESPONDING TO THAT
; CHARACTER EXISTS.
;
CMDTBL:	DW	ASSIGN		;A - ASSIGN IOBYTE
	DW	ERROR		;B -
	DW	COMP		;C - COMPARE ROM TO MEMORY
	DW	DISP		;D - DISPLAY MEMORY
	DW	EOF		;E - END OF HEX FILE
	DW	FILL		;F - FILL MEMORY
	DW	GOTO		;G - GOTO
	DW	HEXSD		;H - HEX MATH
	DW	INPUT		;I - INPUT FROM PORT
	DW	ERROR		;J -
	DW	ERROR		;K -
	DW	ERROR		;L -
	DW	MOVE		;M - MOVE MEMORY
	DW	ERROR		;N -
	DW	OUTPUT		;O - OUTPUT TO PORT
	DW	PROG		;P - PROGRAM ROM FROM MEMORY
	DW	QUERY		;Q - QUERY IOBYTE
	DW	READ		;R - READ HEX FILE
	DW	SUBS		;S - SUBSTITUTE MEMORY
	DW	TRAN		;T - 
	DW	ERROR		;U -
	DW	ERROR		;V -
	DW	WRITE		;W - WRITE HEX FILE
	DW	X		;X - DUMP OR CHANGE REGISTERS
LCT     EQU     ($-CMDTBL)/2    ;LCT = NUMBER OF 16-BIT ENTRIES IN TABLE

;***********************************************
;
; PROCESS I/O DEVICE ASSIGNMENT COMMANDS
;
; THIS ROUTINE MAPS SYMBOLIC DEVICE IDENTIFIERS TO BITS
; IN THE I/O STATUS BYTE (IOBYT) TO ALLOW FOR CONSOLE
; MODIFICATION OF SYSTEM I/O CONFIGURATION
;
ASSIGN:	CALL	TI		;F88F-CD C7 FF *
	LXI	H,IOTBL		;F892-21 DC F8 *
	MVI	C,004H		;F895-0E 04
AS0:	CMP	M		;F897-BE
	INX	H		;F898-23
	JZ	AS1		;F899-CA A6 F8 *
	INX	H		;F89C-23
	INX	H		;F89D-23
	INX	H		;F89E-23
	DCR	C		;F89F-0D
	JNZ	AS0		;F8A0-C2 97 F8 *
	JMP	ERROR		;F8A3-C3 26 F8 *
AS1:	MOV	B,M		;F8A6-46
	INX	H		;F8A7-23
	MOV	E,M		;F8A8-5E
	INX	H		;F8A9-23
	MOV	D,M		;F8AA-56
	XCHG			;F8AB-EB
AS2:	CALL	TI		;F8AC-CD C7 FF *
	CPI	03DH		;F8AF-FE 3D
	JNZ	AS2		;F8B1-C2 AC F8 *
AS3:	CALL	TI		;F8B4-CD C7 FF *
	CPI	' '		;F8B7-FE 20
	JZ	AS3		;F8B9-CA B4 F8 *
	MVI	C,004H		;F8BC-0E 04
AS4:	CMP	M		;F8BE-BE
	INX	H		;F8BF-23
	JZ	AS5		;F8C0-CA CB F8 *
	INX	H		;F8C3-23
	DCR	C		;F8C4-0D
	JNZ	AS4		;F8C5-C2 BE F8 *
	JMP	ERROR		;F8C8-C3 26 F8 *
AS5:	CALL	TI		;F8CB-CD C7 FF *
	CPI	CR		;F8CE-FE 0D
	JNZ	AS5		;F8D0-C2 CB F8 *
	LDA	IOBYT		;F8D3-3A 03 00 *
	ANA	B		;F8D6-A0
	ORA	M		;F8D7-B6
	STA	IOBYT		;F8D8-32 03 00 *
	RET			;F8DB-C9

;***********************************************
;
; MASTER I/O DEVICE TABLE
; 4 BYTES/ENTRY
;
;   BYTE 0 = IDENTIFYING CHARACTER
;   BYTE 1 = LOGICAL DEVICE MASK
;   BYTE 2,3 = SUBORDINATE PHYSICAL DEVICE TABLE
;
IOTBL:	DB	'C', 0FCH
        DW      ACT
        DB      'R', 0F3H
        DW      ART
	DB	'P', 0CFH
	DW      APT
	DB      'L', 03FH
	DW      ALT

;***********************************************
;
; I/O SYSTEM PHYSICAL DEVICE TABLES
; 2 BYTES/ENTRY
;
;   BYTE 0 = IDENTIFYING CHARACTER
;   BYTE 1 = DEVICE SELECT BIT PATTERN
;
ACT:
        DB      'T',CTTY        ; LOCAL CONSOLE = TTY
        DB      'C',CCRT        ; LOCAL CONSOLE = CRT
        DB      'B',BATCH       ; BATCH MODE LOCAL CONSOLE READ, LIST
        DB      '1',CUSE        ; USER DEFINED LOCAL CONSOLE DEVICE
ART:
        DB      'T',RTTY        ; READER TTY
        DB      'P',RPTR        ; READER PTR
        DB      '1',RUSE1       ; USER DEFINED READER DEVICE 1
        DB      '2',RUSE2       ; USER DEFINED READER DEVICE 2
APT:
        DB      'T',PTTY        ; PUNCH TTY
        DB      'P',PPTP        ; PUNCH PTP
        DB      '1',PUSE1       ; USER DEFINED PUNCH DEVICE 1
        DB      '2',PUSE2       ; USER DEFINED PUNCH DEVICE 2
ALT:
        DB      'T',LTTY        ; LIST = TTY
        DB      'C',LCRT        ; LIST = CRT
        DB      'L',LLPT        ; LIST = LPT
        DB      '1',LUSE        ; USER DEFINED LIST DEVICE

;***********************************************
;
; COMPARE PROM WITH MEMORY
;
; THIS ROUTINE EXPECTS ONE HEXADECIMAL PARAMETER WHICH
; IT INTERPRETS AS A MEMORY ADDRESS.  THE ROUTINE
; COMPARES THE PROM IN THE FRONT PANEL SOCKET WITH A
; 256 BYTE AREA OF MEMORY POINTED TO BY THE INPUT PARAMETER.
; ALL DIFFERENCES BETWEEN THE PROM AND THE MEMORY AREA
; ARE DISPLAYED IN THE FOLLOWING FORMAT:
;
; <MEM ADDRESS> <MEM CONTENTS> <CORRESPONDING PROM CONTENTS>
;
COMP:	CALL	JFF94		;F945-CD 94 FF *
	PUSH	B		;F948-C5
	MVI	C,002H		;GET TWO ARGUMENTS
	CALL	EXPR
	POP	D		;F94E-D1
	POP	H		;F94F-E1
	POP	B		;F950-C1
	PUSH	B		;F951-C5
	MVI	C,0		;F952-0E 00
CM0:	MOV	A,B		;F954-78
	OUT	UPPS		;F955-D3 F1
	MOV	A,C		;F957-79
	OUT	UPPA		;F958-D3 F2
	IN	UPPD		;F95A-DB F0
	PUSH	H		;F95C-E5
	LXI	H,TOPMEM	;F95D-21 04 00 *
	XRA	M		;F960-AE
	POP	H		;F961-E1
	XRA	M		;F962-AE
	XTHL			;F963-E3
	ANA	L		;F964-A5
	XTHL			;F965-E3
	JZ	CM1		;F966-CA 87 F9 *
	PUSH	B		;F969-C5
	CALL	COCRLF		;F96A-CD 18 FE *
	CALL	COADR		;F96D-CD 7A FE *
	CALL	COBLK		;F970-CD 11 FD *
	MOV	A,M		;F973-7E
	CALL	COBYT		;F974-CD 82 FE *
	CALL	COBLK		;F977-CD 11 FD *
	IN	UPPD		;F97A-DB F0
	CALL	COBYT		;F97C-CD 82 FE *
	IN	UPPS		;F97F-DB F1
	ANI	002H		;F981-E6 02
	JZ	ERROR		;F983-CA 26 F8 *
	POP	B		;F986-C1
CM1:	INX	B		;F987-03
	CALL	HILO		;F988-CD 6A FE *
	JNC	CM0		;F98B-D2 54 F9 *
	POP	B		;F98E-C1
	RET			;F98F-C9

;***********************************************
;
; DISPLAY MEMORY IN HEX ON CONSOLE DEVICE.
;
; THIS ROUTINE EXPECTS TWO HGEXADECIMAL PARAMETERS SPECIFYING
; THE BOUNDS OF THE MEMORY AREA TO BE DISPLAYED ON THE
; CONSOLE DEVICE.  THE MEMORY AREA IS DISPLAYED 16 BYTES
; PER LINE, WITH THE MEMORY ADDRESS OF THE FIRST BYTE
; PRINTED FOR REFERENCE.  ALL LINES ARE BLOCKED INTO INTEGRAL
; MULTIPLES OF 16 FOR CLARITY, SO THAT THE FIRST AND LAST 
; LINES MAY BE LESS THAN 16 BYTES IN ORDER TO SYNCRONIZE THE
; DISPLAY.
;
DISP:	CALL	EXPR		;GET TWO ARGUMENTS
	POP	D
	POP	H
DI0:	CALL	LOCRLF
	CALL	LOADR
	PUSH    H               ;SAVE START ADDRESS
DI1:	MVI	C,' '           ;PRINT SPACE
	CALL	LOCKBK
	MOV	A,M             ;GET NEXT BYTE
	CALL	LOBYT
	CALL	HILO            ;DONE?
	JC	DI6             ;YES
	MOV	A,L
	ANI	00FH
	JNZ	DI1
DI6:    POP     H               ;RESTORE START ADDRESS
        MVI     C,' '           ;PRINT SPACE
        CALL    LO
        CALL    LO
DI3:    MOV     A,M             ;GET NEXT BYTE
	CPI     07FH            ;DELETE GETS A PERIOD
	JNC     DI4
	CPI	' '             ;SO DOES ANYTHING BELOW SPACE
	JNC	DI5
DI4:	MVI	A,'.'
DI5:	MOV     C,A             ;PRINT CHARACTER
        CALL	LO
        CALL    HILO            ;DONE?
        JC      DI2             ;NO
        MOV     A,L
        ANI     0FH             ;PRINT CR,LF,ADDRESS ON MULTIPLE OF 16
        JNZ     DI3
        JMP     DI0
DI2:	CALL	LOCRLF		;FINAL <CR><LF>
	MVI	C,0
	CALL	LOCKBK
	RET
	
;***********************************************
;
; END OF FILE COMMAND.
;
; THIS ROUTINE PRODUCES A TERMINATION RECORD WHICH PROPERLY
; COMPLETES A HEXADECIMAL FILE CREATED BY 'W' COMMANDS.  IT
; EXPESTS ONE HEXADECIMAL PARAMETER WHICH IS ENCODED IN THE
; TERMINATION RECORD IN THE LOAD ADDRESS FIELD AND SPECIFIES
; THE ENTRY POINT OF THE FILE CREATED.  A SUBSEQUENT 'R' COMMAND
; WILL LOAD THE FILE CREATED AND TRANSFER CONTROL TO THE
; ENTRY POINT SPECIFIED IF IT IS NON-ZERO.
;
EOF:	DCR	C		;GET ONE ARGUMENT
	CALL	EXPR
	CALL	PONIB		;PRINT START OF RECORD ':'
	DB	':'
	XRA	A		;PRINT THE RECORD LENGTH 0
	MOV	D,A
	CALL	POBYT
	POP	H		;PRINT THE RECORD ADDRESS
	CALL	POADR
	MVI	A,1		;PRINT RECORD TYPE 1
	CALL	POBYT
	XRA	A		;PRINT CHECKSUM
	SUB	D
	CALL	POBYT
	RET

;***********************************************
;
; FILL RAM MEMORY BLOCK WITH CONSTANT
;
; THIS ROUTINE EXPECTS THREE HEXADECIMAL PARAMETERS, THE
; FIRST AND SECOND (16 BITS) ARE INTERPRETED AS THE BOUNDS
; OF A MEMORY AREA TO BE INITIALIZED TO A CONSTANT VALUE,
; THE THIRD PARAMETER (8 BITS) IS THAT VALUE.
;
FILL:	INR	C		;GET THREE ARGUMENTS
	CALL	EXPR
	POP	B
	POP	D
	POP	H
FI0:	MOV	M,C		;WRITE A FILL BYTE
	CALL	HILO		;DONE?
	JNC	FI0		;NO, LOOP
	RET

;***********************************************
;
; GO TO <ADDRESS>, OPTIONALLY SET BREAKPOINTS.
;
; THE G COMMAND IS USED FOR TRANSFERING CONTROL FROM THE
; MONITOR TO A USER PROGRAM.  IT HAS SEVERAL MODES OF
; OPERATION.
;
; IF ONE HEXADECIMAL PARAMETER IS ENTERED, IT IS INTERPRETED
; AS THE ENTRY POINT OF THE USER PROGRAM AND A TRANSFER TO
; THAT LOCATION IS EXECUTED.
;
; IF ADDITIONAL (UP TO 2) PARAMETERS ARE ENTERED, THESE ARE
; CONSIDERED 'BREAKPOINTS', I.E., LOCATIONS WHERE
; CONTROL IS TO BE RETURNED TO THE MONITOR, IF THEY ARE
; ENCOUNTERED.
;
; IF THE FIRST PARAMETER IS NOT ENTERED, THE STORED VALUE
; OF THE USER'S PROGRAM COUNTER (REGISTER P) IS USED AS
; THE USER PROGRAM ENTRY POINT.
;
GOTO:	LHLD	TOPMEM		;F9E9-2A 04 00 *
	MVI	L,0D2H		;F9EC-2E D2
	XTHL			;F9EE-E3
	CALL	PCHK		;F9EF-CD F7 FE *
	JZ	GO0		;F9F2-CA 01 FA *
	CALL	PA0		;F9F5-CD A9 FE *
	XCHG			;F9F8-EB
	LHLD	TOPMEM		;F9F9-2A 04 00 *
	MVI	L,0E1H		;F9FC-2E E1
	MOV	M,D		;F9FE-72
	DCX	H		;F9FF-2B
	MOV	M,E		;FA00-73
GO0:	JC	GO4		;FA01-DA 2E FA *
	LXI	D,2		;FA04-11 02 00 *
GO1:	CALL	CONIB		;FA07-CD 47 FD *
	DB	'-'
	CALL	PARAM		;FA0B-CD A3 FE *
	PUSH	H		;FA0E-E5
	INR	D		;FA0F-14
	JC	GO2		;FA10-DA 17 FA *
	DCR	E		;FA13-1D
	JNZ	GO1		;FA14-C2 07 FA *
GO2:	JNC	ERROR		;FA17-D2 26 F8 *
	LHLD	TOPMEM		;FA1A-2A 04 00 *
	MVI	L,0E2H		;FA1D-2E E2
GO3:	POP	B		;FA1F-C1
	MOV	M,C		;FA20-71
	INX	H		;FA21-23
	MOV	M,B		;FA22-70
	INX	H		;FA23-23
	LDAX	B		;FA24-0A
	MOV	M,A		;FA25-77
	INX	H		;FA26-23
	MVI	A,0C7H		;FA27-3E C7
	STAX	B		;FA29-02
	DCR	D		;FA2A-15
	JNZ	GO3		;FA2B-C2 1F FA *
GO4:	CALL	COCRLF		;FA2E-CD 18 FE *
	RET			;FA31-C9

;***********************************************
;
; COMPUTE HEXADECIMAL SUM AND DIFFERENCE
;
; THIS ROUTINE EXPECTS TWO HEXADECIMAL PARAMETERS.
; IT COMPUTS THE SUM AND DIFFERENCE OF THE TWO VALUES
; AND DISPLAYES THEM ON THE CONSOLE DEVICE AS FOLLOWS:
;
; <P1+P2> <P1-P2>
;
HEXSD:	CALL	EXPR		;GET TWO ARGUMENTS
	CALL	COCRLF
	POP	D
	POP	H
	PUSH	H		;ADD THE VALUES
	DAD	D
	CALL	COADR		;PRINT THE SUM
	CALL	COBLK
	POP	H
	MOV	A,L		;SUBTRACT THE VALUES
	SUB	E
	MOV	L,A
	MOV	A,H
	SBB	D
	MOV	H,A
	CALL	COADR		;PRINT THE SUM
	RET

;***************************************************************** 
;
; READ A VALUE FROM A PORT.
;
; THIS ROUTINE EXPECTS ONE HEXADECIMAL PARAMETER, THE PORT NUMBER 
; TO BE READ.
;
INPUT:	DCR     C               ;GET ONE ARGUMENT
        CALL    EXPR
        POP     B
	LXI	H,0C9H	        ;PUSH RETURN CODE ONTO STACK
	PUSH	H
	MOV	H,C             ;PUSH IN CODE AND PORT ONTO STACK
	MVI	L,0DBH
	PUSH	H
	MVI     C,00AH
	CALL    CO
	LXI	H,0             ;EXECUTE IT
	DAD	SP
	CALL	IN0
	POP     H               ;RESTORE STACK
	POP     H
	MOV     C,A
	CALL	COBYT           ;OUTPUT RETURNED VALUE
	RET

IN0:    PCHL

;***********************************************
;
; MOVE A BLOCK OF MEMORY
;
; THIS ROUTINE EXPECTS THREE HEXADECIMAL PARAMETERS FROM THE
; CONSOLE.  THE FIRST AND SECOND PARAMETERS ARE THE BOUNDS OF
; THE MEMORY AREA TO BE MOVED, THE THIRD PARAMETER IS THE
; STARTING ADDRESS OF THE DESTINATION AREA.
;
MOVE:	INR	C		;GET THREE ARGUMENTS
	CALL	EXPR
	POP	B
	POP	D
	POP	H
MV0:	MOV	A,M		;GET A BYTE
	STAX	B		;SAVE A BYTE
	INX	B		;STEP DESTINATION
	CALL	HILO		;DONE?
	JNC	MV0		;NO, LOOP
	RET

;***************************************************************** 
;
; WRITE A VALUE TO A PORT.
;
; THIS ROUTINE EXPECTS TWO HEXADECIMAL PARAMETERS.
; THE FIRST IS THE PORT NUMBER AND THE SECOND THE VALUE TO
; OUTPUT TO THAT PORT
;
OUTPUT: CALL    EXPR            ;GET TWO ARGUMENTS
	POP     D
	POP     B
	MOV     A,E             ;GET VALUE INTO A
	LXI	H,0C9H          ;PUSH RETURN CODE ONTO STACK
	PUSH	H
	MOV	H,C             ;PUSH OUT CODE & PORT ONTO STACK
	MVI	L,0D3H
	PUSH	H
	LXI	H,0             ;EXECUTE IT, OUTPUT WHAT IS IN A
	DAD	SP
	CALL	IN0
	POP     H               ;RESTORE STACK
	POP     H
	RET
	
;***********************************************
;
; PROGRAM A 1702A PROM WITH FAST ALGORITHM.
; (20.48 TO 409.6 SECONDS)
;
; THIS ROUTINE EXPECTS THREE HEXADECIMAL PARAMETERS FROM THE CONSOLE.
; THE FIRST AND SECOND ARE THE BOUNDS OF A MEMORY AREA TO BE
; REPRODUCED IN THE 1702a PROM IN THE FRONT PANEL SOCKET.  THE THIRD
; PARAMETER IS THE ADDRESS IN THE PROM (8 BITS) WHERE THE DUPLICATION
; IS TO COMMENCE.  THE ALGORITHM USED IN THIS ROUTINE TAKES ADVANTAGE
; OF THE FACT THAT MOST PROMS MAY BE PROGRAMMED IN A SMALL FRACTION
; OF THE TIME IT WOULD TAKE UNDER WORST CASE CONDITIONS, THEREFORE
; GREATLY REDUCING PROGRAMMING TIME FOR MOST PROMS.  THE WIDE VARIATION
; IN TIMES QUOTED IS DUE TO THE ALLOWABLE RANGE BETWEEN BEST AND WORST
; CASE PROGRAMMING TIMES.
;
PROG:	CALL	JFF94		;FA9F-CD 94 FF *
	PUSH	B		;FAA2-C5
	MVI	C,3		;GET THREE ARGUMENTS
	CALL	EXPR
	CALL	COCRLF		;FAA8-CD 18 FE *
	POP	B		;FAAB-C1
	POP	D		;FAAC-D1
	POP	H		;FAAD-E1
	MVI	A,15		;FAAE-3E 0F
	ANA	B		;FAB0-A0
	MOV	B,A		;FAB1-47
	POP	PSW		;FAB2-F1
	ORA	B		;FAB3-B0
	MOV	B,A		;FAB4-47
PR0:	MOV	A,B		;FAB5-78
	OUT	UPPS		;FAB6-D3 F1
	MOV	A,C		;FAB8-79
	OUT	UPPA		;FAB9-D3 F2
	INX	B		;FABB-03
	LDA	TOPMEM		;FABC-3A 04 00 *
	XRA	M		;FABF-AE
	OUT	UPPD		;FAC0-D3 F0
PR1:	IN	UPPS		;FAC2-DB F1
	ANI	001H		;FAC4-E6 01
	JNZ	PR1		;FAC6-C2 C2 FA *
	IN	UPPS		;FAC9-DB F1
	ANI	002H		;FACB-E6 02
	JZ	PR2		;FACD-CA D7 FA *
	CALL	HILO		;FAD0-CD 6A FE *
	JNC	PR0		;FAD3-D2 B5 FA *
	RET			;FAD6-C9
PR2:	CALL	COADR		;FAD7-CD 7A FE *
	JMP	ERROR		;FADA-C3 26 F8 *

;***********************************************
;
; QUERY ROUTINE.
;
; THIS COMMAND IS INVOKED BY TYPING THE LETTER Q. THIS
; COMMAND PRODUCES A LISTING OF LOGICAL I/O DEVICES AND
; THEIR CORRESPONDING PHYSICAL DEVICE ASSIGNMENTS. THE
; DATA DISPLAYED IS EQUIVALENT TO THE CURRENT VALUE OF IOBYT.
;
QUERY:	CALL	TI		;HAS TO END IN <CR>
	CPI	CR
	JNZ	ERROR
	MVI	B,4		;4 IOBYTE ENTRIES
	LXI	H,IOTBL		;IO TABLE ADDRESS
QU0:	CALL	COCRLF		;START WITH <CR><LF>
	MOV	C,M		;GET FIRST TABLE ENTRY
	CALL	COCKBK		;BREAK?
	CALL	CONIB		;PRINT '='
	DB	'='
	INX	H		;STEP INTO TABLE
	MOV	A,M		;GET SECOND TABLE ENTRY
	CMA                     ;COMPLEMENT MASK
	MOV	C,A             ;SAVE MASK
	INX	H		;STEP INTO TABLE
	MOV	E,M		;GET THIRD TABLE ENTRY
	INX	H		;STEP INTO TABLE
	MOV	D,M		;GET FORTH TABLE ENTRY
	INX	H		;STEP INTO TABLE
	XCHG
	LDA	IOBYT		;GET IOBYTE
	ANA	C		;MASK OUT OTHER BITS
	PUSH	B
	MVI	B,4		;4 SELECTIONS FOR EACH DEVICE
QU1:	MOV	C,M
	INX	H		;STEP INTO TABLE
	CMP	M               ;THIS THE ONE?
	JZ	QU2             ;YES
	INX	H		;STEP INTO TABLE
	DCR	B		;DONE?
	JNZ	QU1		;NO, LOOP
QU2:	CALL	COCKBK		;BREAK?
	XCHG
	POP	B
	DCR	B		;DONE?
	JNZ	QU0		;NO, LOOP
	RET
	
;***********************************************
;
; READ ROUTINE.
;
; THIS ROUIINE READS A HEXADECIMAL FILE FROM THE ASSIGNED
; READER DEVICE AND LOADS IT INTO MEMORY. ONE HEXADECIMAL
; PARAMETER IS EXPECTED. THIS PARAMETER IS A BIAS ADDRESS
; TO BE ADDED TO THE MEMORY ADDRES5 OF EACH DATA BYTE ENCOUNTERED.
; IN THIS WAY, HEXADECIMAL FILES MAY BE LOADED INTO MEMORY
; IN AREAS OTHER THAN THAT FOR WHICH THEY WERE ASSEMBLED OR COMPILED.
; ALL RECORDS READ ARE CHECKSUMMED AND COMPARED AGAINST THE
; CHECKSUM IN THE RECORD. IF A CHECKSUM ERROR (OR TAPE READ ERROR)
; OCCURS, THE ROUTINE TAKES AN ERROR EXIT. NORMAL LOADING IS
; TERMINATED WHEN A RECORD OF LENGTH 0 IS ENCOUNTERED. THIS IS
; INTERPRETED AS AN END OF FILE RECORD AND THE LOAD ADDRESS
; FIELD OF THAT RECURD IS TAKEN TO BE THE ENTRY POINT OF THE
; PROGRAM (IF IT IS NON-ZERO).
;
READ:	DCR	C		;GET ONE ARGUMENT
	CALL	EXPR
	CALL	COCRLF
RED0:	CALL	GETRIN		;GET A CHARACTER FROM READER
	CPI	':'		;START OF RECORD?
	JNZ	RED0		;NO, LOOP
	XRA	A		;CLEAR CHECKSUM
	MOV	D,A
	CALL	RIBYT		;GET RECORD LENGTH
	JZ	RIADR
	MOV	E,A
	CALL	RIBYT		;GET HIGH ADDRESS BYTE
	MOV	H,A
	CALL	RIBYT		;GET LOW ADDRESS BYTE
	MOV	L,A
	CALL	RIBYT		;GET RECORD TYPE
	MOV	C,E
	PUSH	H		;SAVE LOAD ADDRESS
	LXI	H,0FF00H        ;GET BUFFER ADDRESS
	DAD	SP
RED1:	CALL	RIBYT		;GET DATA BYTE
	MOV	M,A		;STORE IN BUFFER
	INX	H		;STEP BUFFER POINTER
	DCR	E		;DONE?
	JNZ	RED1		;NO, LOOP
	CALL	RIBYT		;GET CHECKSUM BYTE
	JNZ	ERROR		;BAD CHECKSUM
	POP	D		;RESTORE LOAD ADDRESS
	XTHL                    ;CALCULATE END OF LOAD AREA
	XCHG
	DAD	D
	MVI	B,0
	DAD	B
	XCHG
	XTHL
RED2:	DCX	H		;STEP POINTER
	MOV	A,M		;GET BYTE FROM BUFFER
	DCX	D		;STEP POINTER
	STAX	D		;SAVE AT LOAD ADDRESS
	DCR	C		;DONE?
	JNZ	RED2		;NO, LOOP
	JMP	RED0		;NEXT RECORD

RIADR:	LHLD	TOPMEM		;GET RESTART ADDRESS
	MVI	L,0E1H
	CALL	RIBYT		;GET HIGH START ADDRESS BYTE
	MOV	M,A             ;SAVE IT
	DCX	H		;STEP POINTER
	CALL	RIBYT		;GET HIGH START ADDRESS BYTE
	MOV	M,A		;SAVE IT
	POP	H		;RESTORE H
	RET

;***********************************************
;
; SUBSTITUTE MEMORY CONTENTS ROUTINE.
;
; THIS ROUTINE EXPECTS ONE PARAMETER FROM THE CONSOLE, FOLLOWED
; BY A SPACE. THE PARAMETER IS INTERPRETED AS A MEMORY LOCATION
; AND THE ROUTINE WILL DISPLAY THE CONTENTS OR THAT LOCATION,
; FOLLOWED BY A DASH (-). TO MODIFY MEMORY, TYPE IN THE NEW DATA
; FOLLOWED BY A SPACE OR A CARRIAGE RETURN. IF NO MODIFICATION
; OF THE LOCATION IS REQUIRED, TYPE ONLY A SPACE OR CARRIAGE RETURN.
; IF A SPACE WAS LAST TYPED, THE NEXT MEMORY LOCATION WILL BE DISPLAYED
; AND MODIFICATION OF IT IS ALLOWED. IF A CARRIAGE RETURN WAS ENTERED,
; THE COMMAND IS TERMINATED.
;
SUBS:	CALL	PARAM		;GET MEMORY ADDRESS
	RC			;DONE IF 0
SU0:	MOV	A,M		;GET BYTE FROM MEMORY
	CALL	COBYT		;PRINT BYTE
	CALL	CONIB		;PRINT '-'
	DB	'-'
	CALL	PCHK		;CHECK FOR VALID INPUT
	RC			;DONE
	JZ	SU1		;VALID NON-DIGIT
	XCHG
	CALL	PA0		;GET A BYTE
	XCHG
	MOV	M,E		;STORE IT
	RC			;DONE
SU1:	INX	H		;STEP ADDRESS
	JMP	SU0		;LOOP
	
;***********************************************
;
; TRANSFER CONTENTS OF A PROM TO MEMORY.
;
; THIS ROUTINE EXPECTS ONE HEXADECIMAL PARAMETER WHICH
; IT INTERPRETS AS THE LOCATION IN MEMORY WHERE A COPY OF THE
; PROM IN THE FRONT PANEL IS TO BE STORED.  THIS COPY IS ALWAYS
; 256 BYTES IN LENGTH.
;
TRAN:	CALL	JFF94		;FB95-CD 94 FF *
	MVI	C,0		;FB98-0E 00
	PUSH	B		;FB9A-C5
	MVI	C,2		;GET TWO ARGUMENTS
	CALL	EXPR
	POP	D		;FBA0-D1
	POP	H		;FBA1-E1
	POP	B		;FBA2-C1
TR0:	MOV	A,B		;FBA3-78
	OUT	UPPS		;FBA4-D3 F1
	MOV	A,C		;FBA6-79
	OUT	UPPA		;FBA7-D3 F2
	INX	B		;FBA9-03
	IN	UPPD		;FBAA-DB F0
	PUSH	H		;FBAC-E5
	LXI	H,TOPMEM	;FBAD-21 04 00 *
	XRA	M		;FBB0-AE
	POP	H		;FBB1-E1
	MOV	M,A		;FBB2-77
	IN	UPPS		;FBB3-DB F1
	ANI	002H		;FBB5-E6 02
	JZ	ERROR		;FBB7-CA 26 F8 *
	CALL	HILO		;FBBA-CD 6A FE *
	JNC	TR0		;FBBD-D2 A3 FB *
	RET			;FBC0-C9

;***********************************************
;
; WRITE ROUTINE.
;
; THIS ROUTINE EXPECTS TWO HEXADECIMAL PARAMETERS WHICH ARE
; INTERPRETED AS THE BOUNDS OF A MEMORY AREA TO BE ENCODED
; INTO HEXADECIMAL FORMAT AND PUNCHED ON THE ASSIGNED PUNCH
; DEVICE.
;
WRITE:	CALL	EXPR		;GET TWO ARGUMENTS
	CALL	COCRLF		;FBC4-CD 18 FE *
	POP	D		;FBC7-D1
	POP	H		;FBC8-E1
WRI0:	CALL	PONIB		;FBC9-CD 4E FD *
	DB	':'
	LXI	B,32		;FBCD-01 10 00 *
	PUSH	H		;FBD0-E5
WRI1:	INR	B		;FBD1-04
	DCR	C		;FBD2-0D
	JZ	WRI2		;FBD3-CA DC FB *
	CALL	HILO		;FBD6-CD 6A FE *
	JNC	WRI1		;FBD9-D2 D1 FB *
WRI2:	POP	H		;FBDC-E1
	PUSH	D		;FBDD-D5
	MVI	D,0		;FBDE-16 00
	MOV	A,B		;FBE0-78
	CALL	POBYT		;FBE1-CD E1 FE *
	CALL	POADR		;FBE4-CD D9 FE *
	XRA	A		;FBE7-AF
	CALL	POBYT		;FBE8-CD E1 FE *
WRI3:	MOV	A,M		;FBEB-7E
	CALL	POBYT		;FBEC-CD E1 FE *
	INX	H		;FBEF-23
	DCR	B		;FBF0-05
	JNZ	WRI3		;FBF1-C2 EB FB *
	XRA	A		;FBF4-AF
	SUB	D		;FBF5-92
	CALL	POBYT		;FBF6-CD E1 FE *
	POP	D		;FBF9-D1
	DCX	H		;FBFA-2B
	CALL	POCRLF		;FBFB-CD 06 FF *
	CALL	HILO		;FBFE-CD 6A FE *
	JNC	WRI0		;FC01-D2 C9 FB *
	RET			;FC04-C9

;***********************************************
;
; EXAMINE AND MODIFY CPU REGISTERS
;
; THIS ROUTINE ALLOWS THE OPERATOR TO EXAMINE AND/OR MODIFY
; THE CONTENTS OF THE USER PROGRAM'S REGISTERS.  THE REGISTER
; VALUES WERE STORED AS A RESULT OF A PREVIOUS BREAKPOINT AND
; WILL BE RESTORED TO THE USER PROGRAM DURING A SUBSEQUENT 'G'
; COMMAND.
;
X:	LXI	H,REGTBL	;FC05-21 60 FC *
	CALL	PCHK		;FC08-CD F7 FE *
	JC	X5		;FC0B-DA 49 FC *
	MVI	C,00CH		;FC0E-0E 0C
X0:	CMP	M		;FC10-BE
	JZ	X1		;FC11-CA 1E FC *
	INX	H		;FC14-23
	INX	H		;FC15-23
	INX	H		;FC16-23
	DCR	C		;FC17-0D
	JNZ	X0		;FC18-C2 10 FC *
	JMP	ERROR		;FC1B-C3 26 F8 *
X1:	CALL	COBLK		;FC1E-CD 11 FD *
X2:	CALL	DREG		;FC21-CD 43 FE *
	CALL	CONIB		;FC24-CD 47 FD *
	DB	'-'
	CALL	PCHK		;FC28-CD F7 FE *
	RC			;FC2B-D8
	JZ	X4		;FC2C-CA 3F FC *
	PUSH	H		;FC2F-E5
	PUSH	B		;FC30-C5
	CALL	PA0		;FC31-CD A9 FE *
	MOV	A,L		;FC34-7D
	STAX	D		;FC35-12
	POP	PSW		;FC36-F1
	ORA	A		;FC37-B7
	JM	X3		;FC38-FA 3E FC *
	INX	D		;FC3B-13
	MOV	A,H		;FC3C-7C
	STAX	D		;FC3D-12
X3:	POP	H		;FC3E-E1
X4:	XRA	A		;FC3F-AF
	ORA	M		;FC40-B6
	RM			;FC41-F8
	MOV	A,B		;FC42-78
	CPI	CR		;FC43-FE 0D
	RZ			;FC45-C8
	JMP	X2		;FC46-C3 21 FC *
X5:	CALL	COCRLF		;FC49-CD 18 FE *
X6:	CALL	COBLK		;FC4C-CD 11 FD *
	XRA	A		;FC4F-AF
	ORA	M		;FC50-B6
	RM			;FC51-F8
	MOV	C,M		;FC52-4E
	CALL	COCKBK		;FC53-CD 13 FD *
	CALL	CONIB		;FC56-CD 47 FD *
	DB	'='
	CALL	DREG		;FC5A-CD 43 FE *
	JMP	X6		;FC5D-C3 4C FC *
	
;***********************************************
;
; TABLE FOR ACCESSING REGISTERS
; TABLE CONTAINS:
;   (1) REGISTER IDENTIFIER
;   (2) STACK POINTER DISPLACEMENT
;   (3) PRECISION
;
REGTBL:	DB	'A', 0CFH, 000H
        DB      'B', 0CBH, 000H
        DB      'C', 0CAH, 000H
        DB      'D', 0C9H, 000H
        DB      'E', 0C8H, 000H
        DB      'F', 0CEH, 000H
        DB      'H', 0DDH, 000H
        DB      'I', 0CDH, 000H
	DB	'L', 0DCH, 000H
	DB      'M', 0DDH, 001H
	DB      'P', 0E1H, 001H
	DB      'S', 0D1H, 001H
	DB      0FFH

;***********************************************
;
; SUBROUTINES.

;***********************************************
;
; CONSOLE INPUT CODE, VALUE RETURNED IN A
; A, FLAGS MODIFIED
; STACK USAGE: 2 BYTES
;
CI:	LDA	IOBYT		;FC85-3A 03 00 *
	ANI	CMSK		;FC88-E6 03
	JNZ	CI1		;FC8A-C2 97 FC *
CI0:	IN	TTYS		;FC8D-DB F5
	ANI	002H		;FC8F-E6 02
	JZ	CI0		;FC91-CA 8D FC *
	IN	TTYD		;FC94-DB F4
	RET			;FC96-C9
CI1:	CPI	001H		;FC97-FE 01
	JNZ	CI3		;FC99-C2 A6 FC *
CI2:	IN	CRTS		;FC9C-DB F7
	ANI	002H		;FC9E-E6 02
	JZ	CI2		;FCA0-CA 9C FC *
	IN	CRTD		;FCA3-DB F6
	RET			;FCA5-C9
CI3:	CPI	002H		;FCA6-FE 02
	JZ	RI		;FCA8-CA B8 FC *
	MVI	A,0E8H		;FCAB-3E E8
	JMP	SETBUF		;FCAD-C3 0A FD *
	
;***********************************************
;
; GET CONSOLE INPUT IF AVAILABLE
; Z = 1, NO CHAR AVAILABLE
; Z = 0, CHAR IN A
;
GETCON:	CALL	CIST		;FCB0-CD A4 FD *
	ORA	A		;FCB3-B7
	RZ			;FCB4-C8
	JMP	TI		;FCB5-C3 C7 FF *

;***********************************************
;
; READER INPUT CODE
; VALUE RETURNED IN A, A, AND FLAGS MODIFIED
; STACK USAGE: 8 BYTES
;
RI:	PUSH	H		;FCB8-E5
	LXI	H,IOBYT		;FCB9-21 03 00 *
	MOV	A,M		;FCBC-7E
	ANI	RMSK		;FCBD-E6 0C
	JNZ	RI3		;FCBF-C2 DF FC *
	MVI	A,002H		;FCC2-3E 02
	OUT	DBBS		;FCC4-D3 F9
	MVI	H,0FAH		;FCC6-26 FA
RI0:	IN	TTYS		;FCC8-DB F5
	ANI	002H		;FCCA-E6 02
	JNZ	RI2		;FCCC-C2 DA FC *
	CALL	WATBSW		;FCCF-CD 3B FE *
	DCR	H		;FCD2-25
	JNZ	RI0		;FCD3-C2 C8 FC *
RI1:	XRA	A		;FCD6-AF
	STC			;FCD7-37
	POP	H		;FCD8-E1
	RET			;FCD9-C9
RI2:	IN	TTYD		;FCDA-DB F4
	ORA	A		;FCDC-B7
	POP	H		;FCDD-E1
	RET			;FCDE-C9
RI3:	CPI	004H		;FCDF-FE 04
	JNZ	RI6		;FCE1-C2 00 FD *
	MVI	A,008H		;FCE4-3E 08
	OUT	DBBS		;FCE6-D3 F9
	MVI	H,0FAH		;FCE8-26 FA
RI4:	IN	DBBS		;FCEA-DB F9
	ANI	001H		;FCEC-E6 01
	JNZ	RI5		;FCEE-C2 FB FC *
	CALL	WATBSW		;FCF1-CD 3B FE *
	DCR	H		;FCF4-25
	JNZ	RI4		;FCF5-C2 EA FC *
	JMP	RI1		;FCF8-C3 D6 FC *
RI5:	IN	DBBD		;FCFB-DB F8
	ORA	A		;FCFD-B7
	POP	H		;FCFE-E1
	RET			;FCFF-C9
RI6:	POP	H		;FD00-E1
	CPI	008H		;FD01-FE 08
	MVI	A,0EEH		;FD03-3E EE
	JZ	SETBUF		;FD05-CA 0A FD *
	MVI	A,0F1H		;FD08-3E F1
	
;***********************************************
; 
; SETBUF - SET BUFFER IN TOPMEM + A
;          RETURN ADDRESS ON STACK
;
SETBUF:	PUSH	H		;FD0A-E5
	LHLD	TOPMEM		;FD0B-2A 04 00 *
	MOV	L,A		;FD0E-6F
	XTHL			;FD0F-E3
	RET			;FD10-C9
	
;***********************************************
; 
; BLK - OUTPUT A SPACE
;
COBLK:	MVI	C,' '		;FD11-0E 20

;***********************************************
;
; COCKBK - CHECK FOR BREAK WHILE CONSOLE OUTPUT
;
COCKBK:	LDA	IOBYT		;FD13-3A 03 00 *
	ANI	CMSK		;FD16-E6 03
	CPI	002H		;FD18-FE 02
	CNZ	GETCON		;FD1A-C4 B0 FC *

;***********************************************
; 
; CONSOLE OUTPUT CODE. VALUE EXPECTED IN C
; A, FLAGS, C MODIFIED
; STACK USAGE: 2 BYTES
;
CO:	LDA	IOBYT		;FD1D-3A 03 00 *
	ANI	CMSK		;FD20-E6 03
	JNZ	CO1		;FD22-C2 30 FD *
CO0:	IN	TTYS		;FD25-DB F5
	ANI	001H		;FD27-E6 01
	JZ	CO0		;FD29-CA 25 FD *
	MOV	A,C		;FD2C-79
	OUT	TTYD		;FD2D-D3 F4
	RET			;FD2F-C9
CO1:	CPI	002H		;FD30-FE 02
	JZ	LO		;FD32-CA 84 FD *
	CPI	001H		;FD35-FE 01
	MVI	A,0EBH		;FD37-3E EB
	JNZ	SETBUF		;FD39-C2 0A FD *
CO2:	IN	CRTS		;FD3C-DB F7
	ANI	001H		;FD3E-E6 01
	JZ	CO2		;FD40-CA 3C FD *
	MOV	A,C		;FD43-79
	OUT	CRTD		;FD44-D3 F6
	RET			;FD46-C9
	
;***********************************************
; CONIB - OUTPUT NEXT INSTRUCTION BYTE TO CONSOLE
;
CONIB:	XTHL			;FD47-E3
	MOV	C,M		;FD48-4E
	INX	H		;FD49-23
	XTHL			;FD4A-E3
	JMP	COCKBK		;FD4B-C3 13 FD *
	
;***********************************************
; PONIB - OUTPUT NEXT INSTRUCTION BYTE TO PUNCH
;
PONIB:	XTHL			;FD4E-E3
	MOV	C,M		;FD4F-4E
	INX	H		;FD50-23
	XTHL			;FD51-E3

;***********************************************
;
; PUNCH OUTPUT CODE, VALUE EXPECTED IN C
; A, FLAGS, AND C MODIFIED
; STACK USAGE: 2 BYTES
;
PO:	LDA	IOBYT		;FD52-3A 03 00 *
	ANI	PMSK		;FD55-E6 30
	JZ	CO0		;FD57-CA 25 FD *
	CPI	010H		;FD5A-FE 10
	JNZ	PO1		;FD5C-C2 6E FD *
PO0:	IN	DBBS		;FD5F-DB F9
	ANI	004H		;FD61-E6 04
	JZ	PO0		;FD63-CA 5F FD *
	MOV	A,C		;FD66-79
	OUT	DBBD		;FD67-D3 F8
	MVI	A,020H		;FD69-3E 20
	OUT	DBBS		;FD6B-D3 F9
	RET			;FD6D-C9
PO1:	CPI	020H		;FD6E-FE 20
	MVI	A,0F4H		;FD70-3E F4
	JZ	SETBUF		;FD72-CA 0A FD *
	MVI	A,0F7H		;FD75-3E F7
	JMP	SETBUF		;FD77-C3 0A FD *

;***********************************************
;
; LOCKBK - CHECK FOR BREAK WHILE PRINTING
;
LOCKBK:	LDA	IOBYT		;FD7A-3A 03 00 *
	ANI	CMSK		;FD7D-E6 03
	CPI	002H		;FD7F-FE 02
	CNZ	GETCON		;FD81-C4 B0 FC *

;***********************************************
; 
; LIST OUTPUT CODE
; VALUE EXPECTED IN C, A AND FLAGS MODIFIED
; STACK USAGE: 2 BYTES
;
LO:	LDA	IOBYT		;FD84-3A 03 00 *
	ANI	LMSK		;FD87-E6 C0
	JZ	CO0		;FD89-CA 25 FD *
	CPI	040H		;FD8C-FE 40
	JZ	CO2		;FD8E-CA 3C FD *
	CPI	0C0H		;FD91-FE C0
	MVI	A,0FAH		;FD93-3E FA
	JZ	SETBUF		;FD95-CA 0A FD *
LO0:	IN	LPTS		;FD98-DB FB
	ANI	001H		;FD9A-E6 01
	JZ	LO0		;FD9C-CA 98 FD *
	MOV	A,C		;FD9F-79
	CMA			;FDA0-2F
	OUT	LPTD		;FDA1-D3 FA
	RET			;FDA3-C9

;***********************************************
; 
; CONSOLE INPUT STATUS CODE
; A, FLAGS MODIFIED
; STACK USAGE: 2 BYTES
;
CIST:	LDA	IOBYT		;FDA4-3A 03 00 *
	ANI	CMSK		;FDA7-E6 03
	JNZ	CS0		;FDA9-C2 B1 FD *
	IN	TTYS		;FDAC-DB F5
	JMP	CS1		;FDAE-C3 B8 FD *
CS0:	CPI	001H		;FDB1-FE 01
	JNZ	CS3		;FDB3-C2 BF FD *
	IN	CRTS		;FDB6-DB F7
CS1:	ANI	002H		;FDB8-E6 02
	MVI	A,000H		;FDBA-3E 00
CS2:	RZ			;FDBC-C8
	CMA			;FDBD-2F
	RET			;FDBE-C9
CS3:	CPI	002H		;FDBF-FE 02
	MVI	A,0FFH		;FDC1-3E FF
	JZ	CS2		;FDC3-CA BC FD *
	MVI	A,0FDH		;FDC6-3E FD
	JMP	SETBUF		;FDC8-C3 0A FD *

;***********************************************
; 
; I/O SYSTEM STATUS CODE
; STATUS BYTE RETURNED IN A
; STACK USAGE: 2 BYTES
;
IOCHK:	LDA	IOBYT		;FDCB-3A 03 00 *
	RET			;FDCE-C9

;***********************************************
; 
; SET I/O CONFIGURATION
; VALUE EXPECTED IN C
; STACK USAGE: 2 BYTES
;
IOSET:	MOV	A,C		;FDCF-79
	STA	IOBYT		;FDD0-32 03 00 *
	RET			;FDD3-C9

;***********************************************
; 
; RETURN ADDRESS OF END OF MEMORY TO USER
; VALUE RETURNED IN BC
; STACK USAGE: 8 BYTES
;
;
MEMCK:	LDA	TOPMEM+1	;FDD4-3A 05 00 *
	DCR	A		;FDD7-3D
	MOV	B,A		;FDD8-47
	MVI	A,0C0H		;FDD9-3E C0
	RET			;FDDB-C9
	
;***********************************************
; 
; DEFINE USER I/O ENTRY POINTS 
;
IODEF:	PUSH	H		;FDDC-E5
	PUSH	B		;FDDD-C5
	LHLD	TOPMEM		;FDDE-2A 04 00 *
	MVI	L,0E9H		;FDE1-2E E9
	MOV	A,C		;FDE3-79
	CPI	008H		;FDE4-FE 08
	JNC	ERROR		;FDE6-D2 26 F8 *
	ADD	C		;FDE9-81
	ADD	C		;FDEA-81
	MOV	C,A		;FDEB-4F
	MVI	B,0     	;FDEC-06 00
	DAD	B		;FDEE-09
	MOV	M,E		;FDEF-73
	INX	H		;FDF0-23
	MOV	M,D		;FDF1-72
	POP	B		;FDF2-C1
	POP	H		;FDF3-E1
	RET			;FDF4-C9
	
;***********************************************
; 
; RIBYT - GET TWO ASCII CHARS FROM READER AND
; CONVERT TO ONE BYTE
;
RIBYT:	PUSH	B		;FDF5-C5
	CALL	GETRIN		;FDF6-CD 8B FF *
	CALL	RICONV		;FDF9-CD C7 FE *
	RLC			;FDFC-07
	RLC			;FDFD-07
	RLC			;FDFE-07
	RLC			;FDFF-07
	MOV	C,A		;FE00-4F
	CALL	GETRIN		;FE01-CD 8B FF *
	CALL	RICONV		;FE04-CD C7 FE *
	ORA	C		;FE07-B1
	MOV	C,A		;FE08-4F
	ADD	D		;FE09-82
	MOV	D,A		;FE0A-57
	MOV	A,C		;FE0B-79
	POP	B		;FE0C-C1
	RET			;FE0D-C9

;***********************************************
;
; CONVERT 4 BIT HEX VALUE TO ASCII CHARACTER
; INPUT = 0...0FH
; OUTPUT = '0...9, A-F'
; 
CONV:	ANI	00FH		;FE0E-E6 0F
	ADI	090H		;FE10-C6 90
	DAA			;FE12-27
	ACI	040H		;FE13-CE 40
	DAA			;FE15-27
	MOV	C,A		;FE16-4F
	RET			;FE17-C9

;***********************************************
; 
; COCRLF - OUTPUT CR/LF TO CONSOLE
;
COCRLF:	CALL	CONIB		;FE18-CD 47 FD *
	DB      CR		;FE1B-0D
	CALL	CONIB		;FE1C-CD 47 FD *
	DB      LF		;FE1F-0A
	RET			;FE20-C9

;***********************************************
;
; LOADR - OUTPUT ADDR IN HL IN HEX ON PRINTER
;
LOADR:	MOV	A,H		;FE21-7C
	CALL	LOBYT		;FE22-CD 29 FE *
	MOV	A,L		;FE25-7D
	JMP	LOBYT		;FE26-C3 29 FE *

;***********************************************
; 
; LOBYT - OUTPUT A BYTE IN A IN HEX ON PRINTER
;
LOBYT:	PUSH	PSW		;FE29-F5
	RRC			;FE2A-0F
	RRC			;FE2B-0F
	RRC			;FE2C-0F
	RRC			;FE2D-0F
	CALL	CONV		;FE2E-CD 0E FE *
	CALL	LOCKBK		;FE31-CD 7A FD *
	POP	PSW		;FE34-F1
	CALL	CONV		;FE35-CD 0E FE *
	JMP	LOCKBK		;FE38-C3 7A FD *

;***********************************************
;
; WATBSW - WAIT FOR BOOT SWITCH
;
WATBSW:
; REMOVED UNTIL THE BOOT SWITCH IS IMPLEMENTED IN THE SIMULATOR
;	IN	CPUC		;FE3B-DB FF
;	ANI	001H		;FE3D-E6 01
;	JZ	WATBSW		;FE3F-CA 3B FE *
	RET			;FE42-C9
	
;***********************************************
;
; DISPLAY THE CONTENTS OF A USER REGISTER
;
DREG:	INX	H		;FE43-23
	MOV	E,M		;FE44-5E
	LDA	TOPMEM+1	;FE45-3A 05 00 *
	MOV	D,A		;FE48-57
	INX	H		;FE49-23
	MOV	B,M		;FE4A-46
	INX	H		;FE4B-23
	LDAX	D		;FE4C-1A
	CALL	COBYT		;FE4D-CD 82 FE *
	DCR	B		;FE50-05
	RM			;FE51-F8
	DCX	D		;FE52-1B
	LDAX	D		;FE53-1A
	JMP	COBYT		;FE54-C3 82 FE *

;***********************************************
;
; EVALUATE EXPRESSION: <EXPR>,<EXPR>,<EXPR>
;
; THE C REGISTER CONTAINS THE NUMBER OF PARAMETERS REQUIRED
; (1, 2, OR 3).  PARAMETERS ARE RETURNED ON THE STACK
;
EXPR:	CALL	PARAM		;FE57-CD A3 FE *
	XTHL			;FE5A-E3
	PUSH	H		;FE5B-E5
	DCR	C		;FE5C-0D
	JNC	EX0		;FE5D-D2 64 FE *
	JNZ	ERROR		;FE60-C2 26 F8 *
	RET			;FE63-C9
EX0:	JNZ	EXPR		;FE64-C2 57 FE *
	JMP	ERROR		;FE67-C3 26 F8 *

;***********************************************
;
; COMPARE HL WITH DE:
; IF HL < DE THEN CARRY = 0;
; IF HL = DE THEN CARRY = 0;
; IF HL > DE THEN CARRY = 1;
;
HILO:	INX	H		;FE6A-23
	MOV	A,H		;FE6B-7C
	ORA	L		;FE6C-B5
	STC			;FE6D-37
	RZ			;FE6E-C8
	MOV	A,E		;FE6F-7B
	SUB	L		;FE70-95
	MOV	A,D		;FE71-7A
	SBB	H		;FE72-9C
	RET			;FE73-C9
	
;***********************************************
; 
; COCRLF - OUTPUT CR/LF TO CONSOLE
;
COBYT1:	CALL	CONV		;FE74-CD 0E FE *
	JMP	COCKBK		;FE77-C3 13 FD *
	
;***********************************************
; 
; COADR - OUTPUT ADDR IN HL AS HEX TO CONSOLE
;
COADR:	MOV	A,H		;FE7A-7C
	CALL	COBYT		;FE7B-CD 82 FE *
	MOV	A,L		;FE7E-7D
	JMP	COBYT		;FE7F-C3 82 FE *
	
;***********************************************
; 
; COBYT - OUTPUT BYTE IN A AS HEX TO CONSOLE
;
COBYT:	PUSH	PSW		;FE82-F5
	RRC			;FE83-0F
	RRC			;FE84-0F
	RRC			;FE85-0F
	RRC			;FE86-0F
	CALL	COBYT1		;FE87-CD 74 FE *
	POP	PSW		;FE8A-F1
	JMP	COBYT1		;FE8B-C3 74 FE *

;***********************************************
; 
; LOCRLF - OUTPUT CR/LF TO PRINTER
;
LOCRLF:	MVI	C,CR		;FE8E-0E 0D
	CALL	LOCKBK		;FE90-CD 7A FD *
	MVI	C,LF		;FE93-0E 0A
	JMP	LOCKBK		;FE95-C3 7A FD *

;***********************************************
; 
; PUNCH 6 INCHES OF LEADER
;
LEAD:	MVI	B,60		;FE98-06 3C
LE0:	CALL	PONIB		;FE9A-CD 4E FD *
	DB	0
	DCR	B		;FE9E-05
	JNZ	LE0		;FE9F-C2 9A FE *
	RET			;FEA2-C9
	
;***********************************************
; 
; COLLECT A HEXADECIMAL PARAMETER
;
PARAM:	CALL	PCHK		;FEA3-CD F7 FE *
	JZ	ERROR		;FEA6-CA 26 F8 *
PA0:	LXI	H,0		;FEA9-21 00 00 *
PA1:	MOV	B,A		;FEAC-47
	CALL	RICONV		;FEAD-CD C7 FE *
	JC	PA2		;FEB0-DA BF FE *
	DAD	H		;FEB3-29
	DAD	H		;FEB4-29
	DAD	H		;FEB5-29
	DAD	H		;FEB6-29
	ORA	L		;FEB7-B5
	MOV	L,A		;FEB8-6F
	CALL	TI		;FEB9-CD C7 FF *
	JMP	PA1		;FEBC-C3 AC FE *
PA2:	MOV	A,B		;FEBF-78
	CALL	P2C		;FEC0-CD FA FE *
	JNZ	ERROR		;FEC3-C2 26 F8 *
	RET			;FEC6-C9

;***********************************************
; 
; RICONV - CONVERT HEX NIBBLE IN A TO BINARY IN A
;
RICONV:	SUI	030H		;FEC7-D6 30
	RC			;FEC9-D8
	ADI	0E9H		;FECA-C6 E9
	RC			;FECC-D8
	ADI	006H		;FECD-C6 06
	JP	RIC0		;FECF-F2 D5 FE *
	ADI	007H		;FED2-C6 07
	RC			;FED4-D8
RIC0:	ADI	00AH		;FED5-C6 0A
	ORA	A		;FED7-B7
	RET			;FED8-C9
	
;***********************************************
;
; POADR - OUTPUT ADDR IN HL AS HEX TO PUNCH
;
POADR:	MOV	A,H		;FED9-7C
	CALL	POBYT		;FEDA-CD E1 FE *
	MOV	A,L		;FEDD-7D
;***	JMP	POBYT		;FEDE-C3 E1 FE *
	
;***********************************************
;
; POBYT - OUTPUT BYTE IN A AS HEX TO PUNCH
;
POBYT:	MOV	E,A		;FEE1-5F
	RRC			;FEE2-0F
	RRC			;FEE3-0F
	RRC			;FEE4-0F
	RRC			;FEE5-0F
	CALL	CONV		;FEE6-CD 0E FE *
	CALL	PO		;FEE9-CD 52 FD *
	MOV	A,E		;FEEC-7B
	CALL	CONV		;FEED-CD 0E FE *
	CALL	PO		;FEF0-CD 52 FD *
	MOV	A,E		;FEF3-7B
	ADD	D		;FEF4-82
	MOV	D,A		;FEF5-57
	RET			;FEF6-C9

;***********************************************
;
; TEST FOR NULL INPUT PARAMETER
;
PCHK:	CALL	TI		;FEF7-CD C7 FF *
P2C:	CPI	' '		;FEFA-FE 20
	RZ			;FEFC-C8
	CPI	','		;FEFD-FE 2C
	RZ			;FEFF-C8
	CPI	'-'		;FEFD-FE 2C
	RZ			;FEFF-C8
	CPI	CR		;FF00-FE 0D
	STC			;FF02-37
	RZ			;FF03-C8
	CMC			;FF04-3F
	RET			;FF05-C9

;***********************************************
;
; PUNCH CR, LF
;
POCRLF:	CALL	PONIB		;FF06-CD 4E FD *
	DB      CR		;FF09-0D
	CALL	PONIB		;FF0A-CD 4E FD *
	DB      LF		;FF0D-0A
	RET			;FF0E-C9

;***********************************************
;
; RESTART 1 CODE, (PROGRAMMED BREAKPOINT)
;
; THIS ROUTINE IS ENTERED VIA AND RESTART 1 (RST 1) INSTRUCTION
; THE INSTRUCTION IS ENCOUNTERED EITHER IN THE USER PROGRAM (AS
; A BREAKPOINT) OR IS INPUT VIA A CONSOLE INTERRUPT.  THIS
; ROUTINE SAVES THE STATE OF THE CALLING PROCESS AND TURNS CONTROL
; OVER TO THE MONITOR.
;
RESTART:DI			;FF0F-F3
	PUSH	H		;FF10-E5
	PUSH	D		;FF11-D5
	PUSH	B		;FF12-C5
	PUSH	PSW		;FF13-F5
	POP	H		;FF14-E1
	IN	0FCH		;FF15-DB FC
	PUSH	PSW		;FF17-F5
	PUSH	H		;FF18-E5
	MVI	A,0FEH		;FF19-3E FE
	OUT	0FCH		;FF1B-D3 FC
	LHLD	TOPMEM		;FF1D-2A 04 00 *
	MVI	L,0D2H		;FF20-2E D2
	XCHG			;FF22-EB
	LXI	H,12    	;FF23-21 0C 00 *
	DAD	SP		;FF26-39
	MVI	B,5		;FF27-06 05
	XCHG			;FF29-EB
RST0:	DCX	H		;FF2A-2B
	MOV	M,D		;FF2B-72
	DCX	H		;FF2C-2B
	MOV	M,E		;FF2D-73
	POP	D		;FF2E-D1
	DCR	B		;FF2F-05
	JNZ	RST0		;FF30-C2 2A FF *
	POP	B		;FF33-C1
	DCX	B		;FF34-0B
	SPHL			;FF35-F9
	LHLD	TOPMEM		;FF36-2A 04 00 *
	MVI	L,0E2H		;FF39-2E E2
	MOV	A,M		;FF3B-7E
	SUB	C		;FF3C-91
	INX	H		;FF3D-23
	JNZ	RST1		;FF3E-C2 46 FF *
	MOV	A,M		;FF41-7E
	SBB	B		;FF42-98
	JZ	RST3		;FF43-CA 58 FF *
RST1:	INX	H		;FF46-23
	INX	H		;FF47-23
	MOV	A,M		;FF48-7E
	SUB	C		;FF49-91
	INX	H		;FF4A-23
	JNZ	RST2		;FF4B-C2 53 FF *
	MOV	A,M		;FF4E-7E
	SBB	B		;FF4F-98
	JZ	RST3		;FF50-CA 58 FF *
RST2:	MVI	A,020H		;FF53-3E 20
	OUT	0FDH		;FF55-D3 FD
	INX	B		;FF57-03
RST3:	LHLD	TOPMEM		;FF58-2A 04 00 *
	MVI	L,0DCH		;FF5B-2E DC
	MOV	M,E		;FF5D-73
	INX	H		;FF5E-23
	MOV	M,D		;FF5F-72
	MVI	L,0E0H		;FF60-2E E0
	MOV	M,C		;FF62-71
	INX	H		;FF63-23
	MOV	M,B		;FF64-70
	PUSH	B		;FF65-C5
	CALL	CONIB		;FF66-CD 47 FD *
	DB	'#'
	POP	H		;FF6A-E1
	CALL	COADR		;FF6B-CD 7A FE *
	LHLD	TOPMEM		;FF6E-2A 04 00 *
	MVI	L,0E2H		;FF71-2E E2
	MVI	D,2		;FF73-16 02
RST4:	MOV	C,M		;FF75-4E
	XRA	A		;FF76-AF
	MOV	M,A		;FF77-77
	INX	H		;FF78-23
	MOV	B,M		;FF79-46
	MOV	M,A		;FF7A-77
	INX	H		;FF7B-23
	MOV	A,C		;FF7C-79
	ORA	B		;FF7D-B0
	JZ	RST5		;FF7E-CA 83 FF *
	MOV	A,M		;FF81-7E
	STAX	B		;FF82-02
RST5:	INX	H		;FF83-23
	DCR	D		;FF84-15
	JNZ	RST4		;FF85-C2 75 FF *
	JMP	START		;FF88-C3 30 F8 *
	
;***********************************************
;
; GETRIN - GET CHAR FROM READER
; STRIP PARITY
;
GETRIN:	CALL	RI		;FF8B-CD B8 FC *
	JC	ERROR		;FF8E-DA 26 F8 *
	ANI	07FH		;FF91-E6 7F
	RET			;FF93-C9
	
;************
JFF94:	IN	UPPS		;FF94-DB F1
	ORA	A		;FF96-B7
	JZ	ERROR		;FF97-CA 26 F8 *
	CALL	TI		;FF9A-CD C7 FF *
	CPI	'T'		;FF9D-FE 54
	JNZ	JFFA6		;FF9F-C2 A6 FF *
	XRA	A		;FFA2-AF
	JMP	JFFAD		;FFA3-C3 AD FF *
JFFA6:	CPI	'F'		;FFA6-FE 46
	JNZ	ERROR		;FFA8-C2 26 F8 *
	MVI	A,0FFH		;FFAB-3E FF
JFFAD:	STA	TOPMEM		;FFAD-32 04 00 *
	CALL	TI		;FFB0-CD C7 FF *
	SUI	'X'		;FFB3-D6 58
	LXI	B,X00FF		;FFB5-01 FF 00 *
	RZ			;FFB8-C8
	DCR	A		;FFB9-3D
	LXI	B,X30F0		;FFBA-01 F0 30 *
	RZ			;FFBD-C8
	DCR	A		;FFBE-3D
	JNZ	ERROR		;FFBF-C2 26 F8 *
	LXI	B,X200F		;FFC2-01 0F 20 *
	RET			;FFC5-C9
	
;************
JFFC6:	RET			;FFC6-C9

;***********************************************
; 
; INPUT FROM CONSOLE, ECHOED AND RETURNED IN A
; CHECK FOR CTL-C AND STOP OPERATION
;
TI:	PUSH	B		;FFC7-C5
	CALL	CI		;FFC8-CD 85 FC *
	ANI	07FH		;FFCB-E6 7F
	CALL	UC		;FFCD-CD DC FF *
	CPI	CTLC		;FFD0-FE 03
	JZ	ERROR		;FFD2-CA 26 F8 *
	MOV	C,A		;FFD5-4F
	CALL	CO		;FFD6-CD 1D FD *
	MOV	A,C		;FFD9-79
	POP	B		;FFDA-C1
	RET			;FFDB-C9
	
;***********************************************
; 
; CONVERT CHARACTER IN A-REG FROM LOWER CASE TO UPPER CASE
;
UC:	CPI	'a'		;FFDC-FE 61
	RM			;FFDE-F8
	CPI	'{'		;FFDF-FE 7B
	RP			;FFE1-F0
	ANI	0DFH		;FFE2-E6 DF
	RET			;FFE4-C9
	
;************
	DB      023H		;FFE5-23

	END
