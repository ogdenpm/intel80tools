$       TITLE   ('INTELLEC/MDS MONITOR, VERSION 1.1, 1974')
;
X0000	EQU	00000H		;0
X0002	EQU	00002H		;2
X000C	EQU	0000CH		;12
X0010	EQU	00010H		;16
X00FF	EQU	000FFH		;255
X200F	EQU	0200FH		;8207
X30F0	EQU	030F0H		;12528

;           INTELLEC8/MOD 80 MONITOR Version 1.1
;
;           COPYRIGHT (C) 1973, 1974
;           INTEL CORPORATION
;           3065 BOWERS AVENUE
;           SANTA CLARA, CALIFORNIA 95051
;
; NOTE: PUNCH AND LOAD ROUTINES ARE REMOVED FROM THIS MONITOR 
; TO FREE UP SPACE FOR I AND O COMMANDS

; <LEGAL COMMAND> ::= <ASSIGN I/O COMMAND>
;                     <COMPARE COMMAND>
;                     <DISPLAY MEMORY COMMAND>
;                     <ENDFILE COMMAND>
;                     <FILL MEMORY COMMAND>
;                     <PROGRAM EXECUTE COMMAND>
;                     <HEXADECIMAL ARITHMETIC COMMAND>
;                     <INPUT PORT COMMAND>
;                     <MOVE MEMORY COMMAND>
;                     <LEADER COMMAND>
;                     <OUTPUT PORT COMMAND>
;                     <PROGRAM COMMAND>
;                     <QUERY I/O COMAND>
;                     <READ HEXADECIMAL FILE COMMAND>
;                     <SUBSTITUTE MEMORY COMMAND>
;                     <TRANSFER COMMAND>
;                     <WRITE HEXADECIMAL RECORD COMMAND>
;                     <REGISTER MODIFY COMMAND>
; <ASSIGN I/O COMMAND> ::= A<LOGICAL DEVICE>=<PHYSICAL DEVICE>
; <COMPARE COMMAND> ::= C<NUMBER>
; <DISPLAY MEMORY COMMAND> ::= D<NUMBER>,<NUMBER>
; <ENDFILE COMMAND> ::= E<NUMBER>
; <FILL MEMORY COMMAND> ::= F<NUMBER>,<NUMBER>,<NUMBER>
; <PROGRAM EXECUTE COMMAND> ::= G<NUMBER>,<NUMBER>,<NUMBER>
; <HEXADECIMAL ARITHMETIC COMMAND> ::= H<NUMBER>,<NUMBER>
; <INPUT PORT COMMAND> ::= I<NUMBER>
; <MOVE MEMORY COMMAND> ::= M<NUMBER>,<NUMBER>,<NUMBER>
; <LEADER COMMAND> ::= N
; <OUTPUT PORT COMMAND> ::= O<NUMBER>,<NUMBER>
; <PROGRAM COMMAND> ::= P<NUMBER>,<NUMBER>,<NUMBER>
; <QUERY I/O COMMAND> ::= Q
; <READ HEXADECIMAL FILE COMMAND> ::= R<NUMBER>
; <SUBSTITUTE MEMORY COMMAND> ::= S<NUMBER>
; <TRANSFER COMMAND> ::= T<NUMBER>
; <WRITE HEXADECIMAL RECORD COMMAND> ::= W<NUMBER>,<NUMBER>
; <REGISTER MODIFY COMMAND> ::= X<REGISTER IDENTIFIER.
; <LOGICAL DEVICE> ::= CONSOLE!READER!LIST!PUNCH
; <PHYSICAL DEVICE> ::= CRT!TTY!PTR!PTP!BATCH!1!2
; <REGISTER IDENTIFIER> ::= A!B!C!D!E!F!H!L!M!P!S
; <NUMBER> ::= <HEX DIGIT>
;              <NUMBER><HEX DIGIT>
; <HEX DIGIT> ::= 0!1!2!3!4!5!6!7!8!9!A!B!C!D!E!F
;
; SYSTEM SIGNS ON WITH <CR><LF><.>
;
VER     EQU     11              ;VERSION 1.1
DATE    EQU     2608H           ;26 AUG 75
;
;NOTE:
;
;THE DATE SHOWN ABOVE IS ENCODED IN A TWO BYTE FIELD
;IN BOTH THE BOOTSTRAP PROM AND THE MONITOR ROM IN ORDER
;TO CONTROL NEW RELEASES OF THIS PROGRAM.
;
;IN THE BOOTSTRAP PROM, THE DATE CODE IS LOCATED AT
;ADDRESSES 4 AND 5.
;
;IN THE MONITOR ROM, THE DATE CODE IS LOCATED AT ADDRESSES
;0F824H AND 0F825H.
;
;IF AND WHEN A NEW RELEASE IS ISSUED, PLEASE CHANGE 
;THE DATE CODE.
;
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;
; INTELLEC/MDS SYSTEM CONSTANTS
;
; TTY AND CRT STATUS BITS
;
TRDY    EQU     00000001B       ;TRANSMIT READY
RBR     EQU     00000010B       ;RECEIVE BUFFER READY
TBE     EQU     00000100B       ;TRANSMIT EMPTY
RPAR    EQU     00001000B       ;RECEIVE PARITY ERROR
ROV     EQU     00010000B       ;RECEIVE OVERRUN ERROR
RFR     EQU     00100000B       ;RECEIVE FRAMING ERROR
DSR     EQU     10000000B       ;DATA SET READY
;
; TTY AND CRT INITIALIZATION CONTROLS
;
R48@1   EQU     00000010B       ;4800 BAUD @ JUMPER 1
R96@1   EQU     00000001B       ;9600 BAUD @ JUMPER 1
R24@1   EQU     00000011B       ;2400 BAUD @ JUMJPER 1
R6@2    EQU     00000010B       ;600 BAUD @ JUMPER 2
R12@2   EQU     00000001B       ;1200 BAUD @ JUMPER 2
R3@2    EQU     00000011B       ;300 BAUD @ JUMPER 2
R110    EQU     00000010B       ;110 BAUD @ JUMPER 3
CL7     EQU     00001000B       ;CHARACTER LENGTH = 7
CL8     EQU     00001100B       ;CHARACTER LENGTH = 8
CL6     EQU     00000100B       ;CHARACTER LENGTH = 6
CL5     EQU     00000000B       ;CHARACTER LENGTH = 5
ST1     EQU     01000000B       ;1 STOP BIT
ST15    EQU     10000000B       ;1.5 STOP BITS
ST2     EQU     11000000B       ;2 STOP BITS
PENB    EQU     00010000B       ;PARITY ENABLE
PEVEN   EQU     00100000B       ;EVEN PARITY
TXEN    EQU     00000001B       ;TRANSMIT ENABLE
DTR     EQU     00000010B       ;DATA TERMINAL READY
RXEN    EQU     00000100B       ;RECEIVE ENABLE
CLERR   EQU     00010000B       ;CLEAR ERROR
USRST   EQU     01000000B       ;USART RESET
RTS     EQU     00100000B       ;REQUEST TO SEND
;
; PTR, PTP, AND TTY READER CONTROLS
;
PTPREV  EQU     00010000B       ;PUNCH REVERSE DIRECTION
PTPADV  EQU     00100000B       ;PUNCH ADVANCE
PTRREV  EQU     00000100B       ;READ REVERSE DIRECTION
PTRADV  EQU     00001000B       ;READER ADVANCE
TTYADV  EQU     00000010B       ;TTY ADVANCE
;
; LPT, PTR, AND PTP STATUS BITS
;
LPTRY   EQU     00000001B       ;LPT READY
PTRDY   EQU     00000001B       ;PTR READY WITH DATA
PTPRY   EQU     00000100B       ;PTP READY FOR DATA
;
; TTY I/O CONSTANTS
;
TTI     EQU     0F4H            ;TTY INPUT DATA PORT
TTO     EQU     0F4H            ;TTY OUTPUT DATA PORT
TTS     EQU     0F5H            ;TTY INPUT STATUS PORT
TTC     EQU     0F5H            ;TTY OUTPUT CONTROL PORT
;
; CRT I/O CONSTANTS
;
CRTI    EQU     0F6H            ;CRT INPUT DATA PORT
CRTS    EQU     0F7H            ;CRT INPUT STATUS PORT
CRTO    EQU     0F6H            ;CRT OUTPUT DATA PORT 
CRTC    EQU     0F7H            ;CRT OUTPUT COMMAND PORT     
;
; PTR I/O CONSTANTS
;
PTRI    EQU     0F8H            ;PTR INPUT DATA PORT
PTRS    EQU     0F9H            ;PTR INPUT STATUS PORT
PTRC    EQU     0F9H            ;PTR OUTPUT COMMAND PORT
;
; PTP I/O CONSTANTS
;
PTPO    EQU     0F8H            ;PTP OUTPUT DATA PORT
PTPS    EQU     0F9H            ;PTP INPUT STATUS PORT
PTPC    EQU     0F9H            ;PTP OUTPUT COMMAND PORT
;
; LPT I/O CONSTANTS
;
LPTO    EQU     0FAH            ;LPT OUTPUT DATA PORT
LPTS    EQU     0FBH            ;LPT INPUT STATUS PORT   
LPTC    EQU     0FBH            ;LPT OUTPUT COMMAND PORT  
;
; REAL TIME CLOCK CONSTANTS
; EACH TICK = 1.0 MS
;
RTC     EQU     0FFH            ;REAL TIME CLOCK PORT
RTCS    EQU     00000001B       ;REAL TIME CLOCK STATUS
BOOT    EQU     00000010B       ;BOOTSTRAP MODE INDICATOR, 1 = ON
;
; PROGRAMMER I/0 CONSTANTS
;
PHI     EQU     0F1H            ;PROM COMMAND AND MSB ADDRESS BITS
PLO     EQU     0F2H            ;PROM ADDRESS BITS (8 LSB)
PDATA   EQU     0F0H            ;PROM DATA PORT
PSTAT   EQU     0F1H            ;PROM STATUS PORT
PCOMP   EQU     00000010B       ;PROGRAMMING COMPLETE
PGRDY   EQU     00000001B       ;PROM READY
PSOCK   EQU     00100000B       ;16 PIN SOCKET SELECTED
PNIB    EQU     00010000B       ;SELECT UPPER NIBBLE
;
; FDCC CONSTANTS
;
LOWW    EQU     79H             ;LOWW(IOPB)
HI      EQU     7AH             ;HIGH(IOPB)
DSTAT   EQU     78H             ;DISK STATUS
TRK0    EQU     3000H           ;FIRST ADDRESS OF DISK BOOTSTRAP
;
; CONDITIONAL ASSEMBLY SWITCHES
;
FALSE   EQU     0
TRUE    EQU     NOT FALSE
DEBUG   EQU     FALSE
;
; GLOBAL CONSTANTS
;
TOUT    EQU     250             ;250 MS. COUNTER FOR READER TIMEOUT
CR      EQU     0DH             ;ASCII VALUE OF CARRIAGE RETURN
LF      EQU     0AH             ;ASCII VALUE OF LINE FEED
ETX     EQU     03H             ;MONITOR BREAK CHARACTER (CTL-C)
;
; I/O STATUS BYTE MASKS AND VALUES
;
CMSK    EQU     11111100B       ;MASK FOR CONSOLE I/O
RMSK    EQU     11110011B       ;MASK FOR READER INPUT
PMSK    EQU     11001111B       ;MASK FOR PUNCH OUTPUT
LMSK    EQU     00111111B       ;MASK FOR LIST OUTPUT
;
CTTY    EQU     00000000B       ;CONSOLE I/O = TTY
CCRT    EQU     00000001B       ;CONSOLE I/O = CRT
BATCH   EQU     00000010B       ;BATCH MODE,
                                ;INPUT = READER, OUTPUT = LIST
CUSE    EQU     00000011B       ;USER DEFINED CONSOLE I/O
RTTY    EQU     00000000B       ;READER = TTY
RPTR    EQU     00000100B       ;READER = PTR
RUSE1   EQU     00001000B       ;USER DEFINED READER (1)
RUSE2   EQU     00001100B       ;USER DEFINED READER (2)
PTTY    EQU     00000000B       ;PUNCH = TTY
PPTP    EQU     00010000B       ;PUNCH = PTP
PUSE1   EQU     00100000B       ;USER DEFINED PUNCH (1)
PUSE2   EQU     00110000B       ;USER DEFINED PUNCH (2)
LTTY    EQU     00000000B       ;LIST = TTY
LCRT    EQU     01000000B       ;LIST = CRT
LLPT    EQU     10000000B       ;LIST = LPT
LUSE    EQU     11000000B       ;USER DEFINED LIST
;
;INTERRUPT SYSTEM MASKS AND VALUES
;
INT0    EQU     00000001B       ;MASK FOR INTERRUPT LEVEL 0
INT1    EQU     00000010B
INT2    EQU     00000100B
INT3    EQU     00001000B
INT4    EQU     00010000B
INT5    EQU     00100000B
INT6    EQU     01000000B
INT7    EQU     10000000B
;
MASK    EQU     0FCH            ;MASK PORT
REVRT   EQU     0FDH            ;INTERRUPT REVERT
LOCK    EQU     0FEH            ;BUS OVERRIDE
ISTAT   EQU     0FAH            ;INTERRUPT STATUS PORT
ICON    EQU     0F3H            ;INTERRUPT CONTROL PORT
EOI     EQU     00100000B       ;END OF INTERRUPT
;
; INTERRUPT STATUS AND CONTROL BITS
;
ITTYO   EQU     00000001B       ;OUTPUT TTY
ITTYI   EQU     00000010B       ;INPUT TTY
IPTP    EQU     00000100B       ;PTP
IPTR    EQU     00001000B       ;PTR
ICRTO   EQU     00010000B       ;OUTPUT CRT
ICRTI   EQU     00100000B       ;INPUT CRT
ILPT    EQU     01000000B       ;LPT
MENB    EQU     10000000B       ;ENABLE MONITOR INTERRUPTS
;
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;
; PAGE 0 DEDICATED RAM LOCATIONS, INITIALIZED BY SHADOW PROM CODE.
        ORG     0
RESET:
        DS      3               ;TRAP TO MONITOR RESTART
IOBYT:
        DS      1               ;I/O SYSTEM STATUS BYTE
MSK:                            ;PROM PROGRAMMING T/F FLAG
MEMTOP:
        DS      2               ;TOP OF RAM, ONLY H SAVED
INITIO:
        DS      1               ;INITIAL I/O CONFIGURATION
ORFLG:
        DS      4
OPFLG:
        DS      1
OLFLG:
        DS      1
RRFLG:
        DS      1
CPFLG:
        DS      1
CLFLG:
        DS      1
;
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;
; MACRO DEFINITIONS
;
FETCH   MACRO   VALUE           ;FETCH AN ADDRESS IN THE STACK
        LXI     H,VALUE
        DAD     SP
        ENDM
;
GET     MACRO   VALUE           ;COMPUTE RAM ADDRESS BASED ON STACK
        LHLD    MEMTOP
        MVI     L,VALUE AND 0FFH
        ENDM
;
WHILE   MACRO   CHAR            ;SCAN INPUT WILE EQUAL
        LOCAL   LOOP
LOOP:
        CALL    TI
        CPI     CHAR
        JZ      LOOP
        ENDM
;
UNTIL   MACRO   CHAR            ;SCAN INPUT UNTIL EQUAL
        LOCAL   LOOP
LOOP:
        CALL    TI
        CPI     CHAR
        JNZ     LOOP
        ENDM
;
SIZE    MACRO                   ;FIND TOP OF MEMORY
        LOCAL   LOOP
        LXI     H,0             ;INITIAL VALUE
LOOP:   INR     H
        MOV     A,M             ;FETCH CONTENTS OF MEMORY
        CMP                     ;INVERT IT
        MOV     M,A             ;ATTEMPT TO WRITE INTO MEMORY
        CMP     M               ;IS LOCATION READ/WRITE?
        CMP                     ;INVERT AGAIN
        MOV     M,A             ;WRITE DATA BACK
        JZ      LOOP            ;YES, CONTINUE
        DCX     H               ;LAST ADDRESS IN RAM
        SHLD    MEMTOP          ;STORE TOP OF MEMORY
        ENDM
;
; CASE BRANCH MACRO
; INPUT PARAMETERS:
; REGISTER A - CASE INDEX 0...N
; PARAMETER 1 - ADDRESS OF BRANCH TABLE
; PARAMETER 2- LENGTH OF BRANCH TABLE
; USES REGISTERS A, D, E, H, L
;
CASE    MACRO   TABLE, RANGE
        LXI     H,TABLE
        CPI     RANGE           ;TEST FOR OVERRUN
        JP      ERROR
        MOV     E,A             ;MOVE INDEX TO DE
        MVI     D,0
        DAD     D               ;ADD BASE + 2 * INDEX => HL
        DAD     D
        MOV     A,M             ;GET LSB OF BRANCH LOCATION
        INX     H
        MOV     H,M             ;GET MSB OF BRANCH LOCATION
        MOV     L,A
        PCHL
        ENDM
;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-***-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
;
;EXIT CODE TEMPLATE, TO BE EXECUTED IN RAM
;THIS CODE IS ORIGINATED SO AS TO BE ALIGNED
;AGAINST THE TOP OF A PAGE (1 PAGE = 256 BYTES)
;
TOS     EQU     0EAC8H          ;BASE OF MONITOR WORK STACK
USERX   EQU     TOS-8           ;BASE OF DEFAULT USER WORK STACK
ELOC    EQU     0EAC8H          ;E REGISTER STORAGE
DLOC    EQU     0EAC9H          ;D REGISTER
CLOC    EQU     0EACAH          ;C REGISTER
BLOC    EQU     0EACBH          ;B REGISTER
ILOC    EQU     0EACDH          ;INTERRUPT MASK
FLOC    EQU     0EACEH          ;CPU FLAGS
ALOC    EQU     0EACFH          ;A REGISTER
SLOC    EQU     0EAD1H          ;HIGH(SP)
EXIT    EQU     0EAD2H          ;MONITOR STACK ORIGIN
LLOC    EQU     0EADCH
HLOC    EQU     0EADDH
PLOC    EQU     0EAE1H
TLOC    EQU     0EAE2H          ;TRAP 1 ADDRESS
XTBL    EQU     0EAE8H          ;EXTENSIBLE I/O ENTRY POINTS
                                ;  FILLED IN WHEN USER GIVES ADDRESS OF OWN
                                ;  DRIVER ROUTINE VIA IODEF SYSTEM CALL IN MONITOR
CILOC   EQU     0EAE8H 
COLOC   EQU     0EAEBH 
R1LOC   EQU     0EAEEH 
R2LOC   EQU     0EAF1H 
P1LOC   EQU     0EAF4H
P2LOC   EQU     0EAF7H 
L1LOC   EQU     0EAFAH 
CSLOC   EQU     0EAFDH
ENDX    EQU     0EA00H          ;THIS LABEL SHOULD BE AT 0EA00H.

;*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
;SELECTION CODES FOR USER I/O ENTRY POINTS
UCI     EQU     (CILOC-XTBL)/3
UCO     EQU     (COLOC-XTBL)/3
UR1     EQU     (R1LOC-XTBL)/3
UR2     EQU     (R2LOC-XTBL)/3
UP1     EQU     (P1LOC-XTBL)/3
UP2     EQU     (P2LOC-XTBL)/3
UL1     EQU     (L1LOC-XTBL)/3
UCS     EQU     (CSLOC-XTBL)/3
;END OF BOOTSTRAP PROM CODE
;
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;
; COMPUTE BASE ADDRESS OF MONITOR PROPER
;
BASE    SET     0F800H          ;BASE ADDRESS OF MONITOR
                                ;TOP 2K OF ADDRESS SPACE
        IF      DEBUG
BASE    SET     800H            ;DEBUG IN RAM
        ENDIF
        
SBASE   SET     0
;
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;*-*-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*-*-*-*-*-*-*-•-*-*-*-*-*
;
; START OF MONITOR PROPER
;
	ORG	BASE
;
; BRANCH TABLE FOR I/O SYSTEM
;
	JMP	START		;F800-C3 30 F8 *
	JMP	CI		;F803-C3 85 FC *
	JMP	RI		;F806-C3 B8 FC *
	JMP	CO		;F809-C3 1D FD *
	JMP	PO		;F80C-C3 52 FD *
	JMP	LO		;F80F-C3 84 FD *
	JMP	CSTS		;F812-C3 A4 FD *
	JMP	IOCHK		;F815-C3 CB FD *
	JMP	IOSET		;F818-C3 CF FD *
	JMP	MEMCK		;F81B-C3 D4 FD *
	JMP	IODEF		;F81E-C3 DC FD *
	JMP	SPCL		;F821-C3 C6 FF *
	DW	DATE
	ORG     0F847H
        JMP     RESTART
        JMP     TTYOUT
        JMP     CRTOUT
        
;***********************************************
;
; ERROR EXIT.
;
; THIS ABNORMAL EXIT IS EXECUTED FOR ALL MONITOR ERROR CONDITIONS.
; THE STACK POINTER VALUE IS RECOMPUTED BECAUSE OF THE UNKNOWN STATE
; OF THE PROCESSOR AS A RESULT OF A COMMAND OR DATA ERROR.
;
ERROR:	GET     TOS		;F826-2A 04 00 *
	SPHL			;F82B-F9
	CALL	COMC		;F82C-CD 47 FD *
	DB	'#'
        JMP     START1
;***********************************************
;
; PROGRAM ENTRY POINT.
;
; COMPUTE THE TOP OF RAM MEMORY AVAILABLE IN THIS SYSTEM
; AND LOCATE THE USER REGISTER SAVE AREA, EXIT TEMPLATE, AND
; MONITOR STACK AT THE TOP OF RAM.
;
START:	;IN	RTC		;F830-DB FF
	;ANI	BOOT		;F832-E6 02
	;JNZ	START		;F834-C2 30 F8 *
        MVI     A,004H          ;DISABLE BOOT, I.E. SWITCH BOOT PROM
        OUT     0FFH            ;  OUT OF ADDRESSABLE MEMORY SPACE
START1:	EI			;F837-FB
	CALL	CRLF		;F838-CD 18 FE *
	CALL	COMC		;F83B-CD 47 FD *
	DB	'.'
	CALL	TI		;F83F-CD C7 FF *
	SUI	'A'		;F842-D6 41
	JM	START		;F844-FA 30 F8 *
	MVI	C,2		;F847-0E 02
	LXI	D,START1	;F849-11 30 F8 *
	PUSH	D		;F84C-D5
	CASE    CTBL,LCT

;***********************************************
; COMMAND BRANCH TABLE
;
; THIS TABLE CONTAINS THE ADDRESSES OF THE ENTRY POINTS OF
; ALL THE COMMAND PROCESSING ROUTINES.  NOTE THAT AN ENTRY TO 'LER'
; IS AN ERROR CONDITION, I.E., NO COMMAND CORRESPONDING TO THAT
; CHARACTER EXISTS.
;
CTBL:	DW	ASSIGN		;F85F-8F F8 *
	DW	ERROR		;F861-0C F9 *
	DW	COMP		;F863-45 F9 *
	DW	DISP		;F865-90 F9 *
	DW	EOF		;F867-BC F9 *
	DW	FILL		;F869-DA F9 *
	DW	GOTO		;F86B-E9 F9 *
	DW	HEXN		;F86D-32 FA *
	DW	INPUT		;F86F-26 F8 *
	DW	ERROR		;F871-26 F8 *
	DW	ERROR		;F873-26 F8 *
	DW	ERROR		;F875-4D FA *
	DW	MOVE		;F877-7E FA *
	DW	NULL		;F879-8F FA *
	DW	OUTPUT		;F87B-26 F8 *
	DW	PROG		;F87D-9F FA *
	DW	QUERY		;F87F-DD FA *
	DW	READ		;F881-1B FB *
	DW	SUBS		;F883-77 FB *
	DW	TRAN		;F885-95 FB *
	DW	ERROR		;F887-26 F8 *
	DW	ERROR		;F889-26 F8 *
	DW	WRITE		;F88B-C1 FB *
	DW	X		;F88D-05 FC *
LCT     EQU     ($-CTBL)/2
;
;***********************************************
;
; PROCESS I/O DEVICE ASSIGNMENT COMMANDS
;
; THIS ROUTINE MAPS SYMBOLIC DEVICE IDENTIFIERS TO BITS
; IN THE I/O STATUS BYTE (IOBYT) TO ALLOW FOR CONSOLE
; MODIFICATION OF SYSTEM I/O CONFIGURATION
;
ASSIGN:	CALL	TI		;F88F-CD C7 FF *
	LXI	H,LTBL		;F892-21 DC F8 *
	MVI	C,4		;F895-0E 04
AS0:	CMP	M		;F897-BE
	INX	H		;F898-23
	JZ	AS1		;F899-CA A6 F8 *
	INX	H		;F89C-23
	INX	H		;F89D-23
	INX	H		;F89E-23
	DCR	C		;F89F-0D
	JNZ	AS0		;F8A0-C2 97 F8 *
	JMP	ERROR		;F8A3-C3 26 F8 *
AS1:	MOV	B,M		;F8A6-46
	INX	H		;F8A7-23
	MOV	E,M		;F8A8-5E
	INX	H		;F8A9-23
	MOV	D,M		;F8AA-56
	XCHG
	UNTIL   '='		;F8AB-EB
	WHILE   020H
	MVI	C,4		;F8BC-0E 04
AS2:	CMP	M		;F8BE-BE
	INX	H		;F8BF-23
	JZ	AS3		;F8C0-CA CB F8 *
	INX	H		;F8C3-23
	DCR	C		;F8C4-0D
	JNZ	AS2		;F8C5-C2 BE F8 *
	JMP	ERROR		;F8C8-C3 26 F8 *
AS3:	UNTIL   CR
	LDA	IOBYT		;F8D3-3A 03 00 *
	ANA	B		;F8D6-A0
	ORA	M		;F8D7-B6
	STA	IOBYT		;F8D8-32 03 00 *
	RET			;F8DB-C9

;***********************************************
;
; MASTER I/O DEVICE TABLE
; 4 BYTES/ENTRY
;
;   BYTE 0 = IDENTIFYING CHARACTER
;   BYTE 1 = LOGICAL DEVICE MASK
;   BYTE 2,3 = SUBORDINATE PHYSICAL DEVICE TABLE
;
LTBL:	DB	'C', CMSK
        DW      ACT
        DB      'R', RMSK
        DW      ART
	DB	'P', PMSK
	DW      APT
	DB      'L', LMSK
	DW      ALT

;***********************************************
;
; I/O SYSTEM PHYSICAL DEVICE TABLES
; 2 BYTES/ENTRY
;
;   BYTE 0 = IDENTIFYING CHARACTER
;   BYTE 1 = DEVICE SELECT BIT PATTERN
;
ACT:	DB	'T', CTTY
        DB      'C', CCRT
        DB      'B', BATCH
        DB      '1', CUSE
ART:	DB	'T', RTTY
        DB      'P', RPTR
        DB      '1', RUSE1
        DB      '2', RUSE2
APT:	DB	'T', PTTY
        DB      'P', PPTP
        DB      '1', PUSE1
        DB      '2', PUSE2
ALT:	DB	'T', LTTY
        DB      'C', LCRT
        DB      'L', LLPT
        DB      '1', LUSE

;***********************************************
;
; COMPARE PROM WITH MEMORY
;
; THIS ROUTINE EXPECTS ONE HEXADECIMAL PARAMETER WHICH
; IT INTERPRETS AS A MEMORY ADDRESS.  THE ROUTINE
; COMPARES THE PROM IN THE FRONT PANEL SOCKET WITH A
; 256 BYTE AREA OF MEMORY POINTED TO BY THE INPUT PARAMETER.
; ALL DIFFERENCES BETWEEN THE PROM AND THE MEMORY AREA
; ARE DISPLAYED IN THE FOLLOWING FORMAT:
;
; <MEM ADDRESS> <MEM CONTENTS> <CORRESPONDING PROM CONTENTS>
;
COMP:	CALL	SELECT		;F945-CD 94 FF *
	PUSH	B		;F948-C5
	MVI	C,2		;F949-0E 02
	CALL	EXPR		;F94B-CD 57 FE *
	POP	D		;F94E-D1
	POP	H		;F94F-E1
	POP	B		;F950-C1
	PUSH	B		;F951-C5
	MVI	C,0		;F952-0E 00
CM0:	MOV	A,B		;F954-78
	OUT	PHI		;F955-D3 F1
	MOV	A,C		;F957-79
	OUT	PLO		;F958-D3 F2
	IN	PDATA		;F95A-DB F0
	PUSH	H		;F95C-E5
	LXI	H,MSK   	;F95D-21 04 00 *
	XRA	M		;F960-AE
	POP	H		;F961-E1
	XRA	M		;F962-AE
	XTHL			;F963-E3
	ANA	L		;F964-A5
	XTHL			;F965-E3
	JZ	CM1		;F966-CA 87 F9 *
	PUSH	B		;F969-C5
	CALL	CRLF		;F96A-CD 18 FE *
	CALL	LADR		;F96D-CD 7A FE *
	CALL	BLK		;F970-CD 11 FD *
	MOV	A,M		;F973-7E
	CALL	LBYTE		;F974-CD 82 FE *
	CALL	BLK		;F977-CD 11 FD *
	IN	PDATA		;F97A-DB F0
	CALL	LBYTE		;F97C-CD 82 FE *
	IN	PSTAT		;F97F-DB F1
	ANI	PCOMP		;F981-E6 02
	JZ	ERROR		;F983-CA 26 F8 *
	POP	B		;F986-C1
CM1:	INX	B		;F987-03
	CALL	HILO		;F988-CD 6A FE *
	JNC	CM0		;F98B-D2 54 F9 *
	POP	B		;F98E-C1
	RET			;F98F-C9

;***********************************************
;
; DISPLAY MEMORY IN HEX ON CONSOLE DEVICE.
;
; THIS ROUTINE EXPECTS TWO HGEXADECIMAL PARAMETERS SPECIFYING
; THE BOUNDS OF THE MEMORY AREA TO BE DISPLAYED ON THE
; CONSOLE DEVICE.  THE MEMORY AREA IS DISPLAYED 16 BYTES
; PER LINE, WITH THE MEMORY ADDRESS OF THE FIRST BYTE
; PRINTED FOR REFERENCE.  ALL LINES ARE BLOCKED INTO INTEGRAL
; MULTIPLES OF 16 FOR CLARITY, SO THAT THE FIRST AND LAST 
; LINES MAY BE LESS THAN 16 BYTES IN ORDER TO SYNCRONIZE THE
; DISPLAY.
;
DISP:	CALL	EXPR		;F990-CD 57 FE *
	POP	D		;F993-D1
	POP	H		;F994-E1
	CALL    IOCON
	DB      OPFLG
DI0:	CALL	LCRLF		;F995-CD 8E FE *
	CALL	DADR		;F998-CD 21 FE *
DI1:	MVI	C,' '		;F99B-0E 20
	CALL	LOM		;F99D-CD 7A FD *
	MOV	A,M		;F9A0-7E
	CALL	DBYTE		;F9A1-CD 29 FE *
	CALL	HILO		;F9A4-CD 6A FE *
	JC	DI2		;F9A7-DA B3 F9 *
	MOV	A,L		;F9AA-7D
	ANI	00FH		;F9AB-E6 0F
	JNZ	DI1		;F9AD-C2 9B F9 *
	JMP	DI0		;F9B0-C3 95 F9 *
DI2:	CALL	LCRLF		;F9B3-CD 8E FE *
	CALL    IOCON
	DB      CLFLG
	MVI	C,0		;F9B6-0E 00
	CALL	LOM		;F9B8-CD 7A FD *
	RET			;F9BB-C9
	
;***********************************************
;
; END OF FILE COMMAND.
;
; THIS ROUTINE PRODUCES A TERMINATION RECORD WHICH PROPERLY
; COMPLETES A HEXADECIMAL FILE CREATED BY 'W' COMMANDS.  IT
; EXPESTS ONE HEXADECIMAL PARAMETER WHICH IS ENCODED IN THE
; TERMINATION RECORD IN THE LOAD ADDRESS FIELD AND SPECIFIES
; THE ENTRY POINT OF THE FILE CREATED.  A SUBSEQUENT 'R' COMMAND
; WILL LOAD THE FILE CREATED AND TRANSFER CONTROL TO THE
; ENTRY POINT SPECIFIED IF IT IS NON-ZERO.
;
EOF:	DCR	C		;F9BC-0D
	CALL	EXPR		;F9BD-CD 57 FE *
	CALL	POC		;F9C0-CD 4E FD *
	DB	':'
	XRA	A		;F9C4-AF
	MOV	D,A		;F9C5-57
	CALL	PBYTE		;F9C6-CD E1 FE *
	POP	H		;F9C9-E1
	CALL	PADR		;F9CA-CD D9 FE *
	MVI	A,1		;F9CD-3E 01
	CALL	PBYTE		;F9CF-CD E1 FE *
	XRA	A		;F9D2-AF
	SUB	D		;F9D3-92
	CALL	PBYTE		;F9D4-CD E1 FE *
	JMP	NU0		;F9D7-C3 97 FA *

;***********************************************
;
; FILL RAM MEMORY BLOCK WITH CONSTANT
;
; THIS ROUTINE EXPECTS THREE HEXADECIMAL PARAMETERS, THE
; FIRST AND SECOND (16 BITS) ARE INTERPRETED AS THE BOUNDS
; OF A MEMORY AREA TO BE INITIALIZED TO A CONSTANT VALUE,
; THE THIRD PARAMETER (8 BITS) IS THAT VALUE.
;
FILL:	INR	C		;F9DA-0C
	CALL	EXPR		;F9DB-CD 57 FE *
	POP	B		;F9DE-C1
	POP	D		;F9DF-D1
	POP	H		;F9E0-E1
FI0:	MOV	M,C		;F9E1-71
	CALL	HILO		;F9E2-CD 6A FE *
	JNC	FI0		;F9E5-D2 E1 F9 *
	RET			;F9E8-C9

;***********************************************
;
; GO TO <ADDRESS>, OPTIONALLY SET BREAKPOINTS.
;
; THE G COMMAND IS USED FOR TRANSFERING CONTROL FROM THE
; MONITOR TO A USER PROGRAM.  IT HAS SEVERAL MODES OF
; OPERATION.
;
; IF ONE HEXADECIMAL PARAMETER IS ENTERED, IT IS INTERPRETED
; AS THE ENTRY POINT OF THE USER PROGRAM AND A TRANSFER TO
; THAT LOCATION IS EXECUTED.
;
; IF ADDITIONAL (UP TO 2) PARAMETERS ARE ENTERED, THESE ARE
; CONSIDERED 'BREAKPOINTS', I.E., LOCATIONS WHERE
; CONTROL IS TO BE RETURNED TO THE MONITOR, IF THEY ARE
; ENCOUNTERED.
;
; IF THE FIRST PARAMETER IS NOT ENTERED, THE STORED VALUE
; OF THE USER'S PROGRAM COUNTER (REGISTER P) IS USED AS
; THE USER PROGRAM ENTRY POINT.
;
GOTO:   GET     EXIT
	XTHL			;F9EE-E3
	CALL	PCHK		;F9EF-CD F7 FE *
	JZ	GO0		;F9F2-CA 01 FA *
	CALL	PA0		;F9F5-CD A9 FE *
	XCHG			;F9F8-EB
	GET     PLOC
	MOV	M,D		;F9FE-72
	DCX	H		;F9FF-2B
	MOV	M,E		;FA00-73
GO0:	JC	GO4		;FA01-DA 2E FA *
	LXI	D,2		;FA04-11 02 00 *
GO1:	CALL	COMC		;FA07-CD 47 FD *
	DB	'-'
	CALL	PARAM		;FA0B-CD A3 FE *
	PUSH	H		;FA0E-E5
	INR	D		;FA0F-14
	JC	GO2		;FA10-DA 17 FA *
	DCR	E		;FA13-1D
	JNZ	GO1		;FA14-C2 07 FA *
GO2:	JNC	ERROR		;FA17-D2 26 F8 *
        GET     TLOC
GO3:	POP	B		;FA1F-C1
	MOV	M,C		;FA20-71
	INX	H		;FA21-23
	MOV	M,B		;FA22-70
	INX	H		;FA23-23
	LDAX	B		;FA24-0A
	MOV	M,A		;FA25-77
	INX	H		;FA26-23
	MVI	A,(RST 0)	;FA27-3E C7
	STAX	B		;FA29-02
	DCR	D		;FA2A-15
	JNZ	GO3		;FA2B-C2 1F FA *
GO4:	CALL	CRLF		;FA2E-CD 18 FE *
	RET			;FA31-C9

;***********************************************
;
; COMPUTE HEXADECIMAL SUM AND DIFFERENCE
;
; THIS ROUTINE EXPECTS TWO HEXADECIMAL PARAMETERS.
; IT COMPUTS THE SUM AND DIFFERENCE OF THE TWO VALUES
; AND DISPLAYES THEM ON THE CONSOLE DEVICE AS FOLLOWS:
;
; <P1+P2> <P1-P2>
;
HEXN:	CALL	EXPR		;FA32-CD 57 FE *
	CALL	CRLF		;FA35-CD 18 FE *
	POP	D		;FA38-D1
	POP	H		;FA39-E1
	PUSH	H		;FA3A-E5
	DAD	D		;FA3B-19
	CALL	LADR		;FA3C-CD 7A FE *
	CALL	BLK		;FA3F-CD 11 FD *
	POP	H		;FA42-E1
	MOV	A,L		;FA43-7D
	SUB	E		;FA44-93
	MOV	L,A		;FA45-6F
	MOV	A,H		;FA46-7C
	SBB	D		;FA47-9A
	MOV	H,A		;FA48-67
	CALL	LADR		;FA49-CD 7A FE *
	RET

;***************************************************************** 
;
; READ A VALUE FROM A PORT.
;
; THIS ROUTINE EXPECTS ONE HEXADECIMAL PARAMETER, THE PORT NUMBER 
; TO BE READ.
;
INPUT:	DCR     C               ;GET ONE ARGUMENT
        CALL    EXPR
        POP     B
	LXI	H,0C9H	        ;PUSH RETURN CODE ONTO STACK
	PUSH	H
	MOV	H,C             ;PUSH IN CODE AND PORT ONTO STACK
	MVI	L,0DBH
	PUSH	H
	MVI     C,00AH
	CALL    CO
	LXI	H,0             ;EXECUTE IT
	DAD	SP
	CALL	IN0
	POP     H               ;RESTORE STACK
	POP     H
	MOV     C,A
	CALL	DBYTE           ;OUTPUT RETURNED VALUE
	RET

IN0:    PCHL

;***********************************************
;
; MOVE A BLOCK OF MEMORY
;
; THIS ROUTINE EXPECTS THREE HEXADECIMAL PARAMETERS FROM THE
; CONSOLE.  THE FIRST AND SECOND PARAMETERS ARE THE BOUNDS OF
; THE MEMORY AREA TO BE MOVED, THE THIRD PARAMETER IS THE
; STARTING ADDRESS OF THE DESTINATION AREA.
;
MOVE:	INR	C		;FA7E-0C
	CALL	EXPR		;FA7F-CD 57 FE *
	POP	B		;FA82-C1
	POP	D		;FA83-D1
	POP	H		;FA84-E1
MV0:	MOV	A,M		;FA85-7E
	STAX	B		;FA86-02
	INX	B		;FA87-03
	CALL	HILO		;FA88-CD 6A FE *
	JNC	MV0		;FA8B-D2 85 FA *
	RET			;FA8E-C9

;***************************************************************** 
;
; WRITE A VALUE TO A PORT.
;
; THIS ROUTINE EXPECTS TWO HEXADECIMAL PARAMETERS.
; THE FIRST IS THE PORT NUMBER AND THE SECOND THE VALUE TO
; OUTPUT TO THAT PORT
;
OUTPUT: CALL    EXPR            ;GET TWO ARGUMENTS
	POP     D
	POP     B
	MOV     A,E             ;GET VALUE INTO A
	LXI	H,0C9H          ;PUSH RETURN CODE ONTO STACK
	PUSH	H
	MOV	H,C             ;PUSH OUT CODE & PORT ONTO STACK
	MVI	L,0D3H
	PUSH	H
	LXI	H,0             ;EXECUTE IT, OUTPUT WHAT IS IN A
	DAD	SP
	CALL	IN0
	POP     H               ;RESTORE STACK
	POP     H
	RET
	
;***********************************************
;
; PUNCH LEADER OR TRAILER
;
; THIS ROUTINE PUNCHES 60 NULL CHARACTERS ON THE DEVICE ASSIGNED
; AS THE PUNCH.  IT IS BRANCHED TO BY THE 'B' AND 'E' COMMANDS
; AS WELL AS BEING INVOKED BY THE 'N' COMMAND.
;
NULL:	CALL	TI		;FA8F-CD C7 FF *
	CPI	CR		;FA92-FE 0D
	JNZ	ERROR		;FA94-C2 26 F8 *
	CALL    IOCON
	DB      OPFLG
NU0:	CALL	LEAD		;FA97-CD 98 FE *
        CALL    IOCON
        DB      OPFLG
	CALL	POC		;FA9A-CD 4E FD *
	DB	0
	RET			;FA9E-C9

;***********************************************
;
; PROGRAM A 1702A PROM WITH FAST ALGORITHM.
; (20.48 TO 409.6 SECONDS)
;
; THIS ROUTINE EXPECTS THREE HEXADECIMAL PARAMETERS FROM THE CONSOLE.
; THE FIRST AND SECOND ARE THE BOUNDS OF A MEMORY AREA TO BE
; REPRODUCED IN THE 1702a PROM IN THE FRONT PANEL SOCKET.  THE THIRD
; PARAMETER IS THE ADDRESS IN THE PROM (8 BITS) WHERE THE DUPLICATION
; IS TO COMMENCE.  THE ALGORITHM USED IN THIS ROUTINE TAKES ADVANTAGE
; OF THE FACT THAT MOST PROMS MAY BE PROGRAMMED IN A SMALL FRACTION
; OF THE TIME IT WOULD TAKE UNDER WORST CASE CONDITIONS, THEREFORE
; GREATLY REDUCING PROGRAMMING TIME FOR MOSTR PROMS.  THE WIDE VARIATION
; IN TIMES QUOTED IS DUE TO THE ALLOWABLE RANGE BETWEEN BEST AND WORST
; CASE PROGRAMMING TIMES.
;
PROG:	CALL	SELECT		;FA9F-CD 94 FF *
	PUSH	B		;FAA2-C5
	MVI	C,3		;FAA3-0E 03
	CALL	EXPR		;FAA5-CD 57 FE *
	CALL	CRLF		;FAA8-CD 18 FE *
	POP	B		;FAAB-C1
	POP	D		;FAAC-D1
	POP	H		;FAAD-E1
	MVI	A,15		;FAAE-3E 0F
	ANA	B		;FAB0-A0
	MOV	B,A		;FAB1-47
	POP	PSW		;FAB2-F1
	ORA	B		;FAB3-B0
	MOV	B,A		;FAB4-47
PR0:	MOV	A,B		;FAB5-78
	OUT	PHI		;FAB6-D3 F1
	MOV	A,C		;FAB8-79
	OUT	PLO		;FAB9-D3 F2
	INX	B		;FABB-03
	LDA	MSK		;FABC-3A 04 00 *
	XRA	M		;FABF-AE
	OUT	PDATA		;FAC0-D3 F0
PR1:	IN	PSTAT		;FAC2-DB F1
	ANI	PGRDY		;FAC4-E6 01
	JNZ	PR1		;FAC6-C2 C2 FA *
	IN	PSTAT		;FAC9-DB F1
	ANI	PCOMP		;FACB-E6 02
	JZ	PR2		;FACD-CA D7 FA *
	CALL	HILO		;FAD0-CD 6A FE *
	JNC	PR0		;FAD3-D2 B5 FA *
	RET			;FAD6-C9
PR2:	CALL	LADR		;FAD7-CD 7A FE *
	JMP	ERROR		;FADA-C3 26 F8 *

;***********************************************
;
; QUERY ROUTINE.
;
QUERY:	CALL	TI		;FADD-CD C7 FF *
	CPI	CR		;FAE0-FE 0D
	JNZ	ERROR		;FAE2-C2 26 F8 *
	MVI	B,4		;FAE5-06 04
	LXI	H,LTBL		;FAE7-21 DC F8 *
Q0:	CALL	CRLF		;FAEA-CD 18 FE *
	MOV	C,M		;FAED-4E
	CALL	COM		;FAEE-CD 13 FD *
	CALL	COMC		;FAF1-CD 47 FD *
	DB	'='
	INX	H		;FAF5-23
	MOV	A,M		;FAF6-7E
	CMA			;FAF7-2F
	MOV	C,A		;FAF8-4F
	INX	H		;FAF9-23
	MOV	E,M		;FAFA-5E
	INX	H		;FAFB-23
	MOV	D,M		;FAFC-56
	INX	H		;FAFD-23
	XCHG			;FAFE-EB
	LDA	IOBYT		;FAFF-3A 03 00 *
	ANA	C		;FB02-A1
	PUSH	B		;FB03-C5
	MVI	B,4		;FB04-06 04
Q1:	MOV	C,M		;FB06-4E
	INX	H		;FB07-23
	CMP	M		;FB08-BE
	JZ	Q2		;FB09-CA 11 FB *
	INX	H		;FB0C-23
	DCR	B		;FB0D-05
	JNZ	Q1		;FB0E-C2 06 FB *
Q2:	CALL	COM		;FB11-CD 13 FD *
	XCHG			;FB14-EB
	POP	B		;FB15-C1
	DCR	B		;FB16-05
	JNZ	Q0		;FB17-C2 EA FA *
	RET			;FB1A-C9

;***********************************************
;
; READ ROUTINE.
;
; THIS ROUIINE READS A HEXADECIMAL FILE FRUM THE ASSIGNED
; READER DEVICE AND LOADS IT INTO MEMORY. ONE HEXADECIMAL
; PARAMETER IS EXPECTED. THIS PARAMETER IS A BIAS ADDRESS
; TO BE ADDED TO THE MEMORY ADDRES5 OF EACH DATA BYTE ENCOUNTERED.
; IN THIS WAY, HEXADECIMAL FILES MAY BE LOADED INTO MEMORY
; IN AREAS OTHER THAN THAT FOR WHICH THEY WERE ASSEMBLED OR COMPILED.
; ALL RECORDS READ ARE CHECKSUMMED AND COMPARED AGAINST THE
; CHECKSUM IN THE RECORD. IF A CHECKSUM ERROR (OR TAPE READ ERROR)
; OCCURS, THE ROUTINE TAKES AN ERROR EXIT. NORMAL LOADING IS
; TERMINATED WHEN A RECORD OF LENGTH 0 IS ENCOUNTERED. THIS IS
; INTERPRETED AS AN END OF FILE RECORD AND THE LOAD ADDRESS
; FIELD OF THAT RECURD IS TAKEN TO BE THE ENTRY POINT OF THE
; PROGRAM (IF IT IS NON-ZERO).
;
READ:	DCR	C		;FB1B-0D
	CALL	EXPR		;FB1C-CD 57 FE *
	CALL	CRLF		;FB1F-CD 18 FE *
	CALL    IOCON
	DB      OPFLG
RED0:	CALL	RIX		;FB22-CD 8B FF *
	CPI	':'		;FB25-FE 3A
	JNZ	RED0		;FB27-C2 22 FB *
	XRA	A		;FB2A-AF
	MOV	D,A		;FB2B-57
	CALL	BYTE		;FB2C-CD F5 FD *
	JZ	RED3		;FB2F-CA 67 FB *
	MOV	E,A		;FB32-5F
	CALL	BYTE		;FB33-CD F5 FD *
	MOV	H,A		;FB36-67
	CALL	BYTE		;FB37-CD F5 FD *
	MOV	L,A		;FB3A-6F
	CALL	BYTE		;FB3B-CD F5 FD *
	MOV	C,E		;FB3E-4B
	PUSH	H		;FB3F-E5
	FETCH   -256
RED1:	CALL	BYTE		;FB44-CD F5 FD *
	MOV	M,A		;FB47-77
	INX	H		;FB48-23
	DCR	E		;FB49-1D
	JNZ	RED1		;FB4A-C2 44 FB *
	CALL	BYTE		;FB4D-CD F5 FD *
	JNZ	ERROR		;FB50-C2 26 F8 *
	POP	D		;FB53-D1
	XTHL			;FB54-E3
	XCHG			;FB55-EB
	DAD	D		;FB56-19
	MVI	B,0		;FB57-06 00
	DAD	B		;FB59-09
	XCHG			;FB5A-EB
	XTHL			;FB5B-E3
RED2:	DCX	H		;FB5C-2B
	MOV	A,M		;FB5D-7E
	DCX	D		;FB5E-1B
	STAX	D		;FB5F-12
	DCR	C		;FB60-0D
	JNZ	RED2		;FB61-C2 5C FB *
	JMP	RED0		;FB64-C3 22 FB *

RED3:	GET     PLOC
	CALL	BYTE		;FB6C-CD F5 FD *
	MOV	M,A		;FB6F-77
	DCX	H		;FB70-2B
	CALL	BYTE		;FB71-CD F5 FD *
	MOV	M,A		;FB74-77
	POP	H		;FB75-E1
	RET			;FB76-C9

;***********************************************
;
; SUBSTITUTE MEMORY CONTENTS ROUTINE.
;
; THIS ROUTINE EXPECTS ONE PARAMETER fROM THE CONSOLE, FOLLOWED
; BY A SPACE. THE PARAMETER IS INTERPRETED AS A MEMORY LOCATION
; AND THE ROUTINE WILL DISPLAY THE CONTENTS OR THAT LOCATION,
; FOLLOWED BY A DASH (-). TO MODIFY MEMORY, TYPE IN THE NEW DATA
; FOLLOWED BY A SPACE OR A CARRIAGE RETURN. IF NO MODIFICATION
; OF THE LOCATION IS REQUIRED, TYPE ONLY A SPACE OR CARRIAGE RETURN.
; IF A SPACE WAS LAST TYPED, THE NEXT MEMORY LOCATION WILL BE DISPLAYED
; AND MODIFICATION OF IT IS ALLOWED. IF A CARRIAGE RETURN WAS ENTERED,
; THE COMMAND IS TERMINATED.
;
SUBS:	CALL	PARAM		;FB77-CD A3 FE *
	RC			;FB7A-D8
SU0:	MOV	A,M		;FB7B-7E
	CALL	LBYTE		;FB7C-CD 82 FE *
	CALL	COMC		;FB7F-CD 47 FD *
	DB	'-'
	CALL	PCHK		;FB83-CD F7 FE *
	RC			;FB86-D8
	JZ	SU1		;FB87-CA 91 FB *
	XCHG			;FB8A-EB
	CALL	PA0		;FB8B-CD A9 FE *
	XCHG			;FB8E-EB
	MOV	M,E		;FB8F-73
	RC			;FB90-D8
SU1:	INX	H		;FB91-23
	JMP	SU0		;FB92-C3 7B FB *

;***********************************************
;
; TRANSFER CONTENTS OF A PROM TO MEMORY.
;
; THIS ROUTINE EXPECTS ONE HEXADECIMAL PARAMETER WHICH
; IT INTERPRETS AS THE LOCATION IN MEMORY WHERE A COPY OF THE
; PROM IN THE FRONT PANEL IS TO BE STORED.  THIS COPY IS ALWAYS
; 256 BYTES IN LENGTH.
;
TRAN:	CALL	SELECT		;FB95-CD 94 FF *
	MVI	C,0		;FB98-0E 00
	PUSH	B		;FB9A-C5
	MVI	C,2		;FB9B-0E 02
	CALL	EXPR		;FB9D-CD 57 FE *
	POP	D		;FBA0-D1
	POP	H		;FBA1-E1
	POP	B		;FBA2-C1
TR0:	MOV	A,B		;FBA3-78
	OUT	PHI		;FBA4-D3 F1
	MOV	A,C		;FBA6-79
	OUT	PLO		;FBA7-D3 F2
	INX	B		;FBA9-03
	IN	PDATA		;FBAA-DB F0
	PUSH	H		;FBAC-E5
	LXI	H,MSK   	;FBAD-21 04 00 *
	XRA	M		;FBB0-AE
	POP	H		;FBB1-E1
	MOV	M,A		;FBB2-77
	IN	PSTAT		;FBB3-DB F1
	ANI	PCOMP		;FBB5-E6 02
	JZ	ERROR		;FBB7-CA 26 F8 *
	CALL	HILO		;FBBA-CD 6A FE *
	JNC	TR0		;FBBD-D2 A3 FB *
	RET			;FBC0-C9

;***********************************************
;
; WRITE ROUTINE.
;
; THIS ROUTINE EXPECTS TWO HEXADECIMAL PARAMETERS WHICH ARE
; INTERPRETED AS THE BOUNDS OF A MEMORY AREA TO BE ENCODED
; INTO HEXADECIMAL FORMAT AND PUNCHED ON THE ASSIGNED PUNCH
; DEVICE.
;
WRITE:	CALL	EXPR		;FBC1-CD 57 FE *
	POP	D		;FBC7-D1
	POP	H		;FBC8-E1
	CALL    IOCON
	DB      OPFLG
WR0:	CALL	POC		;FBC9-CD 4E FD *
	DB	':'
	LXI	B,16		;FBCD-01 10 00 *
	PUSH	H		;FBD0-E5
WR1:	INR	B		;FBD1-04
	DCR	C		;FBD2-0D
	JZ	WR2		;FBD3-CA DC FB *
	CALL	HILO		;FBD6-CD 6A FE *
	JNC	WR1		;FBD9-D2 D1 FB *
WR2:	POP	H		;FBDC-E1
	PUSH	D		;FBDD-D5
	MVI	D,0		;FBDE-16 00
	MOV	A,B		;FBE0-78
	CALL	PBYTE		;FBE1-CD E1 FE *
	CALL	PADR		;FBE4-CD D9 FE *
	XRA	A		;FBE7-AF
	CALL	PBYTE		;FBE8-CD E1 FE *
WR3:	MOV	A,M		;FBEB-7E
	CALL	PBYTE		;FBEC-CD E1 FE *
	INX	H		;FBEF-23
	DCR	B		;FBF0-05
	JNZ	WR3		;FBF1-C2 EB FB *
	XRA	A		;FBF4-AF
	SUB	D		;FBF5-92
	CALL	PBYTE		;FBF6-CD E1 FE *
	POP	D		;FBF9-D1
	DCX	H		;FBFA-2B
	CALL	PEOL		;FBFB-CD 06 FF *
	CALL	HILO		;FBFE-CD 6A FE *
	JNC	WR0		;FC01-D2 C9 FB *
	RET			;FC04-C9

;***********************************************
;
; EXAMINE AND MODIFY CPU REGISTERS
;
; THIS ROUTINE ALLOWS THE OPERATOR TO EXAMINE AND/OR MODIFY
; THE CONTENTS OF THE USER PROGRAM'S REGISTERS.  THE REGISTER
; VALUES WERE STORED AS A RESULT OF A PREVIOUS BREAKPOINT AND
; WILL BE RESTORED TO THE USER PROGRAM DURING A SUBSEQUENT 'G'
; COMMAND.
;
X:	LXI	H,ACTBL	        ;FC05-21 60 FC *
	CALL	PCHK		;FC08-CD F7 FE *
	JC	X5		;FC0B-DA 49 FC *
	MVI	C,NREGS		;FC0E-0E 0C
X0:	CMP	M		;FC10-BE
	JZ	X1		;FC11-CA 1E FC *
	INX	H		;FC14-23
	INX	H		;FC15-23
	INX	H		;FC16-23
	DCR	C		;FC17-0D
	JNZ	X0		;FC18-C2 10 FC *
	JMP	ERROR		;FC1B-C3 26 F8 *
X1:	CALL	BLK		;FC1E-CD 11 FD *
X2:	CALL	DREG		;FC21-CD 43 FE *
	CALL	COMC		;FC24-CD 47 FD *
	DB	'-'
	CALL	PCHK		;FC28-CD F7 FE *
	RC			;FC2B-D8
	JZ	X4		;FC2C-CA 3F FC *
	PUSH	H		;FC2F-E5
	PUSH	B		;FC30-C5
	CALL	PA0		;FC31-CD A9 FE *
	MOV	A,L		;FC34-7D
	STAX	D		;FC35-12
	POP	PSW		;FC36-F1
	ORA	A		;FC37-B7
	JM	X3		;FC38-FA 3E FC *
	INX	D		;FC3B-13
	MOV	A,H		;FC3C-7C
	STAX	D		;FC3D-12
X3:	POP	H		;FC3E-E1
X4:	XRA	A		;FC3F-AF
	ORA	M		;FC40-B6
	RM			;FC41-F8
	MOV	A,B		;FC42-78
	CPI	CR		;FC43-FE 0D
	RZ			;FC45-C8
	JMP	X2		;FC46-C3 21 FC *
X5:	CALL	CRLF		;FC49-CD 18 FE *
X6:	CALL	BLK		;FC4C-CD 11 FD *
	XRA	A		;FC4F-AF
	ORA	M		;FC50-B6
	RM			;FC51-F8
	MOV	C,M		;FC52-4E
	CALL	COM		;FC53-CD 13 FD *
	CALL	COMC		;FC56-CD 47 FD *
	DB	'='
	CALL	DREG		;FC5A-CD 43 FE *
	JMP	X6		;FC5D-C3 4C FC *
	
;***********************************************
;
; TABLE FOR ACCESSING REGISTERS
; TABLE CONTAINS:
;   (1) REGISTER IDENTIFIER
;   (2) STACK POINTER DISPLACEMENT
;   (3) PRECISION
;
ACTBL:	DB	'A', ALOC AND 0FFH , 000H
        DB      'B', BLOC AND 0FFH , 000H
        DB      'C', CLOC AND 0FFH , 000H
        DB      'D', DLOC AND 0FFH , 000H
        DB      'E', ELOC AND 0FFH , 000H
        DB      'F', FLOC AND 0FFH , 000H
        DB      'H', HLOC AND 0FFH , 000H
        DB      'I', ILOC AND 0FFH , 000H
	DB	'L', LLOC AND 0FFH , 000H
	DB      'M', HLOC AND 0FFH , 001H
	DB      'P', PLOC AND 0FFH , 001H
	DB      'S', SLOC AND 0FFH , 001H
	DB      -1
NREGS   EQU     ($-ACTBL)/3     ;LENGTH OF ACCESS TABLE

;***********************************************
;
; SUBROUTINES.

;***********************************************
;
; CONSOLE INPUT CODE, VALUE RETURNED IN A
; A, FLAGS MODIFIED
; STACK USAGE: 2 BYTES
;
CI:	LDA	IOBYT		;FC85-3A 03 00 *
	ANI	NOT CMSK	;FC88-E6 03
	JNZ	CI0		;FC8A-C2 97 FC *
TTYIN:	IN	TTS		;FC8D-DB F5
	ANI	RBR		;FC8F-E6 02
	JZ	TTYIN		;FC91-CA 8D FC *
	IN	TTI		;FC94-DB F4
	RET			;FC96-C9
CI0:	CPI	CCRT		;FC97-FE 01
	JNZ	CI1		;FC99-C2 A6 FC *
CRTIN:	IN	CRTS		;FC9C-DB F7
	ANI	RBR		;FC9E-E6 02
	JZ	CRTIN		;FCA0-CA 9C FC *
	IN	CRTI		;FCA3-DB F6
	RET			;FCA5-C9
CI1:	CPI	BATCH		;FCA6-FE 02
	JZ	RI		;FCA8-CA B8 FC *
	MVI	A,CILOC AND 0FFH ;FCAB-3E E8
	JMP	@USER		;FCAD-C3 0A FD *
	
;***********************************************
;
; GET CONSOLE INPUT IF AVAILABLE
; Z = 1, NO CHAR AVAILABLE
; Z = 0, CHAR IN A
;
BREAK:	CALL	CSTS		;FCB0-CD A4 FD *
	ORA	A		;FCB3-B7
	RZ			;FCB4-C8
	JMP	TI		;FCB5-C3 C7 FF *

;***********************************************
;
; READER INPUT CODE
; VALUE RETURNED IN A, A, AND FLAGS MODIFIED
; STACK USAGE: 8 BYTES
;
RI:	PUSH	H		;FCB8-E5
	LXI	H,IOBYT		;FCB9-21 03 00 *
	MOV	A,M	        ;FCBC-7E
	ANI	NOT RMSK	;FCBD-E6 0C
	JNZ	RI3		;FCBF-C2 DF FC *
	MVI	A,TTYADV	;FCC2-3E 02
	OUT	PTRC		;FCC4-D3 F9
	MVI	H,TOUT		;FCC6-26 FA
RI0:	IN	TTS		;FCC8-DB F5
	ANI	RBR		;FCCA-E6 02
	JNZ	RI2		;FCCC-C2 DA FC *
	CALL	DELAY		;FCCF-CD 3B FE *
	DCR	H		;FCD2-25
	JNZ	RI0		;FCD3-C2 C8 FC *
RI1:	XRA	A		;FCD6-AF
	STC			;FCD7-37
	POP	H		;FCD8-E1
	RET			;FCD9-C9
RI2:	IN	TTI		;FCDA-DB F4
	ORA	A		;FCDC-B7
	POP	H		;FCDD-E1
	RET			;FCDE-C9
RI3:	CPI	RPTR		;FCDF-FE 04
	JNZ	RI6		;FCE1-C2 00 FD *
	MVI	A,PTRADV	;FCE4-3E 08
	OUT	PTRC		;FCE6-D3 F9
	MVI	H,TOUT		;FCE8-26 FA
RI4:	IN	PTRS		;FCEA-DB F9
	ANI	PTRDY		;FCEC-E6 01
	JNZ	RI5		;FCEE-C2 FB FC *
	CALL	DELAY		;FCF1-CD 3B FE *
	DCR	H		;FCF4-25
	JNZ	RI4		;FCF5-C2 EA FC *
	JMP	RI1		;FCF8-C3 D6 FC *
RI5:	IN	PTRI		;FCFB-DB F8
	ORA	A		;FCFD-B7
	POP	H		;FCFE-E1
	RET			;FCFF-C9
RI6:	POP	H		;FD00-E1
	CPI	RUSE1		;FD01-FE 08
	MVI	A,R1LOC AND 0FFH ;FD03-3E EE
	JZ	@USER		;FD05-CA 0A FD *
	MVI	A,R2LOC AND 0FFH ;FD08-3E F1
	
;***********************************************
; 
; @USER - SET BUFFER IN MEMTOP + A
;          RETURN ADDRESS ON STACK
;
@USER:	PUSH	H		;FD0A-E5
	LHLD	MEMTOP		;FD0B-2A 04 00 *
	MOV	L,A		;FD0E-6F
	XTHL			;FD0F-E3
	RET			;FD10-C9
	
;***********************************************
; 
; BLK - OUTPUT A SPACE
;
BLK:	MVI	C,' '		;FD11-0E 20

;***********************************************
;
; COM - CHECK FOR BREAK WHILE CONSOLE OUTPUT
;
COM:	LDA	IOBYT		;FD13-3A 03 00 *
	ANI	NOT CMSK	;FD16-E6 03
	CPI	BATCH		;FD18-FE 02
	CNZ	BREAK		;FD1A-C4 B0 FC *

;***********************************************
; 
; CONSOLE OUTPUT CODE. VALUE EXPECTED IN C
; A, FLAGS, C MODIFIED
; STACK USAGE: 2 BYTES
;
CO:	LDA	IOBYT		;FD1D-3A 03 00 *
	ANI	NOT CMSK	;FD20-E6 03
	JNZ	CO0		;FD22-C2 30 FD *
TTYOUT:	IN	TTS		;FD25-DB F5
	ANI	TRDY		;FD27-E6 01
	JZ	TTYOUT		;FD29-CA 25 FD *
	MOV	A,C		;FD2C-79
	OUT	TTO		;FD2D-D3 F4
	RET			;FD2F-C9
CO0:	CPI	BATCH		;FD30-FE 02
	JZ	LO		;FD32-CA 84 FD *
	CPI	CCRT		;FD35-FE 01
	MVI	A,COLOC AND 0FFH ;FD37-3E EB
	JNZ	@USER		;FD39-C2 0A FD *
CRTOUT:	IN	CRTS		;FD3C-DB F7
	ANI	TRDY		;FD3E-E6 01
	JZ	CRTOUT		;FD40-CA 3C FD *
	MOV	A,C		;FD43-79
	OUT	CRTO		;FD44-D3 F6
	RET			;FD46-C9
	
;***********************************************
; COMC - OUTPUT NEXT INSTRUCTION BYTE TO CONSOLE
;
COMC:	XTHL			;FD47-E3
	MOV	C,M		;FD48-4E
	INX	H		;FD49-23
	XTHL			;FD4A-E3
	JMP	COM		;FD4B-C3 13 FD *
	
;***********************************************
; POC - OUTPUT NEXT INSTRUCTION BYTE TO PUNCH
;
POC:	XTHL			;FD4E-E3
	MOV	C,M		;FD4F-4E
	INX	H		;FD50-23
	XTHL			;FD51-E3

;***********************************************
;
; PUNCH OUTPUT CODE, VALUE EXPECTED IN C
; A, FLAGS, AND C MODIFIED
; STACK USAGE: 2 BYTES
;
PO:	LDA	IOBYT		;FD52-3A 03 00 *
	ANI	NOT PMSK	;FD55-E6 30
	JZ	TTYOUT		;FD57-CA 25 FD *
	CPI	PPTP		;FD5A-FE 10
	JNZ	PO1		;FD5C-C2 6E FD *
PO0:	IN	PTPS		;FD5F-DB F9
	ANI	PTPRY		;FD61-E6 04
	JZ	PO0		;FD63-CA 5F FD *
	MOV	A,C		;FD66-79
	OUT	PTPO		;FD67-D3 F8
	MVI	A,PTPADV	;FD69-3E 20
	OUT	PTRC		;FD6B-D3 F9
	RET			;FD6D-C9
PO1:	CPI	PUSE1		;FD6E-FE 20
	MVI	A,P1LOC AND 0FFH ;FD70-3E F4
	JZ	@USER		;FD72-CA 0A FD *
	MVI	A,P2LOC AND 0FFH ;FD75-3E F7
	JMP	@USER		;FD77-C3 0A FD *

;***********************************************
;
; LOM - CHECK FOR BREAK WILE PRINTING
;
LOM:	LDA	IOBYT		;FD7A-3A 03 00 *
	ANI	NOT CMSK	;FD7D-E6 03
	CPI	BATCH		;FD7F-FE 02
	CNZ	BREAK		;FD81-C4 B0 FC *

;***********************************************
; 
; LIST OUTPUT CODE
; VALUE EXPECTED IN C, A AND FLAGS MODIFIED
; STACK USAGE: 2 BYTES
;
LO:	LDA	IOBYT		;FD84-3A 03 00 *
	ANI	NOT LMSK	;FD87-E6 C0
	JZ	TTYOUT		;FD89-CA 25 FD *
	CPI	LCRT		;FD8C-FE 40
	JZ	CRTOUT		;FD8E-CA 3C FD *
	CPI	LUSE		;FD91-FE C0
	MVI	A,L1LOC AND 0FFH ;FD93-3E FA
	JZ	@USER		;FD95-CA 0A FD *
LP0:	IN	LPTS		;FD98-DB FB
	ANI	LPTRY		;FD9A-E6 01
	JZ	LP0		;FD9C-CA 98 FD *
	MOV	A,C		;FD9F-79
	CMA			;FDA0-2F
	OUT	LPTO		;FDA1-D3 FA
	RET			;FDA3-C9

;***********************************************
; 
; CONSOLE INPUT STATUS CODE
; A, FLAGS MODIFIED
; STACK USAGE: 2 BYTES
;
CSTS:	LDA	IOBYT		;FDA4-3A 03 00 *
	ANI	NOT CMSK	;FDA7-E6 03
	JNZ	CS0		;FDA9-C2 B1 FD *
	IN	TTS		;FDAC-DB F5
	JMP	CS1		;FDAE-C3 B8 FD *
CS0:	CPI	CCRT		;FDB1-FE 01
	JNZ	CS3		;FDB3-C2 BF FD *
	IN	CRTS		;FDB6-DB F7
CS1:	ANI	RBR		;FDB8-E6 02
	MVI	A,FALSE		;FDBA-3E 00
CS2:	RZ			;FDBC-C8
	CMA			;FDBD-2F
	RET			;FDBE-C9
CS3:	CPI	002H		;FDBF-FE 02
	MVI	A,TRUE		;FDC1-3E FF
	JZ	CS2		;FDC3-CA BC FD *
	MVI	A,CSLOC AND 0FFH ;FDC6-3E FD
	JMP	@USER		;FDC8-C3 0A FD *

;***********************************************
; 
; I/O SYSTEM STATUS CODE
; STATUS BYTE RETURNED IN A
; STACK USAGE: 2 BYTES
;
IOCHK:	LDA	IOBYT		;FDCB-3A 03 00 *
	RET			;FDCE-C9

;***********************************************
; 
; SET I/O CONFIGURATION
; VALUE EXPECTED IN C
; STACK USAGE: 2 BYTES
;
IOSET:	MOV	A,C		;FDCF-79
	STA	IOBYT		;FDD0-32 03 00 *
	RET			;FDD3-C9

;***********************************************
; 
; RETURN ADDRESS OF END OF MEMORY TO USER
; VALUE RETURNED IN BC
; STACK USAGE: 8 BYTES
;
MEMCK:	LDA	MEMTOP+1	;FDD4-3A 05 00 *
	DCR	A		;FDD7-3D
	MOV	B,A		;FDD8-47
	MVI	A,0C0H		;FDD9-3E C0
	RET			;FDDB-C9
	
;***********************************************
; 
; DEFINE USER I/O ENTRY POINTS 
;
IODEF:	PUSH	H		;FDDC-E5
	PUSH	B		;FDDD-C5
	GET     XTBL+1
	MOV	A,C		;FDE3-79
	CPI	008H		;FDE4-FE 08
	JNC	ERROR		;FDE6-D2 26 F8 *
	ADD	C		;FDE9-81
	ADD	C		;FDEA-81
	MOV	C,A		;FDEB-4F
	MVI	B,0     	;FDEC-06 00
	DAD	B		;FDEE-09
	MOV	M,E		;FDEF-73
	INX	H		;FDF0-23
	MOV	M,D		;FDF1-72
	POP	B		;FDF2-C1
	POP	H		;FDF3-E1
	RET			;FDF4-C9
	
;***********************************************
; 
; EXTERNALLY REFERENCED ROUTINE
;
IOCON:                          ;INTERNAL ENTRY POINT FOR I/O CONTROL
        XTHL
        MOV     C,M
        INX     H
        XTHL
SPCL:
        PUSH    H
        MVI     H,0
        MOV     L,C
        MOV     M,H
        POP     H
        RET
        	
;***********************************************
; 
; BYTE - GET TWO ASCII CHARS FROM READER AND
; CONVERT TO ONE BYTE
;
BYTE:	PUSH	B		;FDF5-C5
	CALL	RIX		;FDF6-CD 8B FF *
	CALL	NIBBLE		;FDF9-CD C7 FE *
	RLC			;FDFC-07
	RLC			;FDFD-07
	RLC			;FDFE-07
	RLC			;FDFF-07
	MOV	C,A		;FE00-4F
	CALL	RIX		;FE01-CD 8B FF *
	CALL	NIBBLE		;FE04-CD C7 FE *
	ORA	C		;FE07-B1
	MOV	C,A		;FE08-4F
	ADD	D		;FE09-82
	MOV	D,A		;FE0A-57
	MOV	A,C		;FE0B-79
	POP	B		;FE0C-C1
	RET			;FE0D-C9

;***********************************************
;
; CONVERT 4 BIT HEX VALUE TO ASCII CHARACTER
; INPUT = 0...0FH
; OUTPUT = '0...9, A-F'
; 
CONV:	ANI	00FH		;FE0E-E6 0F
	ADI	090H		;FE10-C6 90
	DAA			;FE12-27
	ACI	040H		;FE13-CE 40
	DAA			;FE15-27
	MOV	C,A		;FE16-4F
	RET			;FE17-C9

;***********************************************
; 
; CRLF - OUTPUT CR/LF TO CONSOLE
;
CRLF:	CALL	COMC		;FE18-CD 47 FD *
	DB      CR		;FE1B-0D
	CALL	COMC		;FE1C-CD 47 FD *
	DB      LF		;FE1F-0A
	RET			;FE20-C9

;***********************************************
;
; DADR - OUTPUT ADDR IN HL IN HEX ON PRINTER
;
DADR:	MOV	A,H		;FE21-7C
	CALL	DBYTE		;FE22-CD 29 FE *
	MOV	A,L		;FE25-7D
	JMP	DBYTE		;FE26-C3 29 FE *

;***********************************************
; 
; DBYTE - OUTPUT A BYTE IN A IN HEX ON PRINTER
;
DBYTE:	PUSH	PSW		;FE29-F5
	RRC			;FE2A-0F
	RRC			;FE2B-0F
	RRC			;FE2C-0F
	RRC			;FE2D-0F
	CALL	CONV		;FE2E-CD 0E FE *
	CALL	LOM		;FE31-CD 7A FD *
	POP	PSW		;FE34-F1
	CALL	CONV		;FE35-CD 0E FE *
	JMP	LOM		;FE38-C3 7A FD *

;***********************************************
;
; DELAY - 1 MS DELAY
;
DELAY:
	IN	RTC		;LOOP UNTIL REAL TIME
	ANI	RTCS		;CLOCK CHANGES PHASE
	JZ	DELAY		;FE3F-CA 3B FE *
	RET			;RETURN
	
;***********************************************
;
; DISPLAY THE CONTENTS OF A USER REGISTER
;
DREG:	INX	H		;FE43-23
	MOV	E,M		;FE44-5E
	LDA	MEMTOP+1	;FE45-3A 05 00 *
	MOV	D,A		;FE48-57
	INX	H		;FE49-23
	MOV	B,M		;FE4A-46
	INX	H		;FE4B-23
	LDAX	D		;FE4C-1A
	CALL	LBYTE		;FE4D-CD 82 FE *
	DCR	B		;FE50-05
	RM			;FE51-F8
	DCX	D		;FE52-1B
	LDAX	D		;FE53-1A
	JMP	LBYTE		;FE54-C3 82 FE *

;***********************************************
;
; EVALUATE EXPRESSION: <EXPR>,<EXPR>,<EXPR>
;
; THE C REGISTER CONTAINS THE NUMBER OF PARAMETERS REQUIRED
; (1, 2, OR 3).  PARAMETERS ARE RETURNED ON THE STACK
;
EXPR:	CALL	PARAM		;FE57-CD A3 FE *
	XTHL			;FE5A-E3
	PUSH	H		;FE5B-E5
	DCR	C		;FE5C-0D
	JNC	EX0		;FE5D-D2 64 FE *
	JNZ	ERROR		;FE60-C2 26 F8 *
	RET			;FE63-C9
EX0:	JNZ	EXPR		;FE64-C2 57 FE *
	JMP	ERROR		;FE67-C3 26 F8 *

;***********************************************
;
; COMPARE HL WITH DE:
; IF HL < DE THEN CARRY = 0;
; IF HL = DE THEN CARRY = 0;
; IF HL > DE THEN CARRY = 1;
;
HILO:	INX	H		;FE6A-23
	MOV	A,H		;FE6B-7C
	ORA	L		;FE6C-B5
	STC			;FE6D-37
	RZ			;FE6E-C8
	MOV	A,E		;FE6F-7B
	SUB	L		;FE70-95
	MOV	A,D		;FE71-7A
	SBB	H		;FE72-9C
	RET			;FE73-C9
	
;***********************************************
; 
; 
;
HXD:	CALL	CONV		;FE74-CD 0E FE *
	JMP	COM		;FE77-C3 13 FD *
	
;***********************************************
; 
; LADR - OUTPUT ADDR IN HL AS HEX TO CONSOLE
;
LADR:	MOV	A,H		;PRINT MSB
	CALL	LBYTE		;FE7B-CD 82 FE *
	MOV	A,L		;PRINT LSB
	JMP	LBYTE		;FE7F-C3 82 FE *
	
;***********************************************
; 
; LBYTE - OUTPUT BYTE IN A AS HEX TO CONSOLE
;
LBYTE:	PUSH	PSW		;FE82-F5
	RRC			;FE83-0F
	RRC			;FE84-0F
	RRC			;FE85-0F
	RRC			;FE86-0F
	CALL	HXD		;FE87-CD 74 FE *
	POP	PSW		;FE8A-F1
	JMP	HXD		;FE8B-C3 74 FE *

;***********************************************
; 
; LCRLF - OUTPUT CR/LF TO PRINTER
;
LCRLF:	MVI	C,CR		;FE8E-0E 0D
	CALL	LOM		;FE90-CD 7A FD *
	MVI	C,LF		;FE93-0E 0A
	JMP	LOM		;FE95-C3 7A FD *

;***********************************************
; 
; PUNCH 6 INCHES OF LEADER
;
LEAD:	MVI	B,60		;FE98-06 3C
LE0:	CALL	POC		;FE9A-CD 4E FD *
	DB	0
	DCR	B		;FE9E-05
	JNZ	LE0		;FE9F-C2 9A FE *
	RET			;FEA2-C9
	
;***********************************************
; 
; COLLECT A HEXADECIMAL PARAMETER
;
PARAM:	CALL	PCHK		;FEA3-CD F7 FE *
	JZ	ERROR		;FEA6-CA 26 F8 *
PA0:	LXI	H,0		;FEA9-21 00 00 *
PA1:	MOV	B,A		;FEAC-47
	CALL	NIBBLE		;FEAD-CD C7 FE *
	JC	PA2		;FEB0-DA BF FE *
	DAD	H		;FEB3-29
	DAD	H		;FEB4-29
	DAD	H		;FEB5-29
	DAD	H		;FEB6-29
	ORA	L		;FEB7-B5
	MOV	L,A		;FEB8-6F
	CALL	TI		;FEB9-CD C7 FF *
	JMP	PA1		;FEBC-C3 AC FE *
PA2:	MOV	A,B		;FEBF-78
	CALL	P2C		;FEC0-CD FA FE *
	JNZ	ERROR		;FEC3-C2 26 F8 *
	RET			;FEC6-C9

;***********************************************
; 
; NIBBLE - CONVERT HEX NIBBLE IN A TO BINARY IN A
;
NIBBLE:	SUI	030H		;FEC7-D6 30
	RC			;FEC9-D8
	ADI	0E9H		;FECA-C6 E9
	RC			;FECC-D8
	ADI	006H		;FECD-C6 06
	JP	NI0		;FECF-F2 D5 FE *
	ADI	007H		;FED2-C6 07
	RC			;FED4-D8
NI0:	ADI	00AH		;FED5-C6 0A
	ORA	A		;FED7-B7
	RET			;FED8-C9
	
;***********************************************
;
; PADR - OUTPUT ADDR IN HL AS HEX TO PUNCH
;
PADR:	MOV	A,H		;FED9-7C
	CALL	PBYTE		;FEDA-CD E1 FE *
	MOV	A,L		;FEDD-7D
	JMP	PBYTE		;FEDE-C3 E1 FE *
	
;***********************************************
;
; PBYTE - OUTPUT BYTE IN A AS HEX TO PUNCH
;
PBYTE:	MOV	E,A		;FEE1-5F
	RRC			;FEE2-0F
	RRC			;FEE3-0F
	RRC			;FEE4-0F
	RRC			;FEE5-0F
	CALL	CONV		;FEE6-CD 0E FE *
	CALL	PO		;FEE9-CD 52 FD *
	MOV	A,E		;FEEC-7B
	CALL	CONV		;FEED-CD 0E FE *
	CALL	PO		;FEF0-CD 52 FD *
	MOV	A,E		;FEF3-7B
	ADD	D		;FEF4-82
	MOV	D,A		;FEF5-57
	RET			;FEF6-C9

;***********************************************
;
; TEST FOR NULL INPUT PARAMETER
;
PCHK:	CALL	TI		;FEF7-CD C7 FF *
P2C:	CPI	' '		;FEFA-FE 20
	RZ			;FEFC-C8
	CPI	','		;FEFD-FE 2C
	RZ			;FEFF-C8
	CPI	CR		;FF00-FE 0D
	STC			;FF02-37
	RZ			;FF03-C8
	CMC			;FF04-3F
	RET			;FF05-C9

;***********************************************
;
; PUNCH CR, LF
;
PEOL:	CALL	POC		;FF06-CD 4E FD *
	DB      CR		;FF09-0D
	CALL	POC		;FF0A-CD 4E FD *
	DB      LF		;FF0D-0A
	RET			;FF0E-C9

;***********************************************
;
; RESTART 1 CODE, (PROGRAMMED BREAKPOINT)
;
; THIS ROUTINE IS ENTERED VIA AND RESTART 1 (RST 1) INSTRUCTION
; THE INSTRUCTION IS ENCOUNTERED EITHER IN THE USER PROGRAM (AS
; A BREAKPOINT) OR IS INPUT VIA A CONSOLE INTERRUPT.  THIS
; ROUTINE SAVES THE STATE OF THE CALLING PROCESS AND TURNS CONTROL
; OVER TO THE MONITOR.
;
RESTART:
	DI			;FF0F-F3
	PUSH	H		;FF10-E5
	PUSH	D		;FF11-D5
	PUSH	B		;FF12-C5
	PUSH	PSW		;FF13-F5
	POP	H		;FF14-E1
	IN	MASK		;FF15-DB FC
	PUSH	PSW		;FF17-F5
	PUSH	H		;FF18-E5
	MVI	A,NOT INT0	;FF19-3E FE
	OUT	MASK		;FF1B-D3 FC
	GET     EXIT
	XCHG			;FF22-EB
	FETCH   12
	MVI	B,5		;FF27-06 05
	XCHG			;FF29-EB
RST0:	DCX	H		;FF2A-2B
	MOV	M,D		;FF2B-72
	DCX	H		;FF2C-2B
	MOV	M,E		;FF2D-73
	POP	D		;FF2E-D1
	DCR	B		;FF2F-05
	JNZ	RST0		;FF30-C2 2A FF *
	POP	B		;FF33-C1
	DCX	B		;FF34-0B
	SPHL			;FF35-F9
	GET     TLOC
	MOV	A,M		;FF3B-7E
	SUB	C		;FF3C-91
	INX	H		;FF3D-23
	MOV	A,M		;FF41-7E
	SBB	B		;FF42-98
	JZ	RST1		;FF43-CA 58 FF *
	INX	H		;FF46-23
	INX	H		;FF47-23
	MOV	A,M		;FF48-7E
	SUB	C		;FF49-91
	INX	H		;FF4A-23
	MOV	A,M		;FF4E-7E
	SBB	B		;FF4F-98
	JZ	RST1		;FF50-CA 58 FF *
	MVI	A,EOI		;FF53-3E 20
	OUT	REVRT		;FF55-D3 FD
	INX	B		;FF57-03
RST1:   
        GET LLOC
	MOV	M,E		;FF5D-73
	INX	H		;FF5E-23
	MOV	M,D		;FF5F-72
	MVI	L,(PLOC AND 0FFH)-1 ;FF60-2E E0
	MOV	M,C		;FF62-71
	INX	H		;FF63-23
	MOV	M,B		;FF64-70
	PUSH	B		;FF65-C5
	CALL	COMC		;FF66-CD 47 FD *
	DB	'*'
	POP	H		;FF6A-E1
	CALL	LADR		;FF6B-CD 7A FE *
	GET     TLOC
	MVI	D,2		;FF73-16 02
RST2:	MOV	C,M		;FF75-4E
	XRA	A		;FF76-AF
	MOV	M,A		;FF77-77
	INX	H		;FF78-23
	MOV	B,M		;FF79-46
	MOV	M,A		;FF7A-77
	INX	H		;FF7B-23
	MOV	A,C		;FF7C-79
	ORA	B		;FF7D-B0
	JZ	RST3		;FF7E-CA 83 FF *
	MOV	A,M		;FF81-7E
	STAX	B		;FF82-02
RST3:	INX	H		;FF83-23
	DCR	D		;FF84-15
	JNZ	RST2		;FF85-C2 75 FF *
	JMP	START		;FF88-C3 30 F8 *
	
;***********************************************
;
; RIX - GET CHAR FROM READER
; STRIP PARITY
;
RIX:	CALL	RI		;FF8B-CD B8 FC *
	JC	ERROR		;FF8E-DA 26 F8 *
	ANI	07FH		;FF91-E6 7F
	RET			;FF93-C9
	
;************
SELECT:	IN	PSTAT		;FF94-DB F1
	ORA	A		;FF96-B7
	JZ	ERROR		;FF97-CA 26 F8 *
	CALL	TI		;FF9A-CD C7 FF *
	CPI	'T'		;FF9D-FE 54
	JNZ	SE0		;FF9F-C2 A6 FF *
	XRA	A		;FFA2-AF
	JMP	SE1		;FFA3-C3 AD FF *
SE0:	CPI	'F'		;FFA6-FE 46
	JNZ	ERROR		;FFA8-C2 26 F8 *
	MVI	A,0FFH		;FFAB-3E FF
SE1:	STA	MSK		;FFAD-32 04 00 *
	CALL	TI		;FFB0-CD C7 FF *
	SUI	'X'		;FFB3-D6 58
	LXI	B,0FFH		;FFB5-01 FF 00 *
	RZ			;FFB8-C8
	DCR	A		;FFB9-3D
	LXI	B,(PSOCK OR PNIB) SHL 8 + 0F0H		;FFBA-01 F0 30 *
	RZ			;FFBD-C8
	DCR	A		;FFBE-3D
	JNZ	ERROR		;FFBF-C2 26 F8 *
	LXI	B,PSOCK SHL 8 + 0F0H	;FFC2-01 0F 20 *
	RET			;FFC5-C9
	
;***********************************************
; 
; INPUT FROM CONSOLE, ECHOED AND RETURNED IN A
; CHECK FOR CTL-C AND STOP OPERATION
;
TI:	PUSH	B		;FFC7-C5
	CALL	CI		;FFC8-CD 85 FC *
	ANI	07FH		;FFCB-E6 7F
	CPI	ETX		;FFD0-FE 03
	JZ	ERROR		;FFD2-CA 26 F8 *
	MOV	C,A		;FFD5-4F
	CALL	CO		;FFD6-CD 1D FD *
	MOV	A,C		;FFD9-79
	POP	B		;FFDA-C1
	RET			;FFDB-C9
;
;
;
        ORG     0FFFDH
	DB      023H		;FFE5-23
	DB      000H
	DB      000H            ;MDS-I
        
        END
